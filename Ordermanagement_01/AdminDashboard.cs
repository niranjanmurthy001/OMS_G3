using ClosedXML.Excel;
using CrystalDecisions.CrystalReports.Engine;
using CrystalDecisions.Shared;
using DevExpress.XtraBars.Alerter;
using DevExpress.XtraSplashScreen;
using Microsoft.Office.Interop.Excel;
using Newtonsoft.Json;
using Ordermanagement_01.Masters;
using Ordermanagement_01.Models;
using Ordermanagement_01.New_Dashboard.Employee;
using Ordermanagement_01.Properties;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.Windows.Input;


namespace Ordermanagement_01
{
    public partial class AdminDashboard : Form
    {
        SplashScreenManager splashScreenManager1 = new SplashScreenManager();
        Commonclass Comclass = new Commonclass();
        DataAccess dataaccess = new DataAccess();
        DropDownistBindClass dbc = new DropDownistBindClass();
        Classes.Load_Progres load_Progressbar = new Classes.Load_Progres();

        System.Data.DataTable dt_Final_Score = new System.Data.DataTable();

        InfiniteProgressBar.clsProgress clsLoader = new InfiniteProgressBar.clsProgress();
        public int Subprocess_id, ClientId, userid, Pass_Sub_Process_Id, Pass_My_Sub_Process_Id;
        DateTime datescoredate;
        private int childFormNumber = 0;
        public int fixWidth, fixHeight, tempWidth, tempHeight;
        public string User_Role_Id, TAT, score_board, header_Pending;
        string Time_Zone, OrderViewType;
        string Order_Target, Time_Zone1, Recived_Time, Order_Target1, Score_Board_Date;
        string From_Email;
        int Time_Interval;

        int Hour;
        int Search_Count, Search_Qc_Count, Typing_Count, Typing_Qc_Count, Final_Qc_Count, Upload_Count, Exception_Count, Rework_Count;
        int Diffrence_Time;
        static double Total_Allocated_Time, Total_Working_Time, Totla_User_Hold_Time, Totla_User_Exception_Time, Exception_Effeciency, Total_Effeciency;
        DateTime Date_Production_Date;
        //Reports============
        Hashtable ht = new Hashtable();
        System.Data.DataTable dt = new System.Data.DataTable();
        System.Data.DataTable dtclientexport = new System.Data.DataTable();
        System.Data.DataTable dtuserexport = new System.Data.DataTable();
        System.Data.DataTable dtordererror = new System.Data.DataTable();
        DataSet ds = new DataSet();
        Hashtable ht_Status = new Hashtable();
        System.Data.DataTable dt_Status = new System.Data.DataTable();

        int Client, SubProcess;
        ReportDocument rptDoc = new ReportDocument();

        System.Data.DataTable dtAuto_Not_Assigned_Order = new System.Data.DataTable();
        System.Data.DataTable dtAuto_Assigned_Order = new System.Data.DataTable();

        static System.Data.Common.DbConnectionStringBuilder builder = new System.Data.Common.DbConnectionStringBuilder();
        string server = "192.168.12.33";
        string database = "TITLELOGY_NEW_OMS";
        string UserID = "sa";
        string password = "password1$";

        int Order_Id;
        string My_Client;
        string Client_Order_no;
        int Order_Type, Loged_In_User_Id;
        private System.Drawing.Point Fromdate, lbl_Fromdate, Todate, Todate_1, client, lbl_client, subprocess, lbl_subprocess, username, username1, status, status1, orderno, orderno1;
        string Export_Title_Name; string Username;

        string Employee_Report;
        TableLogOnInfos crtableLogoninfos = new TableLogOnInfos();
        TableLogOnInfo crtableLogoninfo = new TableLogOnInfo();
        ConnectionInfo crConnectionInfo = new ConnectionInfo();
        Tables CrTables;
        string Passing_Sub_Process_ID;
        System.Data.DataTable dtclientReport = new System.Data.DataTable();
        string Employee_24_7_Production_user_id, Employee_24_7_Hour;
        int Employee_24_7_Production_Value;
        int Cost_Count, Email_Count, Total_Count;
        double Effiececncy;
        string Path1;
        DateTime dtc_date;
        DateTime dtfirsttime;
        DateTime dtsecondtime;
        static string F_Date;
        static string T_Date;
        int Auto_Allocation_Scrol_Postion = 0;
        int Day_Time_Break, Night_Time_Break, Total_Break, Ideal_Day_Break, Ideal_Night_Break, Ideal_Total_Break;
        string Password;

        decimal Emp_Eff_Allocated_Order_Count, Eff_Order_User_Effecncy;
        int Day, Prv_day;
        int Current_Holiday, Previous_Holiday;
        string Production_Date, Login_Production_Date;
        decimal e2;
        TimeSpan prod_t, Ideal_t, Break_t, Total_t;
        int Production_Time, Ideal_Time, Break_Time, Total_Time;
        int Application_Login_Type;
        Thread syncThread = null;
        string User_namefornotify;
        System.Timers.Timer timer_Dash;

        //----------------------Background Work Thread --------------------

        private BackgroundWorker Dash_Board_Worker = new BackgroundWorker();


        public AdminDashboard(string User_Role, string user_id, string User_name, string Password,int Login_Type)
        {

            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);
            try
            {

                InitializeComponent();

                User_Role_Id = User_Role;
                userid = int.Parse(user_id.ToString());
                Loged_In_User_Id = userid;

                lbl_username.Text = User_name;
                ToolStripButton12.Text = User_name + " Profile";
               this.User_namefornotify = User_name;
                Load_AutomaticEmails();
                this.Password = Password;
                this.Application_Login_Type = Login_Type;

                Dash_Board_Worker.DoWork += new DoWorkEventHandler(Dash_Board_Worker_DoWork);
                Dash_Board_Worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(Dash_Board_Worker_RunWorkerCompleted);
                Dash_Board_Worker.ProgressChanged += new ProgressChangedEventHandler(Dash_Board_Worker_ProgressChanged);
                Dash_Board_Worker.WorkerReportsProgress = true;
                Dash_Board_Worker.WorkerSupportsCancellation = true;
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }

        }

        private void User_Control()
        {
            //dateTimePicker1.Value = DateTime.Now;
            if (User_Role_Id == "2")
            {

                tabControl1.TabPages.Remove(tabPage2);
                tabControl1.TabPages.Remove(tabPage5);

                tabControl4.TabPages.Remove(tabPage14);
                tabControl4.TabPages.Remove(tabPage15);

                tabControl5.TabPages.Remove(tabPage17);
                tabControl5.TabPages.Remove(tabPage18);
                tabControl1.TabPages.Remove(tabPage19);
                tabControl1.TabPages.Remove(tabPage20);

                button4.Enabled = true;
                group_Box_Vendor.Visible = false;

                lbl_Rework_Pending_Allocation.Enabled = false;
                Lbl_Clarification_orders.Enabled = false;
                lbl_Hold.Enabled = false;
                lbl_CANCELLED.Enabled = false;
                lbl_COmpleted_Order_Count.Enabled = false;
                lbl_Reassigned.Enabled = false;
                lbl_Rus_Order_Count.Enabled = false;
                lbl_Over_Due_Count.Enabled = false;
                Grp_TAT.Visible = false;



            }
            else if (User_Role_Id == "1")
            {
                lbl_Rework_Pending_Allocation.Enabled = true;
                Lbl_Clarification_orders.Enabled = true;
                lbl_Hold.Enabled = true;
                lbl_CANCELLED.Enabled = true;
                lbl_COmpleted_Order_Count.Enabled = true;
                lbl_Reassigned.Enabled = true;
                lbl_Rus_Order_Count.Enabled = true;
                lbl_Over_Due_Count.Enabled = true;
                ToolStripButton12.Enabled = false;
                Grp_TAT.Visible = true;
            }

            foreach (ToolStripMenuItem mnu in MenuStrip.Items)
            {
                mnu.Enabled = false;
            }
            foreach (ToolStripItem tsitem in ToolStrip1.Items)
            {
                tsitem.Enabled = false;
            }
            foreach (Control ctrl in Gb_Processing.Controls)
            {
                ctrl.Enabled = false;
            }
            foreach (Control ctrl in groupBox1.Controls)
            {
                ctrl.Enabled = false;
            }
            foreach (Control ctrl in groupBox2.Controls)
            {
                ctrl.Enabled = false;
            }
            group_box_abstractor.Enabled = false;
            group_box_abstractor.Visible = false;


            //abstractorToolStripMenuItem.Enabled = true;
            btn_reallocate.Enabled = false;
            button2.Enabled = false;

            Hashtable htselect = new Hashtable();
            System.Data.DataTable dtselect = new System.Data.DataTable();
            htselect.Add("@Trans", "SELECTEMPSTATUS");
            htselect.Add("@User_id", userid);
            dtselect = dataaccess.ExecuteSP("Sp_User_Access", htselect);
            for (int i = 0; i < dtselect.Rows.Count; i++)
            {
                foreach (Control ctrl in this.Controls)
                {
                    if (ctrl.Text.ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {
                        ctrl.Enabled = true;
                    }

                }


                foreach (ToolStripMenuItem mnu in MenuStrip.Items)
                {
                    if (mnu.Text.ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {
                        mnu.Enabled = true;
                    }
                }
                foreach (ToolStripItem tsitem in ToolStrip1.Items)
                {
                    if (tsitem.Text.ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {
                        tsitem.Enabled = true;
                    }
                }
                foreach (Control ctrl in Gb_Processing.Controls)
                {
                    if ("Search Process".ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {
                        lbl_Search_Work_Orders_Count.Enabled = true;
                    }
                    else if ("Search QC Process".ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {
                        lbl_Search_orders_Qc_Count.Enabled = true;
                    }
                    else if ("Typing Process".ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {
                        lbl_Typing_work_Count.Enabled = true;
                    }
                    else if ("Typing QC Process".ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {
                        lbl_Typing_Qc_Orders_Work_Count.Enabled = true;
                    }
                    else if ("Upload Process".ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {
                        lbl_Upload_Order_Work_Count.Enabled = true;
                    }
                    else if ("ABSTRACTOR".ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {
                        lbl_Oms_Abstractor_Processing_Que.Enabled = true;
                    }
                    else if ("Final Qc Process".ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {

                        lbl_Final_Qc_Orders_Work_Count.Enabled = true;
                    }
                    else if ("Exception Process".ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {

                        lbl_Exception_Orders_Work_Count.Enabled = true;
                    }

                    else if ("Tax Process".ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {

                        btn_tax_Order_Processing.Enabled = true;

                    }

                }
                foreach (Control ctrl in groupBox1.Controls)
                {

                    if ("Search Allocation".ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {
                        lb_Search_Order_ALlocate_count.Enabled = true;
                    }
                    else if ("Search QC Allocation".ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {
                        lbl_search_Qc_Allocate_Count.Enabled = true;
                    }
                    else if ("Typing Allocation".ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {
                        lbl_typing_Allocate_Count.Enabled = true;
                    }
                    else if ("Typing QC Allocation".ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {
                        lbl_Typing_Allocate_Qc_Count.Enabled = true;
                    }
                    else if ("Upload Allocation".ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {
                        lbl_Upload_Orders_Allocate_Count.Enabled = true;
                    }
                    else if ("ABSTRACTOR".ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {
                        lbl_Appstraction.Enabled = true;
                        lbl_Appstraction.Visible = true;
                    }
                    else if ("Final Qc Allocation".ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {

                        lbl_Final_Qc_Orders_Allocation_Count.Enabled = true;
                    }
                    else if ("Exception Allocation".ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {

                        lbl_Exception_Orders_Allocation_Count.Enabled = true;
                    }

                    else if ("Research Allocation".ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {

                        lb_ReSearch_Order_ALlocate_count.Enabled = true;
                    }

                    else if ("Tax Allocation".ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {

                        btn_Internal_Tax_Allocation.Enabled = true;


                    }


                }
                foreach (Control ctrl in groupBox2.Controls)
                {
                    if ("CLARIFICATION" == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {
                        Lbl_Clarification_orders.Enabled = true;


                    }
                    else if ("HOLD" == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {
                        lbl_Hold.Enabled = true;

                    }
                    else if ("CANCELLED" == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {
                        lbl_CANCELLED.Enabled = true;
                    }
                    else if ("REASSIGNED" == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {
                        lbl_Reassigned.Enabled = true;

                    }
                    else if ("RUSH" == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {
                        lbl_Rus_Order_Count.Enabled = true;
                    }
                    else if ("OVER DUE" == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                    {
                        lbl_Over_Due_Count.Enabled = true;
                    }

                }



                if (group_box_abstractor.Text.ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                {
                    group_box_abstractor.Visible = true;
                    group_box_abstractor.Enabled = true;
                }

                if (btn_reallocate.Text.ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                {
                    btn_reallocate.Enabled = true;
                }
                if (button2.Text.ToUpper() == dtselect.Rows[i]["Controls"].ToString().ToUpper())
                {
                    button2.Enabled = true;
                }
                lbl_Rus_Order_Work_COunt.Enabled = true;


                //Restricting to Particular Userwise
                // invoiceToolStripMenuItem.Enabled = true;
                //This is for Invoice




                if (userid == 1 || userid == 33 || userid == 38 || userid == 135 || userid == 7 || userid == 4 || userid == 37 || userid == 204 || userid == 246)
                {
                    invoiceToolStripMenuItem.Enabled = true;



                }
                else
                {

                    invoiceToolStripMenuItem.Enabled = false;
                }
                if (userid == 1 || userid == 4 || userid == 33 || userid == 38 || userid == 204 || userid == 99 || userid == 25 || userid == 74 || userid == 48 || userid == 22 || userid == 8 || userid == 42 || userid == 21 || userid == 51 || userid == 71 || userid == 122 || userid == 22)
                {
                    orderCostToolStripMenuItem.Enabled = true;
                    btn_Order_Cost_Count.Enabled = true;

                }
                else
                {

                    orderCostToolStripMenuItem.Enabled = false;
                    btn_Order_Cost_Count.Enabled = false;
                }

                //only for admin rajini and rathan 
                if (userid == 135 || userid == 1 || userid == 7 || userid == 38 || userid == 204)
                {

                    webSearcherToolStripMenuItem1.Enabled = true;
                }
                else
                {

                    webSearcherToolStripMenuItem1.Enabled = false;

                }
                if (userid == 33 || userid == 89 || userid == 1 || userid == 135 || userid == 38 || userid == 204 || userid == 169 || userid == 207)
                {
                    group_box_abstractor.Visible = true;
                    abastractorToolStripMenuItem.Enabled = true;

                }
                else
                {
                    group_box_abstractor.Visible = false;
                    abastractorToolStripMenuItem.Enabled = false;
                }
                ////this is for managers and admin
                if (userid == 1 || userid == 38 || userid == 204 || userid == 135 || userid == 7 || userid == 4 || userid == 33 || userid == 99 || userid == 7 || userid == 37 || userid == 197)
                {

                    MastersToolStripMenuItem.Enabled = true;


                }
                else
                {

                    MastersToolStripMenuItem.Enabled = false;
                }

                //this is for admin and managers
                if (userid == 1 || userid == 38 || userid == 204 || userid == 135 || userid == 7 || userid == 4)
                {

                    AdminstrationToolStripMenuItem.Enabled = true;

                }
                else
                {

                    AdminstrationToolStripMenuItem.Enabled = false;
                }
                //this is for admin and managers
                if (userid == 1 || userid == 38 || userid == 204 || userid == 135 || userid == 7 || userid == 4 || userid == 278)
                {

                    ReportsToolStripMenuItem.Enabled = true;


                    vendorsToolStripMenuItem.Enabled = true;
                    checkToolStripMenuItem.Enabled = true;

                }
                else
                {

                    ReportsToolStripMenuItem.Enabled = false;
                    checkToolStripMenuItem.Enabled = false;
                    checkToolStripMenuItem.Enabled = false;
                }

                //users
                if (userid == 1 || userid == 38 || userid == 204 || userid == 135 || userid == 7 || userid == 4)
                {

                    OrdersToolStripButton.Enabled = true;

                    ToolStripButton11.Enabled = true;

                    autoAllocationToolStripMenuItem.Enabled = true;






                }
                else
                {
                    OrdersToolStripButton.Enabled = false;

                    ToolStripButton11.Enabled = false;
                    autoAllocationToolStripMenuItem.Enabled = false;

                }



                ToolStripButton12.Enabled = true;
            }


            //Rework

            lbl_Rework_Count.Enabled = true;

            lbl_Exam_Qc.Enabled = true;

            lbl_COmpleted_Order_Count.Enabled = true;
            group_Tax.Visible = false;
            if (User_Role_Id == "1")
            {

                lbl_Rework_Allocation.Enabled = true;
                lbl_SearchSuper_Qc_Allocation.Enabled = true;
                lbl_Rework_Pending_Allocation.Enabled = true;
                group_Tax.Visible = true;
                btn_reallocate.Enabled = true;
                ToolStripButton12.Enabled = false;
            }
            else
            {

                btn_reallocate.Enabled = false;
            }
            //Only Report Option to the Users


            if (userid == 107 || userid == 94 || userid == 81 || userid == 34 || userid == 246 || userid == 261 || userid == 260 || userid == 22 || userid == 278 || userid == 281 || userid == 212)
            {
                tabControl1.TabPages.Add(tabPage5);
                lbl_Rework_Pending_Allocation.Enabled = true;


            }





            // this is For Supervisor Role



            //This is for the Users Having Reallocate Option and Report Option and Auto Allocate Option
            if (userid == 94 || userid == 96 || userid == 17 || userid == 77 || userid == 21 || userid == 74 || userid == 48 || userid == 25 || userid == 110 || userid == 13 || userid == 46 || userid == 128 || userid == 88 || userid == 246 || userid == 89 || userid == 207 || userid == 261 || userid == 260 || userid == 22 || userid == 278 || userid == 281 || userid == 212)
            {

                btn_reallocate.Enabled = true;
                Bind_Auto_Not_Assigned_Orders();
                Bind_Auto_Assigned_Orders();
                tabControl1.TabPages.Add(tabPage2);

                tabControl1.TabPages.Add(tabPage20);
                tabControl2.TabPages.Remove(tabPage4);
                tabControl1.TabPages.Add(tabPage19);
                lbl_Rework_Allocation.Enabled = true;
                lbl_SearchSuper_Qc_Allocation.Enabled = true;

            }

            //Vendor Group Box For User_Wise

            if (userid == 128 || userid == 246 || userid == 22)
            {

                group_Box_Vendor.Visible = true;
                group_Tax.Visible = true;

            }



            // this is for Abstractor


            if (userid == 33 || userid == 89 || userid == 207)
            {

                group_box_abstractor.Visible = true;
                abastractorToolStripMenuItem.Enabled = true;


            }

            // this is for Reallocate
            if (userid == 258 || userid == 89 || userid == 207)
            {

                btn_reallocate.Enabled = true;


            }


            if (userid == 22 || userid == 37 || userid == 284)
            {
                ToolStripButton11.Enabled = true;
                OrdersToolStripButton.Enabled = true;
            }

            // this is for 



        }

        private void ShowNewForm(object sender, EventArgs e)
        {
            Form childForm = new Form();
            childForm.MdiParent = this;
            childForm.Text = "Window " + childFormNumber++;
            childForm.Show();
        }

        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            openFileDialog.Filter = "Text Files (*.txt)|*.txt|All Files (*.*)|*.*";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                string FileName = openFileDialog.FileName;
            }
        }

        private void SaveAsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            saveFileDialog.Filter = "Text Files (*.txt)|*.txt|All Files (*.*)|*.*";
            if (saveFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                string FileName = saveFileDialog.FileName;
            }
        }

        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void CutToolStripMenuItem_Click(object sender, EventArgs e)
        {
        }

        private void CopyToolStripMenuItem_Click(object sender, EventArgs e)
        {
        }

        private void PasteToolStripMenuItem_Click(object sender, EventArgs e)
        {
        }

        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //  statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        private void TileVerticalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            foreach (Form childForm in MdiChildren)
            {
                childForm.Close();
            }
        }

        private void ToolStripButton17_Click(object sender, EventArgs e)
        {
            int Count = 0;
            foreach (Form f in System.Windows.Forms.Application.OpenForms)
            {

                if (f.Name == "Employee_Order_Entry")
                {


                    MessageBox.Show("Please Close the Order File and Log Out");
                    Count = 1;




                }

            }

            if (Count != 1)
            {
                DialogResult dialog = MessageBox.Show("Do you want to Log Out", "Log Out Confirmation", MessageBoxButtons.YesNo);
                if (dialog == DialogResult.Yes)
                {
                    Daily_User_Login();
                    System.Environment.Exit(1);
                }

            }
            else
            {


            }

        }


        private void AdminDashboard_Load(object sender, EventArgs e)
        {
            //  load_Progressbar.Start_progres();
            // clsLoader.startProgress();

            //btn_Refresh.Enabled = true;
            //btn_Refresh.Image = Image.FromFile(@"\\192.168.12.33\Oms-Image-Files\refresh.png");

            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);
            try
            {
                Ordermanagement_01.Gen_Forms.Login loginfrm = new Ordermanagement_01.Gen_Forms.Login();
                loginfrm.Close();
                //User_Control();
                User_Access();
                UserCount();
                Daily_Setting();

                User_Role_Wise_Access();

                if (User_Role_Id == "1" || User_Role_Id == "6")
                {
                    Bind_Over_Daily_WiseCount();
                    // Bind_Client_Wise_Target_Count_Of_Orders(); as of now not using
                }
                if (User_Role_Id != "2")
                {

                    Bind_Auto_Not_Assigned_Orders();
                    Bind_Auto_Assigned_Orders();

                    Get_Count_Of_Vendor_Orders();

                    // Bind_Admin_User_Clients();

                    AddParent_Superqc_My_report();
                    AddParent_Superqc_All_report();

                }

                //  }
                // Bind_Employee_Wise_Target_Count_Of_Orders();

                Get_Count_Of_Orders();
                if (User_Role_Id == "1" || User_Role_Id == "5" || User_Role_Id == "6")
                {
                    Get_Count_Of_Abstractor_Orders();
                }

                // Score_Board();
                //  Rework_Scoreboard();
                // Superqc_Scoreboard();
                //  Bind_Alerts_Count(); // server issue commneted

                if (User_Role_Id == "1" || User_Role_Id == "6" || User_Role_Id == "4" || User_Role_Id == "3")
                {
                    Get_Count_Of_Tax_Orders();


                }

                //Employee_Wise_Effeciency(); This is Old Method of Calcualtion Eff

                Populate_Production_Date();

                Daily_User_Login();

                // Employee_New_effeciency();

                Employee_New_Update_effeciency(); // This is commented on 29/11/2018
                Update_User_Last_Login_Date();

                Load_Sample_Report_For_Faster();

                //Hashtable ht_Emp_Status = new Hashtable();
                //System.Data.DataTable dt_Emp_Status = new System.Data.DataTable();
                //ht_Emp_Status.Add("@Trans", "SELECT_EMP");
                //ht_Emp_Status.Add("@Employee_Id", userid);
                //dt_Emp_Status = dataaccess.ExecuteSP("Sp_Employee_Status", ht_Emp_Status);
                //bool search_status = bool.Parse(dt_Emp_Status.Rows[0]["Search"].ToString());
                //bool Search_Qc_Status = bool.Parse(dt_Emp_Status.Rows[0]["Search_Qc"].ToString());

                // dateTimePicker1.Text = lnk_Zone_Time.Text;
                toolStripButton2.Visible = true;
                tabControl1.SelectedIndex = 0;

                //======================Reports Details===================


                //dbc.BindOrderStatusRpt(ddl_Task);
                //dbc.Bind_Order_Progress_rpt(ddl_Status);
                //dbc.BindUserName(ddl_EmployeeName);

                //if (User_Role_Id == "1")
                //{
                //    dbc.BindClientName(ddl_ClientName);
                //    dbc.BindClientName(ddl_Client_Status);
                //}
                //else
                //{

                //    dbc.BindClientNo(ddl_ClientName);
                //    dbc.BindClientNo(ddl_Client_Status);
                //}

                //  ddl_ClientName_SelectedIndexChanged(sender, e);


                //dbc.Bind_Month(ddl_Month);
                //dbc.Bind_Year(ddl_Year);
                //Hashtable htget_Current_Month = new Hashtable();
                //System.Data.DataTable dtget_Current_Month = new System.Data.DataTable();

                //htget_Current_Month.Add("@Trans", "GET_CURRENT_MONTH");
                //dtget_Current_Month = dataaccess.ExecuteSP("Sp_Score_Board", htget_Current_Month);
                //if (dtget_Current_Month.Rows.Count > 0)
                //{
                //    ddl_Month.SelectedValue = dtget_Current_Month.Rows[0]["C_Month"].ToString();
                //}


                //if (User_Role_Id == "1")
                //{
                //  //  dbc.BindSubProcessName_rpt1(ddl_SubProcess);
                //}

                Bind_Auto_Allocation_Users_List();

                string D1 = DateTime.Now.ToString("MM/dd/yyyy");
                dateTimePicker1.Value = DateTime.Now;


                txt_Fromdate.Format = DateTimePickerFormat.Custom;
                txt_Fromdate.CustomFormat = "MM/dd/yyyy";
                txt_Fromdate.Text = D1;

                txt_Todate.Format = DateTimePickerFormat.Custom;
                txt_Todate.CustomFormat = "MM/dd/yyyy";
                txt_Todate.Text = D1;

                txt_Employee_From_Date.Format = DateTimePickerFormat.Custom;
                txt_Employee_From_Date.CustomFormat = "MM/dd/yyyy";
                txt_Employee_From_Date.Text = D1;

                txt_Employee_Todate.Format = DateTimePickerFormat.Custom;
                txt_Employee_Todate.CustomFormat = "MM/dd/yyyy";
                txt_Employee_Todate.Text = D1;


                txt_First_date.Format = DateTimePickerFormat.Custom;
                txt_First_date.CustomFormat = "MM/dd/yyyy";
                txt_First_date.Text = D1;


                txt_Todate.Format = DateTimePickerFormat.Custom;
                txt_Todate.CustomFormat = "MM/dd/yyyy";
                txt_Todate.Text = D1;


                dtp_Employee_From_Date.Format = DateTimePickerFormat.Custom;
                dtp_Employee_From_Date.CustomFormat = "MM/dd/yyyy";
                dtp_Employee_From_Date.Text = D1;

                txt_My_From_Date.Format = DateTimePickerFormat.Custom;
                txt_My_From_Date.CustomFormat = "MM/dd/yyyy";
                txt_My_From_Date.Text = D1;

                txt_My_To_date.Format = DateTimePickerFormat.Custom;
                txt_My_To_date.CustomFormat = "MM/dd/yyyy";
                txt_My_To_date.Text = D1;

                dtp_From_date.Format = DateTimePickerFormat.Custom;
                dtp_From_date.CustomFormat = "MM/dd/yyyy";
                dtp_From_date.Text = D1;

                dtp_To_Date.Format = DateTimePickerFormat.Custom;
                dtp_To_Date.CustomFormat = "MM/dd/yyyy";
                dtp_To_Date.Text = D1;

                dtp_Rework.Format = DateTimePickerFormat.Custom;
                dtp_Rework.CustomFormat = "MM/dd/yyyy";
                dtp_Rework.Text = D1;

                dtp_Rework_Fromdate.Format = DateTimePickerFormat.Custom;
                dtp_Rework_Fromdate.CustomFormat = "MM/dd/yyyy";
                dtp_Rework_Fromdate.Text = D1;


                dtp_Rework_Todate.Format = DateTimePickerFormat.Custom;
                dtp_Rework_Todate.CustomFormat = "MM/dd/yyyy";
                dtp_Rework_Todate.Text = D1;


                dtp_MyFromdate.Format = DateTimePickerFormat.Custom;
                dtp_MyFromdate.CustomFormat = "MM/dd/yyyy";
                dtp_MyFromdate.Text = D1;

                dtp_MyTodate.Format = DateTimePickerFormat.Custom;
                dtp_MyTodate.CustomFormat = "MM/dd/yyyy";
                dtp_MyTodate.Text = D1;

                dtp_Superqc.Format = DateTimePickerFormat.Custom;
                dtp_Superqc.CustomFormat = "MM/dd/yyyy";
                dtp_Superqc.Text = D1;

                dtp_All_SuperqcFromdate.Format = DateTimePickerFormat.Custom;
                dtp_All_SuperqcFromdate.CustomFormat = "MM/dd/yyyy";
                dtp_All_SuperqcFromdate.Text = D1;

                dtp_All_SuperqcTodate.Format = DateTimePickerFormat.Custom;
                dtp_All_SuperqcTodate.CustomFormat = "MM/dd/yyyy";
                dtp_All_SuperqcTodate.Text = D1;


                dtp_MySuperqcFrom.Format = DateTimePickerFormat.Custom;
                dtp_MySuperqcFrom.CustomFormat = "MM/dd/yyyy";
                dtp_MySuperqcFrom.Text = D1;


                dtp_MySuperqc_To.Format = DateTimePickerFormat.Custom;
                dtp_MySuperqc_To.CustomFormat = "MM/dd/yyyy";
                dtp_MySuperqc_To.Text = D1;


                txt_First_date.Format = DateTimePickerFormat.Custom;
                txt_First_date.CustomFormat = "MM/dd/yyyy";
                txt_First_date.Text = D1;


                txt_Second_Date.Format = DateTimePickerFormat.Custom;
                txt_Second_Date.CustomFormat = "MM/dd/yyyy";
                txt_Second_Date.Text = D1;

                txt_Second_Date.Value = DateTime.Now.AddDays(1);

                rbtn_Employee_Production_CheckedChanged(sender, e);
                rbtn_Employee_Prd_Count_CheckedChanged(sender, e);

                //FOr My Reports Tab
                rbt_Emp_Prod_Report_CheckedChanged(sender, e);
                rbt_Emp_Prod_Count_CheckedChanged(sender, e);

                // clsLoader.stopProgress();
                //
                dtp_Employee_From_Date.Format = DateTimePickerFormat.Custom;
                dtp_Employee_From_Date.CustomFormat = "MM/dd/yyyy";
                dtp_Employee_From_Date.Text = D1;

                dtp_Employee_To_Date.Format = DateTimePickerFormat.Custom;
                dtp_Employee_To_Date.CustomFormat = "MM/dd/yyyy";
                dtp_Employee_To_Date.Text = D1;


                dbc.Bind_Team_Members(ddl_My_Username, userid);
                dbc.BindOrderStatusRpt(ddl_My_Task);
                dbc.Bind_Order_Progress_rpt(ddl_My_Status);

                // dbc.Bind_UserClient_rpt(ddl_My_ClientName, userid);
                //if (User_Role_Id == "1")
                //{
                //    dbc.BindClientName(ddl_My_ClientName);
                //}
                //else
                //{
                //    // dbc.BindClientName_For_Employee(ddl_My_ClientName);
                //    dbc.BindClientName_For_Employee(ddl_My_ClientName);
                //    // dbc.BindClientName_For_Employee_1(ddl_My_ClientName);
                //}
                //ddl_ClientName_SelectedIndexChanged(sender, e);
                // User Role 
                // dbc.BindOrder1(ddl_My_Ordernumber);
                // dbc.BindSubProcessName_rpt1(ddl_My_Sub_Client);
                this.Text = "Dashboard - " + lbl_username.Text + " " + DateTime.Now + "";

                Grid_Message_Bind();
                timer5_Tick(sender, e);
                timer5.Enabled = false;

                Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Employee.Ideal_Timings(userid, Production_Date)); });
                t.SetApartmentState(ApartmentState.STA);
                t.Start();


                Thread t_Production_Time = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Employee.Production_Time_Update(Production_Date)); });
                t_Production_Time.SetApartmentState(ApartmentState.STA);
                t_Production_Time.Start();

                // Check User In Production for Auto_Allocation


                Hashtable htgetusersinproduction = new Hashtable();
                System.Data.DataTable dtgetusersinproduction = new System.Data.DataTable();
                htgetusersinproduction.Add("@Trans", "GET_USER_IN_PRODUCTION");
                htgetusersinproduction.Add("@User_Id", userid);
                dtgetusersinproduction = dataaccess.ExecuteSP("Sp_Auto_Allocation_Orders", htgetusersinproduction);

                if (dtgetusersinproduction.Rows.Count > 0)
                {
                    Thread t_auto = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.AutoAllocation.Auto_Allocate_Orders(userid)); });
                    t_auto.SetApartmentState(ApartmentState.STA);
                    t_auto.Start();
                }


                // popup style notification
                //Ordermanagement_01.Gen_Forms.Popup_ToastStyle pop_Style = new Ordermanagement_01.Gen_Forms.Popup_ToastStyle();
                //pop_Style.Show();


                tabControl1.TabPages.Remove(tabPage2);
                tabControl1.TabPages.Remove(tabPage5);
                tabControl1.TabPages.Remove(tabPage8);
                tabControl1.TabPages.Remove(tabPage10);
                // notification icon

                // notifyIcon1.ShowBalloonTip(1000, "Important Notice :", "Logged In successfully", ToolTipIcon.Info);
                //Opp.Opp_Master.PopUp_Message_Style pop = new Opp.Opp_Master.PopUp_Message_Style();
                //pop.Show();
                AlertInfo info = new AlertInfo("Login Successfully",User_namefornotify, true);

                info.Image = Properties.Resources.ok_Icon;
                alertControl2.Show(this, info);
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
        }


        private void Daily_Setting()
        {

            if (User_Role_Id == "1" || User_Role_Id == "4" || User_Role_Id == "6" || User_Role_Id == "3")
            {

                btn_Dail_Attendance_Report.Visible = true;
            }
            else
            {

                btn_Dail_Attendance_Report.Visible = false;

            }

        }



        private void Count_Order_For_Ideal_User_Timings()
        {

            Hashtable htwebreaserch = new Hashtable();
            System.Data.DataTable dtwebresearch = new System.Data.DataTable();

            htwebreaserch.Add("@Trans", "SEARCH_QC_WORK_ORDERS");
            htwebreaserch.Add("@User_Id", userid);

            dtwebresearch = dataaccess.ExecuteSP("Sp_Order_Count", htwebreaserch);
            if (dtwebresearch.Rows.Count > 0)
            {
                Search_Qc_Count = int.Parse(dtwebresearch.Rows[0]["count"].ToString());
            }
            else
            {
                Search_Qc_Count = 0;
            }

            //Saecrh Qc Work orders
            Hashtable htsearchqcorders = new Hashtable();
            System.Data.DataTable dtsearchqcorders = new System.Data.DataTable();

            htsearchqcorders.Add("@Trans", "SEARCH_WORK_ORDERS");

            htsearchqcorders.Add("@User_Id", userid);

            dtsearchqcorders = dataaccess.ExecuteSP("Sp_Order_Count", htsearchqcorders);
            if (dtsearchqcorders.Rows.Count > 0)
            {
                //div_Web_Work.Visible = true;

                Search_Count = int.Parse(dtsearchqcorders.Rows[0]["count"].ToString());
                // lbl_Appstraction.Text = dtsearchqcorders.Rows[0]["count"].ToString();
            }
            else
            {

                Search_Count = 0;
            }



            Hashtable htmail_Reasrch = new Hashtable();
            System.Data.DataTable dtmail_Research = new System.Data.DataTable();

            htmail_Reasrch.Add("@Trans", "TYPING_WORK_ORDERS");

            htmail_Reasrch.Add("@User_Id", userid);

            dtmail_Research = dataaccess.ExecuteSP("Sp_Order_Count", htmail_Reasrch);
            if (dtmail_Research.Rows.Count > 0)
            {
                //div_mail_work.Visible = true;

                Typing_Count = int.Parse(dtmail_Research.Rows[0]["count"].ToString());
            }
            else
            {
                Typing_Count = 0;
                //div_mail_work.Visible = false;
            }

            //Typing Work Orders Qc
            Hashtable htTyping_Qc_Work_Orders = new Hashtable();
            System.Data.DataTable dtTyping_Qc_Work_Orders = new System.Data.DataTable();

            htTyping_Qc_Work_Orders.Add("@Trans", "TYPING_QC_WORK_ORDERS");

            htTyping_Qc_Work_Orders.Add("@User_Id", userid);

            dtTyping_Qc_Work_Orders = dataaccess.ExecuteSP("Sp_Order_Count", htTyping_Qc_Work_Orders);
            if (dtTyping_Qc_Work_Orders.Rows.Count > 0)
            {
                //div_mail_work.Visible = true;
                Typing_Qc_Count = int.Parse(dtTyping_Qc_Work_Orders.Rows[0]["count"].ToString());


            }
            else
            {
                Typing_Qc_Count = 0;

                //div_mail_work.Visible = false;
            }


            //Final QC Work Orders 
            Hashtable htFinal_Qc_Work_Orders = new Hashtable();
            System.Data.DataTable dtFinal_Qc_Work_Orders = new System.Data.DataTable();

            htFinal_Qc_Work_Orders.Add("@Trans", "FINAL_QC_WORK_ORDERS");

            htFinal_Qc_Work_Orders.Add("@User_Id", userid);

            dtFinal_Qc_Work_Orders = dataaccess.ExecuteSP("Sp_Order_Count", htFinal_Qc_Work_Orders);
            if (dtFinal_Qc_Work_Orders.Rows.Count > 0)
            {
                //div_mail_work.Visible = true;

                Final_Qc_Count = int.Parse(dtFinal_Qc_Work_Orders.Rows[0]["count"].ToString());
            }
            else
            {
                Final_Qc_Count = 0;
                //div_mail_work.Visible = false;
            }

            //Exception  Work Orders 
            Hashtable htException_Work_Orders = new Hashtable();
            System.Data.DataTable dtException_Work_Orders = new System.Data.DataTable();

            htException_Work_Orders.Add("@Trans", "EXCEPTION_WORK_ORDERS");

            htException_Work_Orders.Add("@User_Id", userid);

            dtException_Work_Orders = dataaccess.ExecuteSP("Sp_Order_Count", htException_Work_Orders);
            if (dtException_Work_Orders.Rows.Count > 0)
            {
                //div_mail_work.Visible = true;
                Exception_Count = int.Parse(dtException_Work_Orders.Rows[0]["count"].ToString());


            }
            else
            {
                Exception_Count = 0;
                //div_mail_work.Visible = false;
            }



            Hashtable htqcWork = new Hashtable();
            System.Data.DataTable dtqcwork = new System.Data.DataTable();

            htqcWork.Add("@Trans", "UPLOAD_ORDERS_WORK");

            htqcWork.Add("@User_Id", userid);

            dtqcwork = dataaccess.ExecuteSP("Sp_Order_Count", htqcWork);
            if (dtqcwork.Rows.Count > 0)
            {

                Upload_Count = int.Parse(dtqcwork.Rows[0]["count"].ToString());





            }
            else
            {
                Upload_Count = 0;
                //div_Count_Qc_Que.Visible = false;
            }



            Hashtable ht_ReWork_Orders = new Hashtable();
            System.Data.DataTable dtRe_Work_Orders = new System.Data.DataTable();

            ht_ReWork_Orders.Add("@Trans", "TOTAL_REWORK_ORDERS_FOR_USER");

            ht_ReWork_Orders.Add("@User_Id", userid);

            dtRe_Work_Orders = dataaccess.ExecuteSP("Sp_Order_Rework_Count", ht_ReWork_Orders);
            if (dtRe_Work_Orders.Rows.Count > 0)
            {
                //div_mail_work.Visible = true;
                Rework_Count = int.Parse(dtRe_Work_Orders.Rows[0]["count"].ToString());



            }
            else
            {
                Rework_Count = 0;

                //div_mail_work.Visible = false;
            }

            if (Search_Count == 0 && Search_Qc_Count == 0 && Typing_Count == 0 && Typing_Qc_Count == 0 && Final_Qc_Count == 0 && Upload_Count == 0 && Exception_Count == 0 && Rework_Count == 0)
            {


                Hashtable heget_diff_Time = new Hashtable();
                System.Data.DataTable dtgetdiff_Time = new System.Data.DataTable();
                heget_diff_Time.Add("@Trans", "GET_DIFFERNCE_TIME");
                heget_diff_Time.Add("@User_Id", userid);
                dtgetdiff_Time = dataaccess.ExecuteSP("Sp_User_Order_Ideal_Timings", heget_diff_Time);
                if (dtgetdiff_Time.Rows.Count > 0)
                {
                    Diffrence_Time = int.Parse(dtgetdiff_Time.Rows[0]["Diff_Time"].ToString());


                    if (Diffrence_Time >= 0 && Diffrence_Time <= 1)
                    {

                        int User_Max_Ideal_Time_Id;
                        Hashtable htgetMax_Ideal_time = new Hashtable();
                        System.Data.DataTable dtgetmax_ideal_Time = new System.Data.DataTable();
                        htgetMax_Ideal_time.Add("@Trans", "GET_MAX_IDEAL_TIME_ID");
                        htgetMax_Ideal_time.Add("@User_Id", userid);
                        dtgetmax_ideal_Time = dataaccess.ExecuteSP("Sp_User_Order_Ideal_Timings", htgetMax_Ideal_time);

                        if (dtgetmax_ideal_Time.Rows.Count > 0)
                        {
                            User_Max_Ideal_Time_Id = int.Parse(dtgetmax_ideal_Time.Rows[0]["User_Idel_Time_Id"].ToString());


                            Hashtable htupdateideal_Time = new Hashtable();
                            System.Data.DataTable dtupdateideal_Time = new System.Data.DataTable();
                            htupdateideal_Time.Add("@Trans", "UPDTAE_IDEAL_TIME");
                            htupdateideal_Time.Add("@User_Idel_Time_Id", User_Max_Ideal_Time_Id);
                            dtupdateideal_Time = dataaccess.ExecuteSP("Sp_User_Order_Ideal_Timings", htupdateideal_Time);

                        }
                    }
                    else
                    {

                        Hashtable htinsertideal_Time = new Hashtable();
                        System.Data.DataTable dtinserideal_Time = new System.Data.DataTable();
                        htinsertideal_Time.Add("@Trans", "INSERT");
                        htinsertideal_Time.Add("@User_Id", userid);
                        dtinserideal_Time = dataaccess.ExecuteSP("Sp_User_Order_Ideal_Timings", htinsertideal_Time);


                    }
                }
                else
                {

                    Hashtable htinsertideal_Time = new Hashtable();
                    System.Data.DataTable dtinserideal_Time = new System.Data.DataTable();
                    htinsertideal_Time.Add("@Trans", "INSERT");
                    htinsertideal_Time.Add("@User_Id", userid);
                    dtinserideal_Time = dataaccess.ExecuteSP("Sp_User_Order_Ideal_Timings", htinsertideal_Time);
                }






            }

        }

        private void Bind_Admin_User_Clients()
        {


            Hashtable ht_Admin_User_Clients = new Hashtable();
            System.Data.DataTable dt_Admin_User_Clients = new System.Data.DataTable();

            ht_Admin_User_Clients.Add("@Trans", "GET_ADMIN_USER_CLIENTS");
            ht_Admin_User_Clients.Add("@Log_In_Userid", userid);
            dt_Admin_User_Clients = dataaccess.ExecuteSP("Sp_Order_Status_Report", ht_Admin_User_Clients);

            if (dt_Admin_User_Clients.Rows.Count > 0)
            {


                for (int i = 0; i < dt_Admin_User_Clients.Rows.Count; i++)
                {
                    My_Client = My_Client + dt_Admin_User_Clients.Rows[i]["Client_ID"].ToString();
                    My_Client += (i < dt_Admin_User_Clients.Rows.Count) ? "," : string.Empty;

                }

            }




        }

        private void Load_Sample_Report_For_Faster()
        {
            rptDoc = new Reports.CrystalReport.SampleReport();
            Logon_To_Crystal();
            crViewer.ReportSource = rptDoc;
        }

        private void AdminDashboard_FormClosed(object sender, FormClosedEventArgs e)
        {

            System.Environment.Exit(1);
        }

        private void label2_Click(object sender, EventArgs e)
        {

        }


        protected void Get_Allocate_Orders_Count()
        {

            System.Data.DataTable dt = new System.Data.DataTable();
            IDictionary<string, object> Idict = new Dictionary<string, object>();
            Idict.Add("@Trans", "ALLOCAION_COUNT_ORDERS");
            dt = dataaccess.ExecuteSPNew("usp_Order_Counts", Idict);

            if (dt.Rows.Count > 0)
            {

                lb_ReSearch_Order_ALlocate_count.Text = "RE SEARCH " + "(" + dt.Rows[0]["Research"].ToString() + ")";
                lb_Search_Order_ALlocate_count.Text = "SEARCH " + "(" + dt.Rows[0]["Search"].ToString() + ")";
                lbl_search_Qc_Allocate_Count.Text = "SEARCH QC " + "(" + dt.Rows[0]["SearchQc"].ToString() + ")";
                lbl_typing_Allocate_Count.Text = "TYPING " + "(" + dt.Rows[0]["Typing"].ToString() + ")";
                lbl_Typing_Allocate_Qc_Count.Text = "TYPING QC " + "(" + dt.Rows[0]["Typing_Qc"].ToString() + ")";
                lbl_Final_Qc_Orders_Allocation_Count.Text = "FINAL QC " + "(" + dt.Rows[0]["Final_Qc"].ToString() + ")";
                lbl_Upload_Orders_Allocate_Count.Text = "UPLOAD " + "(" + dt.Rows[0]["Upload"].ToString() + ")";
                lbl_Exception_Orders_Allocation_Count.Text = "EXCEPTION  " + "(" + dt.Rows[0]["Exception"].ToString() + ")";

                btn_Image_req_Allocation.Text = "IMAGE REQ " + "(" + dt.Rows[0]["Image_Request"].ToString() + ")";
                btn_DataDepth_Allocation.Text = "DATA DEPTH " + "(" + dt.Rows[0]["Data_Depth"].ToString() + ")";
                btn_Tax_Req_Allocation.Text = "TAX REQ " + "(" + dt.Rows[0]["Tax_Request"].ToString() + ")";

                Lbl_Clarification_orders.Text = "CLARIFICATION  " + "(" + dt.Rows[0]["Clarification"].ToString() + ")";

                lbl_Hold.Text = "HOLD  " + "(" + dt.Rows[0]["Hold"].ToString() + ")";

                lbl_CANCELLED.Text = "CANCELLED  " + "(" + dt.Rows[0]["Cancelled"].ToString() + ")";

            }

            else
            {


                lb_ReSearch_Order_ALlocate_count.Text = "RE SEARCH     " + "(0)";
                lb_Search_Order_ALlocate_count.Text = "SEARCH     " + "(0)";
                lbl_search_Qc_Allocate_Count.Text = "SEARCH QC " + "(0)";
                lbl_typing_Allocate_Count.Text = "  TYPING     " + "(0)";
                lbl_Typing_Allocate_Qc_Count.Text = "  TYPING QC     " + "(0)";
                lbl_Final_Qc_Orders_Allocation_Count.Text = "  FINAL QC     " + "(0)";
                lbl_Upload_Orders_Allocate_Count.Text = "  FINAL QC     " + "(0)";
                lbl_Exception_Orders_Allocation_Count.Text = "  EXCEPTION    " + "(0)";

                btn_Image_req_Allocation.Text = "  IMAGE REQ    " + "(0)";
                btn_DataDepth_Allocation.Text = "  DATA DEPTH   " + "(0)";
                btn_Tax_Req_Allocation.Text = "  TAX REQ    " + "(0)";

                Lbl_Clarification_orders.Text = "CLARIFICATION  " + "(0)";
                lbl_Hold.Text = "HOLD  " + "(0)";
                lbl_CANCELLED.Text = "CANCELLED  " + "(0)";

            }










        }

        protected void Get_Processing_Orders_Count()
        {

            System.Data.DataTable dt = new System.Data.DataTable();
            IDictionary<string, object> Idict = new Dictionary<string, object>();

            if (User_Role_Id == "2" || User_Role_Id == "3" || User_Role_Id == "4")
            {
                Idict.Add("@Trans", "PROCESSING_COUNT_ORDERS_EMPLOYEE");
            }
            else if (User_Role_Id == "1" || User_Role_Id == "6" || User_Role_Id == "5")
            {
                Idict.Add("@Trans", "PROCESSING_COUNT_ORDERS_ADMIN");
            }
            dt = dataaccess.ExecuteSPNew("usp_Order_Counts", Idict);

            if (dt.Rows.Count > 0)
            {


                lbl_Search_Work_Orders_Count.Text = "SEARCH " + "(" + dt.Rows[0]["Search"].ToString() + ")";
                lbl_Search_orders_Qc_Count.Text = "SEARCH QC " + "(" + dt.Rows[0]["SearchQc"].ToString() + ")";
                lbl_Typing_work_Count.Text = "TYPING " + "(" + dt.Rows[0]["Typing"].ToString() + ")";
                lbl_Typing_Qc_Orders_Work_Count.Text = "TYPING QC " + "(" + dt.Rows[0]["Typing_Qc"].ToString() + ")";
                lbl_Final_Qc_Orders_Work_Count.Text = "FINAL QC " + "(" + dt.Rows[0]["Final_Qc"].ToString() + ")";
                lbl_Upload_Order_Work_Count.Text = "UPLOAD " + "(" + dt.Rows[0]["Upload"].ToString() + ")";
                lbl_Exception_Orders_Work_Count.Text = "EXCEPTION  " + "(" + dt.Rows[0]["Exception"].ToString() + ")";

                btn_Image_Request_Processing.Text = "IMAGE REQ " + "(" + dt.Rows[0]["Image_Request"].ToString() + ")";
                btn_DataDepth_Processing.Text = "DATA DEPTH " + "(" + dt.Rows[0]["Data_Depth"].ToString() + ")";
                btn_Tax_Req_Processing.Text = "TAX REQ " + "(" + dt.Rows[0]["Tax_Request"].ToString() + ")";


            }

            else
            {



                lbl_Search_Work_Orders_Count.Text = "SEARCH     " + "(0)";
                lbl_Search_orders_Qc_Count.Text = "SEARCH QC " + "(0)";
                lbl_Typing_work_Count.Text = "  TYPING     " + "(0)";
                lbl_Typing_Qc_Orders_Work_Count.Text = "  TYPING QC     " + "(0)";
                lbl_Final_Qc_Orders_Work_Count.Text = "  FINAL QC     " + "(0)";
                lbl_Upload_Order_Work_Count.Text = "  FINAL QC     " + "(0)";
                lbl_Exception_Orders_Work_Count.Text = "  EXCEPTION    " + "(0)";

                btn_Image_Request_Processing.Text = "  IMAGE REQ    " + "(0)";
                btn_DataDepth_Processing.Text = "  DATA DEPTH   " + "(0)";
                btn_Tax_Req_Processing.Text = "  TAX REQ    " + "(0)";


            }










        }
        protected void Get_Count_Of_Orders()
        {
            Ordermanagement_01.Gen_Forms.Login Login = new Ordermanagement_01.Gen_Forms.Login();



            Get_Allocate_Orders_Count();

            Get_Processing_Orders_Count();


            //Hashtable htResearch = new Hashtable();
            //System.Data.DataTable dtResearch = new System.Data.DataTable();

            //htResearch.Add("@Trans", "RESEARCH_ORDER_ALLOCATE");
            ////htselect.Add("@Sub_ProcessId", Subprocess_id);
            //dtResearch = dataaccess.ExecuteSP("Sp_Order_Count", htResearch);
            //if (dtResearch.Rows.Count > 0)
            //{
            //    //  divSearc_Order_alocate.Visible = true;

            //    if (InvokeRequired)
            //    {

            //        this.Invoke(new MethodInvoker(delegate
            //        {
            //            if (User_Role_Id == "1")
            //            {
            //                lb_ReSearch_Order_ALlocate_count.Text = "RE SEARCH     " + "(" + dtResearch.Rows[0]["count"].ToString() + ")";
            //            }
            //            else
            //            {
            //                lb_ReSearch_Order_ALlocate_count.Text = "RE SEARCH     " + "(" + dtResearch.Rows[0]["count"].ToString() + ")";
            //            }
            //        }));
            //    }

            //    else
            //    {
            //        if (User_Role_Id == "1")
            //        {
            //            lb_ReSearch_Order_ALlocate_count.Text = "RE SEARCH     " + "(" + dtResearch.Rows[0]["count"].ToString() + ")";
            //        }
            //        else
            //        {
            //            lb_ReSearch_Order_ALlocate_count.Text = "RE SEARCH     " + "(" + dtResearch.Rows[0]["count"].ToString() + ")";
            //        }

            //    }

            //}
            //else
            //{

            //    //div_web.Visible = false;
            //}


            //Hashtable htselect = new Hashtable();
            //System.Data.DataTable dtselect = new System.Data.DataTable();

            //htselect.Add("@Trans", "SEARCH_ORDER_ALLOCATE");
            ////htselect.Add("@Sub_ProcessId", Subprocess_id);
            //dtselect = dataaccess.ExecuteSP("Sp_Order_Count", htselect);
            //if (dtselect.Rows.Count > 0)
            //{
            //    //  divSearc_Order_alocate.Visible = true;

            //    if (InvokeRequired)
            //    {

            //        this.Invoke(new MethodInvoker(delegate
            //        {
            //            if (User_Role_Id == "1")
            //            {
            //                lb_Search_Order_ALlocate_count.Text = "SEARCH     " + "(" + dtselect.Rows[0]["count"].ToString() + ")";
            //            }
            //            else
            //            {
            //                lb_Search_Order_ALlocate_count.Text = "SEARCH     " + "(" + dtselect.Rows[0]["count"].ToString() + ")";
            //            }

            //        }));
            //    }
            //    else
            //    {

            //        if (User_Role_Id == "1")
            //        {
            //            lb_Search_Order_ALlocate_count.Text = "SEARCH     " + "(" + dtselect.Rows[0]["count"].ToString() + ")";
            //        }
            //        else
            //        {
            //            lb_Search_Order_ALlocate_count.Text = "SEARCH     " + "(" + dtselect.Rows[0]["count"].ToString() + ")";
            //        }
            //    }
            //}
            //else
            //{

            //    //div_web.Visible = false;
            //}

            //Search Qc_Orders
            //Hashtable htsearch_qc_Allocate = new Hashtable();
            //System.Data.DataTable dtsearch_qc_Allocate = new System.Data.DataTable();
            //htsearch_qc_Allocate.Add("@Trans", "SEARCH_QC_ORDER_ALLOCATE");
            //htsearch_qc_Allocate.Add("@Sub_ProcessId", Subprocess_id);
            //dtsearch_qc_Allocate = dataaccess.ExecuteSP("Sp_Order_Count", htsearch_qc_Allocate);
            //if (dtsearch_qc_Allocate.Rows.Count > 0)
            //{
            //    // divSearc_Order_alocate.Visible = true;
            //    //if (User_Role_Id == "1")
            //    //{
            //    //    lbl_search_Qc_Allocate_Count.Text = "SEARCH QC " + "(" + dtsearch_qc_Allocate.Rows[0]["count"].ToString() + ")";
            //    //}
            //    //else if (User_Role_Id == "2")
            //    //{
            //    if (InvokeRequired)
            //    {

            //        this.Invoke(new MethodInvoker(delegate
            //        {
            //            lbl_search_Qc_Allocate_Count.Text = "SEARCH QC " + "(" + dtsearch_qc_Allocate.Rows[0]["count"].ToString() + ")";
            //        }));
            //    }
            //    else
            //    {
            //        lbl_search_Qc_Allocate_Count.Text = "SEARCH QC " + "(" + dtsearch_qc_Allocate.Rows[0]["count"].ToString() + ")";

            //    }
            //    // }


            //}
            //else
            //{

            //    //div_web.Visible = false;
            //}

            //Hashtable htwebreaserch = new Hashtable();
            //System.Data.DataTable dtwebresearch = new System.Data.DataTable();
            //if (User_Role_Id == "2" || User_Role_Id == "3" || User_Role_Id == "4")
            //{
            //    htwebreaserch.Add("@Trans", "SEARCH_QC_WORK_ORDERS");
            //}
            //else if (User_Role_Id == "1" || User_Role_Id == "6" || User_Role_Id == "5")
            //{
            //    htwebreaserch.Add("@Trans", "SEARCH_QC_WORK_ORDERS_ADMIN");
            //}
            //htwebreaserch.Add("@User_Id", userid);
            //htwebreaserch.Add("@Sub_ProcessId", Subprocess_id);
            //dtwebresearch = dataaccess.ExecuteSP("Sp_Order_Count", htwebreaserch);
            //if (dtwebresearch.Rows.Count > 0)
            //{
            //    //div_Web_Work.Visible = true;
            //    if (InvokeRequired)
            //    {

            //        this.Invoke(new MethodInvoker(delegate
            //        {
            //            lbl_Search_orders_Qc_Count.Text = "SEARCH QC " + "(" + dtwebresearch.Rows[0]["count"].ToString() + ")";

            //        }));
            //    }
            //    else

            //    {

            //        lbl_Search_orders_Qc_Count.Text = "SEARCH QC " + "(" + dtwebresearch.Rows[0]["count"].ToString() + ")";
            //    }

            //}
            //else
            //{

            //    //  div_Web_Work.Visible = false;
            //}

            ////Saecrh Qc Work orders
            //Hashtable htsearchqcorders = new Hashtable();
            //System.Data.DataTable dtsearchqcorders = new System.Data.DataTable();
            //if (User_Role_Id == "2" || User_Role_Id == "3" || User_Role_Id == "4")
            //{
            //    htsearchqcorders.Add("@Trans", "SEARCH_WORK_ORDERS");
            //}
            //else if (User_Role_Id == "1" || User_Role_Id == "6" || User_Role_Id == "5")
            //{
            //    htsearchqcorders.Add("@Trans", "SEARCH_WORK_ORDERS_ADMIN");
            //}
            //htsearchqcorders.Add("@User_Id", userid);
            //htsearchqcorders.Add("@Sub_ProcessId", Subprocess_id);
            //dtsearchqcorders = dataaccess.ExecuteSP("Sp_Order_Count", htsearchqcorders);
            //if (dtsearchqcorders.Rows.Count > 0)
            //{
            //    //div_Web_Work.Visible = true;
            //    if (InvokeRequired)
            //    {

            //        this.Invoke(new MethodInvoker(delegate
            //        {
            //            lbl_Search_Work_Orders_Count.Text = "SEARCH    " + "(" + dtsearchqcorders.Rows[0]["count"].ToString() + ")";
            //        }));

            //    }
            //    else

            //    {

            //        lbl_Search_Work_Orders_Count.Text = "SEARCH    " + "(" + dtsearchqcorders.Rows[0]["count"].ToString() + ")";

            //    }



            //    // lbl_Appstraction.Text = dtsearchqcorders.Rows[0]["count"].ToString();
            //}
            //else
            //{

            //    //  div_Web_Work.Visible = false;
            //}
            Hashtable htAbstractororders = new Hashtable();
            System.Data.DataTable dtAbstractororders = new System.Data.DataTable();
            htAbstractororders.Add("@Trans", "ABSTRACTOR_ORDERS_ALLOCATE");
            htAbstractororders.Add("@Sub_ProcessId", Subprocess_id);
            dtAbstractororders = dataaccess.ExecuteSP("Sp_Order_Count", htAbstractororders);
            if (dtAbstractororders.Rows.Count > 0)
            {
                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {
                        lbl_Appstraction.Text = "ABSTRACTOR " + "(" + dtAbstractororders.Rows[0]["count"].ToString() + ")";
                    }));
                }
                else
                {
                    lbl_Appstraction.Text = "ABSTRACTOR " + "(" + dtAbstractororders.Rows[0]["count"].ToString() + ")";

                }
            }

            //Hashtable htmail1 = new Hashtable();
            //System.Data.DataTable dtmail1 = new System.Data.DataTable();
            //htmail1.Add("@Trans", "TYPING_ORDERS_ALLOCATE");
            //htmail1.Add("@Sub_ProcessId", Subprocess_id);
            //dtmail1 = dataaccess.ExecuteSP("Sp_Order_Count", htmail1);

            //if (dtmail1.Rows.Count > 0)
            //{
            //    //div_mail.Visible = true;

            //    //div_Web_Work.Visible = true;
            //    if (InvokeRequired)
            //    {

            //        this.Invoke(new MethodInvoker(delegate
            //        {
            //            if (User_Role_Id == "1")
            //            {
            //                lbl_typing_Allocate_Count.Text = "  TYPING     " + "(" + dtmail1.Rows[0]["count"].ToString() + ")";
            //            }
            //            else
            //            {
            //                lbl_typing_Allocate_Count.Text = "  TYPING     " + "(" + dtmail1.Rows[0]["count"].ToString() + ")";
            //            }

            //        }));
            //    }
            //    else
            //    {

            //        if (User_Role_Id == "1")
            //        {
            //            lbl_typing_Allocate_Count.Text = "  TYPING     " + "(" + dtmail1.Rows[0]["count"].ToString() + ")";
            //        }
            //        else
            //        {
            //            lbl_typing_Allocate_Count.Text = "  TYPING     " + "(" + dtmail1.Rows[0]["count"].ToString() + ")";
            //        }
            //    }



            //}
            //else
            //{

            //    //div_mail.Visible = false;
            //}


            //Typing Ac Allocate
            //Hashtable htTypingQc_Allocate = new Hashtable();
            //System.Data.DataTable dtTyping_Qc_Allocate = new System.Data.DataTable();
            //htTypingQc_Allocate.Add("@Trans", "TYPING_QC_ORDERS_ALLOCATE");
            //htTypingQc_Allocate.Add("@Sub_ProcessId", Subprocess_id);
            //dtTyping_Qc_Allocate = dataaccess.ExecuteSP("Sp_Order_Count", htTypingQc_Allocate);

            //if (dtTyping_Qc_Allocate.Rows.Count > 0)
            //{
            //    //div_mail.Visible = true;
            //    if (InvokeRequired)
            //    {

            //        this.Invoke(new MethodInvoker(delegate
            //        {
            //            if (User_Role_Id == "1")
            //            {
            //                lbl_Typing_Allocate_Qc_Count.Text = "TYPING QC " + "(" + dtTyping_Qc_Allocate.Rows[0]["count"].ToString() + ")";
            //            }
            //            else
            //            {
            //                lbl_Typing_Allocate_Qc_Count.Text = "TYPING QC " + "(" + dtTyping_Qc_Allocate.Rows[0]["count"].ToString() + ")";
            //            }

            //        }));
            //    }
            //    else
            //    {
            //        if (User_Role_Id == "1")
            //        {
            //            lbl_Typing_Allocate_Qc_Count.Text = "TYPING QC " + "(" + dtTyping_Qc_Allocate.Rows[0]["count"].ToString() + ")";
            //        }
            //        else
            //        {
            //            lbl_Typing_Allocate_Qc_Count.Text = "TYPING QC " + "(" + dtTyping_Qc_Allocate.Rows[0]["count"].ToString() + ")";
            //        }

            //    }

            //}
            //else
            //{

            //    //div_mail.Visible = false;
            //}



            //Final qc Allocate
            //Hashtable htFinalQc_Allocate = new Hashtable();
            //System.Data.DataTable dtFinal_Qc_Allocate = new System.Data.DataTable();
            //htFinalQc_Allocate.Add("@Trans", "FINAL_QC_ORDERS_ALLOCATE");
            //htFinalQc_Allocate.Add("@Sub_ProcessId", Subprocess_id);
            //dtFinal_Qc_Allocate = dataaccess.ExecuteSP("Sp_Order_Count", htFinalQc_Allocate);

            //if (dtFinal_Qc_Allocate.Rows.Count > 0)
            //{
            //    //div_mail.Visible = true;

            //    if (InvokeRequired)
            //    {

            //        this.Invoke(new MethodInvoker(delegate
            //        {
            //            if (User_Role_Id == "1")
            //            {
            //                lbl_Final_Qc_Orders_Allocation_Count.Text = "FINAL QC " + "(" + dtFinal_Qc_Allocate.Rows[0]["count"].ToString() + ")";
            //            }
            //            else
            //            {
            //                lbl_Final_Qc_Orders_Allocation_Count.Text = "FINAL QC " + "(" + dtFinal_Qc_Allocate.Rows[0]["count"].ToString() + ")";
            //            }

            //        }));
            //    }
            //    else
            //    {
            //        if (User_Role_Id == "1")
            //        {
            //            lbl_Final_Qc_Orders_Allocation_Count.Text = "FINAL QC " + "(" + dtFinal_Qc_Allocate.Rows[0]["count"].ToString() + ")";
            //        }
            //        else
            //        {
            //            lbl_Final_Qc_Orders_Allocation_Count.Text = "FINAL QC " + "(" + dtFinal_Qc_Allocate.Rows[0]["count"].ToString() + ")";
            //        }


            //    }


            //}
            //else
            //{

            //    //div_mail.Visible = false;
            //}



            //Exception Allocate
            //Hashtable htException_Allocate = new Hashtable();
            //System.Data.DataTable dtException_Allocate = new System.Data.DataTable();
            //htException_Allocate.Add("@Trans", "EXCEPTION_ORDERS_ALLOCATE");
            //htException_Allocate.Add("@Sub_ProcessId", Subprocess_id);
            //dtException_Allocate = dataaccess.ExecuteSP("Sp_Order_Count", htException_Allocate);

            //if (dtException_Allocate.Rows.Count > 0)
            //{
            //    //div_mail.Visible = true;
            //    if (InvokeRequired)
            //    {

            //        this.Invoke(new MethodInvoker(delegate
            //        {
            //            if (User_Role_Id == "1")
            //            {

            //                lbl_Exception_Orders_Allocation_Count.Text = "EXCEPTION " + "(" + dtException_Allocate.Rows[0]["count"].ToString() + ")";
            //            }
            //            else
            //            {
            //                lbl_Exception_Orders_Allocation_Count.Text = "EXCEPTION " + "(" + dtException_Allocate.Rows[0]["count"].ToString() + ")";
            //            }
            //        }));
            //    }
            //    else
            //    {

            //        if (User_Role_Id == "1")
            //        {

            //            lbl_Exception_Orders_Allocation_Count.Text = "EXCEPTION " + "(" + dtException_Allocate.Rows[0]["count"].ToString() + ")";
            //        }
            //        else
            //        {
            //            lbl_Exception_Orders_Allocation_Count.Text = "EXCEPTION " + "(" + dtException_Allocate.Rows[0]["count"].ToString() + ")";
            //        }
            //    }


            //}
            //else
            //{

            //    //div_mail.Visible = false;
            //}



            //Hashtable htmail_Reasrch = new Hashtable();
            //System.Data.DataTable dtmail_Research = new System.Data.DataTable();
            //if (User_Role_Id == "2" || User_Role_Id == "3" || User_Role_Id == "4")
            //{
            //    htmail_Reasrch.Add("@Trans", "TYPING_WORK_ORDERS");
            //}
            //else if (User_Role_Id == "1" || User_Role_Id == "6" || User_Role_Id == "5")
            //{
            //    htmail_Reasrch.Add("@Trans", "TYPING_WORK_ORDERS_ADMIN");
            //}
            //htmail_Reasrch.Add("@User_Id", userid);
            //htmail_Reasrch.Add("@Sub_ProcessId", Subprocess_id);
            //dtmail_Research = dataaccess.ExecuteSP("Sp_Order_Count", htmail_Reasrch);
            //if (dtmail_Research.Rows.Count > 0)
            //{
            //    //div_mail_work.Visible = true;
            //    if (InvokeRequired)
            //    {

            //        this.Invoke(new MethodInvoker(delegate
            //        {
            //            lbl_Typing_work_Count.Text = "TYPING     " + "(" + dtmail_Research.Rows[0]["count"].ToString() + ")";
            //        }));


            //    }
            //    else
            //    {
            //        lbl_Typing_work_Count.Text = "TYPING     " + "(" + dtmail_Research.Rows[0]["count"].ToString() + ")";

            //    }

            //}
            //else
            //{

            //    //div_mail_work.Visible = false;
            //}

            ////Typing Work Orders Qc
            //Hashtable htTyping_Qc_Work_Orders = new Hashtable();
            //System.Data.DataTable dtTyping_Qc_Work_Orders = new System.Data.DataTable();
            //if (User_Role_Id == "2" || User_Role_Id == "3" || User_Role_Id == "4")
            //{
            //    htTyping_Qc_Work_Orders.Add("@Trans", "TYPING_QC_WORK_ORDERS");
            //}
            //else if (User_Role_Id == "1" || User_Role_Id == "6" || User_Role_Id == "5")
            //{
            //    htTyping_Qc_Work_Orders.Add("@Trans", "TYPING_QC_WORK_ORDERS_ADMIN");
            //}
            //htTyping_Qc_Work_Orders.Add("@User_Id", userid);
            //htTyping_Qc_Work_Orders.Add("@Sub_ProcessId", Subprocess_id);
            //dtTyping_Qc_Work_Orders = dataaccess.ExecuteSP("Sp_Order_Count", htTyping_Qc_Work_Orders);
            //if (dtTyping_Qc_Work_Orders.Rows.Count > 0)
            //{
            //    if (InvokeRequired)
            //    {

            //        this.Invoke(new MethodInvoker(delegate
            //        {
            //            //div_mail_work.Visible = true;
            //            lbl_Typing_Qc_Orders_Work_Count.Text = "TYPING QC " + "(" + dtTyping_Qc_Work_Orders.Rows[0]["count"].ToString() + ")";

            //        }));

            //    }
            //    else
            //    {

            //        lbl_Typing_Qc_Orders_Work_Count.Text = "TYPING QC " + "(" + dtTyping_Qc_Work_Orders.Rows[0]["count"].ToString() + ")";
            //    }

            //}
            //else
            //{

            //    //div_mail_work.Visible = false;
            //}


            //Final QC Work Orders 
            Hashtable htFinal_Qc_Work_Orders = new Hashtable();
            //System.Data.DataTable dtFinal_Qc_Work_Orders = new System.Data.DataTable();
            //if (User_Role_Id == "2" || User_Role_Id == "3" || User_Role_Id == "4")
            //{
            //    htFinal_Qc_Work_Orders.Add("@Trans", "FINAL_QC_WORK_ORDERS");
            //}
            //else if (User_Role_Id == "1" || User_Role_Id == "6" || User_Role_Id == "5")
            //{
            //    htFinal_Qc_Work_Orders.Add("@Trans", "FINAL_QC_WORK_ORDERS_ADMIN");
            //}
            //htFinal_Qc_Work_Orders.Add("@User_Id", userid);
            //htFinal_Qc_Work_Orders.Add("@Sub_ProcessId", Subprocess_id);
            //dtFinal_Qc_Work_Orders = dataaccess.ExecuteSP("Sp_Order_Count", htFinal_Qc_Work_Orders);
            //if (dtFinal_Qc_Work_Orders.Rows.Count > 0)
            //{
            //    //div_mail_work.Visible = true;
            //    if (InvokeRequired)
            //    {

            //        this.Invoke(new MethodInvoker(delegate
            //        {
            //            lbl_Final_Qc_Orders_Work_Count.Text = "FINAL QC " + "(" + dtFinal_Qc_Work_Orders.Rows[0]["count"].ToString() + ")";
            //        }));
            //    }
            //    else
            //    {
            //        lbl_Final_Qc_Orders_Work_Count.Text = "FINAL QC " + "(" + dtFinal_Qc_Work_Orders.Rows[0]["count"].ToString() + ")";
            //    }


            //}
            //else
            //{

            //    //div_mail_work.Visible = false;
            //}

            //Exception  Work Orders 
            //Hashtable htException_Work_Orders = new Hashtable();
            //System.Data.DataTable dtException_Work_Orders = new System.Data.DataTable();
            //if (User_Role_Id == "2" || User_Role_Id == "3" || User_Role_Id == "4")
            //{
            //    htException_Work_Orders.Add("@Trans", "EXCEPTION_WORK_ORDERS");
            //}
            //else if (User_Role_Id == "1" || User_Role_Id == "6" || User_Role_Id == "5")
            //{
            //    htException_Work_Orders.Add("@Trans", "EXCEPTION_WORK_ORDERS_ADMIN");
            //}
            //htException_Work_Orders.Add("@User_Id", userid);
            //htException_Work_Orders.Add("@Sub_ProcessId", Subprocess_id);
            //dtException_Work_Orders = dataaccess.ExecuteSP("Sp_Order_Count", htException_Work_Orders);
            //if (dtException_Work_Orders.Rows.Count > 0)
            //{
            //    //div_mail_work.Visible = true;
            //    if (InvokeRequired)
            //    {

            //        this.Invoke(new MethodInvoker(delegate
            //        {
            //            lbl_Exception_Orders_Work_Count.Text = "EXCEPTION " + "(" + dtException_Work_Orders.Rows[0]["count"].ToString() + ")";
            //        }));

            //    }
            //    else
            //    {

            //        lbl_Exception_Orders_Work_Count.Text = "EXCEPTION " + "(" + dtException_Work_Orders.Rows[0]["count"].ToString() + ")";

            //    }



            //}
            //else
            //{

            //    //div_mail_work.Visible = false;
            //}



            // Internal Tax Working Orders 

            // this is commented for Server Issue

            Hashtable htinternal_Tax_Work_Orders = new Hashtable();
            System.Data.DataTable dtinternal_Tax_Work_Orders = new System.Data.DataTable();
            if (User_Role_Id == "2" || User_Role_Id == "3")
            {
                htinternal_Tax_Work_Orders.Add("@Trans", "INTERNAL_TAX_WORK_ORDERS_USER_WIESE");
            }
            else if (User_Role_Id == "1" || User_Role_Id == "6" || User_Role_Id == "5" || User_Role_Id == "4")
            {
                htinternal_Tax_Work_Orders.Add("@Trans", "INTERNAL_TAX_WORK_ORDERS_ADMIN");
            }
            htinternal_Tax_Work_Orders.Add("@User_Id", userid);

            dtinternal_Tax_Work_Orders = dataaccess.ExecuteSP("Sp_Tax_Internal_Count", htinternal_Tax_Work_Orders);
            if (dtinternal_Tax_Work_Orders.Rows.Count > 0)
            {

                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {
                        btn_tax_Order_Processing.Text = "TAX " + "(" + dtinternal_Tax_Work_Orders.Rows[0]["count"].ToString() + ")";
                    }));

                }
                else
                {
                    btn_tax_Order_Processing.Text = "TAX " + "(" + dtinternal_Tax_Work_Orders.Rows[0]["count"].ToString() + ")";

                }

            }
            else
            {

                //div_mail_work.Visible = false;
            }



            Hashtable htrushworkcorders = new Hashtable();
            System.Data.DataTable dtrushworkcorders = new System.Data.DataTable();
            if (User_Role_Id == "2" || User_Role_Id == "3" || User_Role_Id == "4")
            {
                htrushworkcorders.Add("@Trans", "RUSH_OVERDUE_ORDERS_WORK");
            }
            else if (User_Role_Id == "1" || User_Role_Id == "6" || User_Role_Id == "5")
            {
                htrushworkcorders.Add("@Trans", "RUSH_OVERDUE_ORDERS_WORK_ADMIN");
            }
            htrushworkcorders.Add("@User_Id", userid);
            htrushworkcorders.Add("@Sub_ProcessId", Subprocess_id);
            dtrushworkcorders = dataaccess.ExecuteSP("Sp_Order_Count", htrushworkcorders);
            if (dtrushworkcorders.Rows.Count > 0)
            {
                //div_Web_Work.Visible = true;
                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {
                        lbl_Rus_Order_Work_COunt.Text = "RUSH/DUE   " + "(" + dtrushworkcorders.Rows[0]["count"].ToString() + ")";
                    }));
                }
                else
                {
                    lbl_Rus_Order_Work_COunt.Text = "RUSH/DUE   " + "(" + dtrushworkcorders.Rows[0]["count"].ToString() + ")";

                }
                // lbl_Appstraction.Text = dtsearchqcorders.Rows[0]["count"].ToString();
            }


            Hashtable htOrder_Abstractor = new Hashtable();
            System.Data.DataTable dtOrder_Abstractor = new System.Data.DataTable();
            htOrder_Abstractor.Add("@Trans", "ABSTRACTOR_ORDERS_ALLOCATE");
            htOrder_Abstractor.Add("@Sub_ProcessId", Subprocess_id);
            dtOrder_Abstractor = dataaccess.ExecuteSP("Sp_Order_Count", htOrder_Abstractor);
            if (dtOrder_Abstractor.Rows.Count > 0)
            {
                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {
                        lbl_Appstraction.Text = "ABSTRACTOR " + "(" + dtOrder_Abstractor.Rows[0]["count"].ToString() + ")";

                    }));

                }
                else
                {

                    lbl_Appstraction.Text = "ABSTRACTOR " + "(" + dtOrder_Abstractor.Rows[0]["count"].ToString() + ")";
                }


            }
            //Order Uploaded
            //Hashtable htOrder_Uploaded = new Hashtable();
            //System.Data.DataTable dtOrder_Uploaded = new System.Data.DataTable();
            //htOrder_Uploaded.Add("@Trans", "UPLOAD_ORDERS_ALLOCATE");
            //htOrder_Uploaded.Add("@Sub_ProcessId", Subprocess_id);
            //dtOrder_Uploaded = dataaccess.ExecuteSP("Sp_Order_Count", htOrder_Uploaded);
            //if (dtOrder_Uploaded.Rows.Count > 0)
            //{
            //    //div_Qc_Allocated_Count.Visible = true;
            //    //if (User_Role_Id == "1")
            //    if (InvokeRequired)
            //    {

            //        this.Invoke(new MethodInvoker(delegate
            //        {
            //            lbl_Upload_Orders_Allocate_Count.Text = "UPLOAD" + "(" + dtOrder_Uploaded.Rows[0]["count"].ToString() + ")";
            //        }));
            //    }
            //    else
            //    {

            //    }

            //    //}
            //    //else if (User_Role_Id == "2")
            //    //{
            //    //    lbl_Upload_Orders_Allocate_Count.Text = "UPLOAD       " + "(" + dtOrder_Uploaded.Rows[0]["count"].ToString() + ")";
            //    //}


            //}
            //else
            //{

            //    //div_Qc_Allocated_Count.Visible = false;
            //}


            //Hashtable htqcWork = new Hashtable();
            //System.Data.DataTable dtqcwork = new System.Data.DataTable();

            //if (User_Role_Id == "2" || User_Role_Id == "3" || User_Role_Id == "4")
            //{
            //    htqcWork.Add("@Trans", "UPLOAD_ORDERS_WORK");
            //}
            //else if (User_Role_Id == "1" || User_Role_Id == "6" || User_Role_Id == "5")
            //{
            //    htqcWork.Add("@Trans", "UPLOAD_ORDERS_WORK_ADMIN");
            //}
            //htqcWork.Add("@User_Id", userid);
            //htqcWork.Add("@Sub_ProcessId", Subprocess_id);
            //dtqcwork = dataaccess.ExecuteSP("Sp_Order_Count", htqcWork);
            //if (dtqcwork.Rows.Count > 0)
            //{
            //    //div_Count_Qc_Que.Visible = true;
            //    //if (User_Role_Id == "1")
            //    //{
            //    if (InvokeRequired)
            //    {

            //        this.Invoke(new MethodInvoker(delegate
            //        {
            //            lbl_Upload_Order_Work_Count.Text = "UPLOAD" + "(" + dtqcwork.Rows[0]["count"].ToString() + ")";
            //        }));
            //    }
            //    else
            //    {

            //        lbl_Upload_Order_Work_Count.Text = "UPLOAD" + "(" + dtqcwork.Rows[0]["count"].ToString() + ")";
            //    }
            //    //}
            //    //else if (User_Role_Id == "2")
            //    //{
            //    //    lbl_Upload_Order_Work_Count.Text = "UPLOAD    " + "(" + dtqcwork.Rows[0]["count"].ToString() + ")";
            //    //}

            //}
            //else
            //{

            //    //div_Count_Qc_Que.Visible = false;
            //}







            //Hashtable htsearchPending = new Hashtable();
            //System.Data.DataTable dtsearchPending = new System.Data.DataTable();
            //htsearchPending.Add("@Trans", "ORDER_ALLOCATE_CLARIFICATION");
            //htsearchPending.Add("@User_Id", userid);
            //dtsearchPending = dataaccess.ExecuteSP("Sp_Order_Count", htsearchPending);
            //if (dtsearchPending.Rows.Count > 0)
            //{
            //    //div_Web_Work.Visible = true;
            //    //if (User_Role_Id == "1")
            //    //{
            //    if (InvokeRequired)
            //    {

            //        this.Invoke(new MethodInvoker(delegate
            //        {
            //            Lbl_Clarification_orders.Text = "CLARIFICATION " + "(" + dtsearchPending.Rows[0]["count"].ToString() + ")";
            //        }));
            //    }
            //    else
            //    {
            //        Lbl_Clarification_orders.Text = "CLARIFICATION " + "(" + dtsearchPending.Rows[0]["count"].ToString() + ")";

            //    }
            //    //}
            //    //else if (User_Role_Id == "2")
            //    //{
            //    //    Lbl_Clarification_orders.Text = "CLARIFICATION " + "(" + dtsearchPending.Rows[0]["count"].ToString() + ")";
            //    //}

            //}
            //else
            //{

            //    //  div_Web_Work.Visible = false;
            //}

            //Hashtable htsearchQcPending = new Hashtable();
            //System.Data.DataTable dtsearchQcPending = new System.Data.DataTable();
            //htsearchQcPending.Add("@Trans", "ORDER_ALLOCATE_HOLD");
            //htsearchQcPending.Add("@User_Id", userid);
            //dtsearchQcPending = dataaccess.ExecuteSP("Sp_Order_Count", htsearchQcPending);
            //if (dtsearchQcPending.Rows.Count > 0)
            //{
            //    ////div_Web_Work.Visible = true;
            //    //if (User_Role_Id == "1")
            //    //{

            //    if (InvokeRequired)
            //    {

            //        this.Invoke(new MethodInvoker(delegate
            //        {
            //            lbl_Hold.Text = "   HOLD      " + "(" + dtsearchQcPending.Rows[0]["count"].ToString() + ")";
            //        }));
            //    }
            //    else
            //    {
            //        lbl_Hold.Text = "   HOLD      " + "(" + dtsearchQcPending.Rows[0]["count"].ToString() + ")";

            //    }
            //    //}
            //    //else if (User_Role_Id == "2")
            //    //{
            //    //    lbl_Hold.Text = "   HOLD      " + "(" + dtsearchQcPending.Rows[0]["count"].ToString() + ")";
            //    //}


            //}
            //else
            //{

            //    //  div_Web_Work.Visible = false;
            //}


            //Hashtable htTypingPending = new Hashtable();
            //System.Data.DataTable dtTypingPending = new System.Data.DataTable();
            //htTypingPending.Add("@Trans", "ORDER_ALLOCATE_CANCELLED");
            //htTypingPending.Add("@User_Id", userid);
            //dtTypingPending = dataaccess.ExecuteSP("Sp_Order_Count", htTypingPending);
            //if (dtTypingPending.Rows.Count > 0)
            //{
            //    //div_Web_Work.Visible = true;
            //    //if (User_Role_Id == "1")
            //    //{

            //    if (InvokeRequired)
            //    {

            //        this.Invoke(new MethodInvoker(delegate
            //        {
            //            lbl_CANCELLED.Text = "CANCELLED " + "(" + dtTypingPending.Rows[0]["count"].ToString() + ")";
            //        }));
            //    }
            //    else
            //    {
            //        lbl_CANCELLED.Text = "CANCELLED " + "(" + dtTypingPending.Rows[0]["count"].ToString() + ")";
            //    }
            //    //}
            //    //else if (User_Role_Id == "2")
            //    //{
            //    //    lbl_CANCELLED.Text = "CANCELLED " + "(" + dtTypingPending.Rows[0]["count"].ToString() + ")";
            //    //}
            //}
            //else
            //{
            //    //  div_Web_Work.Visible = false;
            //}
            //Hashtable htTypingQcPending = new Hashtable();
            //System.Data.DataTable dtTypingQcPending = new System.Data.DataTable();
            //htTypingQcPending.Add("@Trans", "TYPING_QC_ORDERS_ALLOCATE_PENDING");
            //htTypingQcPending.Add("@User_Id", userid);
            //dtTypingQcPending = dataaccess.ExecuteSP("Sp_Order_Count", htTypingQcPending);
            //if (dtTypingQcPending.Rows.Count > 0)
            //{
            //    //div_Web_Work.Visible = true;
            //    //if (User_Role_Id == "1")
            //    //{
            //    //    lbl_Typing_Qc_Pending.Text = dtTypingQcPending.Rows[0]["count"].ToString();
            //    //}
            //    //else if (User_Role_Id == "2")
            //    //{
            //    //    lbl_Typing_Qc_Pending.Text = "0";
            //    //}

            //}
            //else
            //{
            //    //  div_Web_Work.Visible = false;
            //}
            //Hashtable htUploadingPending = new Hashtable();
            //System.Data.DataTable dtUploadingPending = new System.Data.DataTable();
            //htUploadingPending.Add("@Trans", "UPLOAD_ORDERS_ALLOCATE_PENDING");
            //htUploadingPending.Add("@User_Id", userid);
            //dtUploadingPending = dataaccess.ExecuteSP("Sp_Order_Count", htUploadingPending);
            //if (dtUploadingPending.Rows.Count > 0)
            //{
            //    //div_Web_Work.Visible = true;
            //    //if (User_Role_Id == "1")
            //    //{
            //    //    lbl_Pending_Upload_Allocate.Text = dtUploadingPending.Rows[0]["count"].ToString();
            //    //}
            //    //else if (User_Role_Id == "2")
            //    //{
            //    //    lbl_Pending_Upload_Allocate.Text = "0";
            //    //}


            //}
            //else
            //{
            //    //  div_Web_Work.Visible = false;
            //}

            Hashtable htReassign = new Hashtable();
            System.Data.DataTable dtReassign = new System.Data.DataTable();
            htReassign.Add("@Trans", "ORDER_ALLOCATE_REASSIGN");
            dtReassign = dataaccess.ExecuteSP("Sp_Order_Count", htReassign);
            if (dtReassign.Rows.Count > 0)
            {
                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {
                        lbl_Reassigned.Text = "REASSIGNED " + "(" + dtReassign.Rows[0]["count"].ToString() + ")";
                    }));
                }
                else
                {
                    lbl_Reassigned.Text = "REASSIGNED " + "(" + dtReassign.Rows[0]["count"].ToString() + ")";
                }



            }
            else
            {
                //  div_Web_Work.Visible = false;
            }



            Hashtable htRush = new Hashtable();
            System.Data.DataTable dtRush = new System.Data.DataTable();
            htRush.Add("@Trans", "RUSH_COUNT");
            dtRush = dataaccess.ExecuteSP("Sp_Order_Count", htRush);
            if (dtRush.Rows.Count > 0)
            {
                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {
                        lbl_Rus_Order_Count.Text = "RUSH " + "(" + dtRush.Rows[0]["RushCount"].ToString() + ")";
                    }));
                }
                else
                {
                    lbl_Rus_Order_Count.Text = "RUSH " + "(" + dtRush.Rows[0]["RushCount"].ToString() + ")";
                }




            }

            Hashtable htRus_Over_Due = new Hashtable();
            System.Data.DataTable dtRush_Over_Due = new System.Data.DataTable();
            htRus_Over_Due.Add("@Trans", "OVER_DUE_COUNT");
            dtRush_Over_Due = dataaccess.ExecuteSP("Sp_Order_Count", htRus_Over_Due);
            if (dtRush_Over_Due.Rows.Count > 0)
            {

                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {
                        lbl_Over_Due_Count.Text = "OVER DUE " + "(" + dtRush_Over_Due.Rows[0]["Over_Due_Count"].ToString() + ")";
                    }));
                }
                else
                {

                    lbl_Over_Due_Count.Text = "OVER DUE " + "(" + dtRush_Over_Due.Rows[0]["Over_Due_Count"].ToString() + ")";

                }



            }


            //Rework Orders


            Hashtable ht_ReWork_Orders = new Hashtable();
            System.Data.DataTable dtRe_Work_Orders = new System.Data.DataTable();
            if (User_Role_Id == "2")
            {
                ht_ReWork_Orders.Add("@Trans", "TOTAL_REWORK_ORDERS_FOR_USER");
            }
            else
            {
                ht_ReWork_Orders.Add("@Trans", "TOTAL_RE_WORK_ORDERS_FOR_ADMIN");
            }
            ht_ReWork_Orders.Add("@User_Id", userid);
            ht_ReWork_Orders.Add("@Sub_ProcessId", Subprocess_id);
            dtRe_Work_Orders = dataaccess.ExecuteSP("Sp_Order_Rework_Count", ht_ReWork_Orders);
            if (dtRe_Work_Orders.Rows.Count > 0)
            {
                //div_mail_work.Visible = true;
                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {
                        lbl_Rework_Count.Text = "REWORK  " + "(" + dtRe_Work_Orders.Rows[0]["count"].ToString() + ")";
                    }));
                }
                else
                {
                    lbl_Rework_Count.Text = "REWORK  " + "(" + dtRe_Work_Orders.Rows[0]["count"].ToString() + ")";
                }

            }
            else
            {

                //div_mail_work.Visible = false;
            }



            Hashtable ht_ReWork_Orders_Allocation = new Hashtable();
            System.Data.DataTable dtRe_Work_Orders_Allocation = new System.Data.DataTable();

            ht_ReWork_Orders_Allocation.Add("@Trans", "REWORK_TOTAL_ALLOCATE");
            dtRe_Work_Orders_Allocation = dataaccess.ExecuteSP("Sp_Order_Rework_Count", ht_ReWork_Orders_Allocation);
            if (dtRe_Work_Orders_Allocation.Rows.Count > 0)
            {
                //div_mail_work.Visible = true;
                //if (User_Role_Id == "1")
                //{
                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {
                        lbl_Rework_Allocation.Text = "REWORK  " + "(" + dtRe_Work_Orders_Allocation.Rows[0]["count"].ToString() + ")";

                    }));
                }
                else
                {

                    lbl_Rework_Allocation.Text = "REWORK  " + "(" + dtRe_Work_Orders_Allocation.Rows[0]["count"].ToString() + ")";
                }
                //}
                //else if (User_Role_Id == "2")
                //{


                //    lbl_Rework_Allocation.Text = "REWORK  " + "(" + dtRe_Work_Orders_Allocation.Rows[0]["count"].ToString() + ")";
                //}

            }
            else
            {

                //div_mail_work.Visible = false;
            }

            //Super Qc Orders

            Hashtable ht_superqcWork_Orders = new Hashtable();
            System.Data.DataTable dtsuperqc_Work_Orders = new System.Data.DataTable();
            if (User_Role_Id == "2")
            {
                ht_superqcWork_Orders.Add("@Trans", "TOTAL_REWORK_ORDERS_FOR_USER_COUNT");
            }
            else
            {
                ht_superqcWork_Orders.Add("@Trans", "TOTAL_SUPER_QC_ORDERS_FOR_ADMIN_COUNT");
            }
            ht_superqcWork_Orders.Add("@User_Id", userid);
            ht_superqcWork_Orders.Add("@Sub_ProcessId", Subprocess_id);
            dtsuperqc_Work_Orders = dataaccess.ExecuteSP("Sp_Order_SuperQc_Count", ht_superqcWork_Orders);
            if (dtsuperqc_Work_Orders.Rows.Count > 0)
            {
                //div_mail_work.Visible = true;
                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {
                        lbl_Exam_Qc.Text = "SUPER QC " + "(" + dtsuperqc_Work_Orders.Rows[0]["count"].ToString() + ")";
                    }));

                }
                else
                {

                    lbl_Exam_Qc.Text = "SUPER QC " + "(" + dtsuperqc_Work_Orders.Rows[0]["count"].ToString() + ")";
                }

            }
            else
            {

                //div_mail_work.Visible = false;
            }


            Hashtable hterro_Count = new Hashtable();
            System.Data.DataTable dterror_Count = new System.Data.DataTable();
            if (User_Role_Id == "2")
            {
                hterro_Count.Add("@Trans", "NEW_ERRORS_COUNT_FOR_USER_WISE");
            }
            else
            {
                hterro_Count.Add("@Trans", "NEW_ERRORS_COUNT_FOR_ADMIN_WISE");

            }

            hterro_Count.Add("@Error_On_User_Id", userid);
            dterror_Count = dataaccess.ExecuteSP("Sp_Error_Dashboard", hterro_Count);

            if (dterror_Count.Rows.Count > 0)
            {
                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {

                        btn_Errors.Text = "ERRORS  " + "(" + dterror_Count.Rows[0]["Error_Count"].ToString() + ")";
                    }));
                }
                else
                {

                    btn_Errors.Text = "ERRORS  " + "(" + dterror_Count.Rows[0]["Error_Count"].ToString() + ")";
                }
            }
            else
            {

                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {
                        btn_Errors.Text = "ERRORS  " + "(0)";
                    }));
                }
                else
                {
                    btn_Errors.Text = "ERRORS  " + "(0)";

                }
            }




            //Get_No_Of_Orders_ToDashboard();

            System.Windows.Forms.Application.DoEvents();
        }

        public void Get_Count_Of_Abstractor_Orders()
        {
            Hashtable htabstractor_Allocate = new Hashtable();
            System.Data.DataTable dtabstractor_Allocate = new System.Data.DataTable();

            htabstractor_Allocate.Add("@Trans", "COUNT_ABSTRACTOR_ALLOCATION_ORDER_QUE");
            dtabstractor_Allocate = dataaccess.ExecuteSP("Sp_Abstractor_Order_Count", htabstractor_Allocate);
            if (dtabstractor_Allocate.Rows.Count > 0)
            {
                //div_Web_Work.Visible = true;

                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {

                        lbl_Abstractor_Allocation_Que.Text = "ALLOCATION  " + "(" + dtabstractor_Allocate.Rows[0]["count"].ToString() + ")";
                        lbl_Appstraction.Text = "ABSTRACTOR  " + "(" + dtabstractor_Allocate.Rows[0]["count"].ToString() + ")";
                    }));

                }
                else
                {
                    lbl_Abstractor_Allocation_Que.Text = "ALLOCATION  " + "(" + dtabstractor_Allocate.Rows[0]["count"].ToString() + ")";
                    lbl_Appstraction.Text = "ABSTRACTOR  " + "(" + dtabstractor_Allocate.Rows[0]["count"].ToString() + ")";

                }
            }
            else
            {

                //  div_Web_Work.Visible = false;
            }

            Hashtable htabstractor_Processing = new Hashtable();
            System.Data.DataTable dtabstractor_Processing = new System.Data.DataTable();

            htabstractor_Processing.Add("@Trans", "COUNT_ABSTRACTOR_PROCESSING_QUE");
            dtabstractor_Processing = dataaccess.ExecuteSP("Sp_Abstractor_Order_Count", htabstractor_Processing);
            if (dtabstractor_Processing.Rows.Count > 0)
            {
                //div_Web_Work.Visible = true;
                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {

                        lbl_Abstarctor_Processing_Que.Text = "PROCESSING " + "(" + dtabstractor_Processing.Rows[0]["count"].ToString() + ")";
                        lbl_Oms_Abstractor_Processing_Que.Text = "ABSTRACTOR " + "(" + dtabstractor_Processing.Rows[0]["count"].ToString() + ")";
                    }));
                }
                else
                {
                    lbl_Abstarctor_Processing_Que.Text = "PROCESSING " + "(" + dtabstractor_Processing.Rows[0]["count"].ToString() + ")";
                    lbl_Oms_Abstractor_Processing_Que.Text = "ABSTRACTOR " + "(" + dtabstractor_Processing.Rows[0]["count"].ToString() + ")";
                }


            }
            else
            {

                //  div_Web_Work.Visible = false;
            }

            Hashtable htabstractor_Returned = new Hashtable();
            System.Data.DataTable dtabstractor_Returned = new System.Data.DataTable();

            htabstractor_Returned.Add("@Trans", "COUNT_ABSTRACTOR_RETURNED_QUE");
            dtabstractor_Returned = dataaccess.ExecuteSP("Sp_Abstractor_Order_Count", htabstractor_Returned);
            if (dtabstractor_Returned.Rows.Count > 0)
            {
                //div_Web_Work.Visible = true;
                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {
                        lbl_Abstractor_Returned_Que.Text = "RETURNED " + "(" + dtabstractor_Returned.Rows[0]["count"].ToString() + ")";
                    }));

                }
                else
                {

                    lbl_Abstractor_Returned_Que.Text = "RETURNED " + "(" + dtabstractor_Returned.Rows[0]["count"].ToString() + ")";
                }



            }
            else
            {

                //  div_Web_Work.Visible = false;
            }
            Hashtable htabstractor_Canceeled = new Hashtable();
            System.Data.DataTable dtabstractor_Cancelled = new System.Data.DataTable();

            htabstractor_Canceeled.Add("@Trans", "COUNT_ABSTRACTOR_CANCELLED_QUE");
            dtabstractor_Cancelled = dataaccess.ExecuteSP("Sp_Abstractor_Order_Count", htabstractor_Canceeled);
            if (dtabstractor_Cancelled.Rows.Count > 0)
            {
                //div_Web_Work.Visible = true;
                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {
                        lbl_Abstractor_Cancelled_Que.Text = "CANCELLED " + "(" + dtabstractor_Cancelled.Rows[0]["count"].ToString() + ")";
                    }));
                }
                else
                {

                    lbl_Abstractor_Returned_Que.Text = "RETURNED " + "(" + dtabstractor_Returned.Rows[0]["count"].ToString() + ")";
                }




            }
            else
            {

                //  div_Web_Work.Visible = false;
            }
        }

        public void Get_Count_Of_Vendor_Orders()
        {

            Hashtable htvendWaitin = new Hashtable();
            System.Data.DataTable dtvenwaiting = new System.Data.DataTable();
            htvendWaitin.Add("@Trans", "COUNT_NO_OF_ORDER_WATING_FOR_ACCEPTANCE_ADMIN");
            dtvenwaiting = dataaccess.ExecuteSP("Sp_Vendor_Order_Count", htvendWaitin);
            if (dtvenwaiting.Rows.Count > 0)
            {
                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {

                        lbl_Vendor_Waiting_for_Acceptance.Text = "WAITING FOR ACCEPT  " + "(" + dtvenwaiting.Rows[0]["count"].ToString() + ")";
                    }));
                }
                else
                {

                    lbl_Vendor_Waiting_for_Acceptance.Text = "WAITING FOR ACCEPT  " + "(" + dtvenwaiting.Rows[0]["count"].ToString() + ")";
                }

            }

            Hashtable htvendprocess = new Hashtable();
            System.Data.DataTable dtvenprocess = new System.Data.DataTable();
            htvendprocess.Add("@Trans", "COUNT_NO_OF_ORDERS_PROCESSING_FOR_ADMIN");
            dtvenprocess = dataaccess.ExecuteSP("Sp_Vendor_Order_Count", htvendprocess);
            if (dtvenprocess.Rows.Count > 0)
            {
                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {

                        lbl_Vendor_Processing.Text = "PROCESSING " + "(" + dtvenprocess.Rows[0]["count"].ToString() + ")";
                    }));
                }
                else
                {
                    lbl_Vendor_Processing.Text = "PROCESSING " + "(" + dtvenprocess.Rows[0]["count"].ToString() + ")";

                }

            }

            Hashtable htvendreturned = new Hashtable();
            System.Data.DataTable dtvenreturned = new System.Data.DataTable();
            htvendreturned.Add("@Trans", "COUNT_NO_OF_ORDERS_RETUERNED_FOR_ADMIN");
            dtvenreturned = dataaccess.ExecuteSP("Sp_Vendor_Order_Count", htvendreturned);
            if (dtvenreturned.Rows.Count > 0)
            {
                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {
                        lbl_Vendor_Returned.Text = "RETURNED " + "(" + dtvenreturned.Rows[0]["count"].ToString() + ")";

                    }));
                }
                else
                {

                    lbl_Vendor_Returned.Text = "RETURNED " + "(" + dtvenreturned.Rows[0]["count"].ToString() + ")";
                }

            }

            Hashtable htvendRejected = new Hashtable();
            System.Data.DataTable dtvenrejected = new System.Data.DataTable();
            htvendRejected.Add("@Trans", "COUNT_NO_OF_ORDERS_REJECTED_FOR_ADMIN");
            dtvenrejected = dataaccess.ExecuteSP("Sp_Vendor_Order_Count", htvendRejected);
            if (dtvenrejected.Rows.Count > 0)
            {
                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {
                        lbl_Vendor_Rejected.Text = "REJECTED " + "(" + dtvenrejected.Rows[0]["count"].ToString() + ")";
                    }));
                }
                else
                {

                    lbl_Vendor_Rejected.Text = "REJECTED " + "(" + dtvenrejected.Rows[0]["count"].ToString() + ")";
                }
            }
        }

        public void Get_Count_Of_Tax_Orders()
        {

            Hashtable htTaxProcessing = new Hashtable();
            System.Data.DataTable dtTaxProcessing = new System.Data.DataTable();
            htTaxProcessing.Add("@Trans", "NO_INHOUSE_TAX_ORDERS_PROCESSING");
            dtTaxProcessing = dataaccess.ExecuteSP("Sp_Tax_Orders", htTaxProcessing);
            if (dtTaxProcessing.Rows.Count > 0)
            {
                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {

                        lbl_Tax_Processing_Count.Text = "PROCESSING  " + "(" + dtTaxProcessing.Rows[0]["Tax_Request_Count"].ToString() + ")";
                    }));
                }
                else
                {
                    lbl_Tax_Processing_Count.Text = "PROCESSING  " + "(" + dtTaxProcessing.Rows[0]["Tax_Request_Count"].ToString() + ")";
                }

            }

            Hashtable htTax_Internal_Comleted_ForAlliocation = new Hashtable();
            System.Data.DataTable dtTax_Internal_Comleted_ForAlliocation = new System.Data.DataTable();
            htTax_Internal_Comleted_ForAlliocation.Add("@Trans", "NO_INHOUSE_TAX_ORDERS_COMPLETED_FOR_NEW_ASSIGN");
            dtTax_Internal_Comleted_ForAlliocation = dataaccess.ExecuteSP("Sp_Tax_Orders", htTax_Internal_Comleted_ForAlliocation);
            if (dtTax_Internal_Comleted_ForAlliocation.Rows.Count > 0)
            {
                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {

                        btn_Internal_Tax_Allocation.Text = "TAX  " + "(" + dtTax_Internal_Comleted_ForAlliocation.Rows[0]["Tax_Request_Count"].ToString() + ")";
                    }));
                }
                else
                {
                    btn_Internal_Tax_Allocation.Text = "TAX  " + "(" + dtTax_Internal_Comleted_ForAlliocation.Rows[0]["Tax_Request_Count"].ToString() + ")";
                }

            }

            //Hashtable htTaxreturned = new Hashtable();
            //System.Data.DataTable dtTaxreturned = new System.Data.DataTable();
            //htTaxreturned.Add("@Trans", "NO_INHOUSE_TAX_ORDERS_COMPLETED");
            //dtTaxreturned = dataaccess.ExecuteSP("Sp_Tax_Orders", htTaxreturned);
            //if (dtTaxreturned.Rows.Count > 0)
            //{

            //    lbl_Tax_Returned.Text = "RETURNED " + "(" + dtTaxreturned.Rows[0]["Tax_Request_Count"].ToString() + ")";

            //}


            Hashtable htTaxCancelled = new Hashtable();
            System.Data.DataTable dtTaxCancelled = new System.Data.DataTable();
            htTaxCancelled.Add("@Trans", "NO_INHOUSE_TAX_ORDERS_CANCELLED");
            dtTaxCancelled = dataaccess.ExecuteSP("Sp_Tax_Orders", htTaxCancelled);
            if (dtTaxCancelled.Rows.Count > 0)
            {
                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {

                        lbl_Tax_Cancelled.Text = "CANCELLED " + "(" + dtTaxCancelled.Rows[0]["Tax_Request_Count"].ToString() + ")";
                    }));
                }
                else
                {
                    lbl_Tax_Cancelled.Text = "CANCELLED " + "(" + dtTaxCancelled.Rows[0]["Tax_Request_Count"].ToString() + ")";
                }

            }

            Hashtable htTaxPending = new Hashtable();
            System.Data.DataTable dtTaxPending = new System.Data.DataTable();
            htTaxPending.Add("@Trans", "NO_INHOUSE_TAX_ORDERS_PENDING_HOLD");
            dtTaxPending = dataaccess.ExecuteSP("Sp_Tax_Orders", htTaxPending);
            if (dtTaxPending.Rows.Count > 0)
            {
                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {

                        lbl_tax_Hold.Text = "HOLD " + "(" + dtTaxPending.Rows[0]["Tax_Request_Count"].ToString() + ")";
                    }));
                }
                else
                {
                    lbl_tax_Hold.Text = "HOLD " + "(" + dtTaxPending.Rows[0]["Tax_Request_Count"].ToString() + ")";

                }

            }
        }

        private void Bind_Auto_Allocation_Users_List()
        {

            Hashtable htclient = new Hashtable();
            System.Data.DataTable dtclient = new System.Data.DataTable();

            htclient.Add("@Trans", "SELECT_USER_OF_AUTO_ALOCATION");
            dtclient = dataaccess.ExecuteSP("Sp_Auto_Allocation_User_Profile", htclient);

            if (InvokeRequired)
            {

                this.Invoke(new MethodInvoker(delegate
                {
                    if (dtclient.Rows.Count > 0)
                    {

                        grid_User.Rows.Clear();
                        for (int i = 0; i < dtclient.Rows.Count; i++)
                        {
                            grid_User.Rows.Add();
                            grid_User.Rows[i].Cells[0].Value = dtclient.Rows[i]["Production_Set"].ToString();
                            grid_User.Rows[i].Cells[1].Value = dtclient.Rows[i]["User_Name"].ToString();
                            grid_User.Rows[i].Cells[2].Value = dtclient.Rows[i]["User_id"].ToString();
                            grid_User.Rows[i].Cells[3].Value = dtclient.Rows[i]["diff"].ToString();


                        }
                        grid_User.FirstDisplayedScrollingRowIndex = Auto_Allocation_Scrol_Postion;

                    }
                    else
                    {

                        grid_User.Rows.Clear();
                        grid_User.DataSource = null;

                    }
                }));
            }
            else
            {

                if (dtclient.Rows.Count > 0)
                {

                    grid_User.Rows.Clear();
                    for (int i = 0; i < dtclient.Rows.Count; i++)
                    {
                        grid_User.Rows.Add();
                        grid_User.Rows[i].Cells[0].Value = dtclient.Rows[i]["Production_Set"].ToString();
                        grid_User.Rows[i].Cells[1].Value = dtclient.Rows[i]["User_Name"].ToString();
                        grid_User.Rows[i].Cells[2].Value = dtclient.Rows[i]["User_id"].ToString();
                        grid_User.Rows[i].Cells[3].Value = dtclient.Rows[i]["diff"].ToString();


                    }
                    grid_User.FirstDisplayedScrollingRowIndex = Auto_Allocation_Scrol_Postion;

                }
                else
                {

                    grid_User.Rows.Clear();
                    grid_User.DataSource = null;

                }
            }




        }

        private void groupBox2_Enter(object sender, EventArgs e)
        {

        }


        private void lb_Search_Order_ALlocate_count_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);
            try
            {
                //   Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Order_Allocate("SEARCH_ORDER_ALLOCATE", 2, userid, User_Role_Id)); });
                //   t.SetApartmentState(ApartmentState.STA);
                //   t.Start();
                Ordermanagement_01.Order_Allocate Orderallocate = new Order_Allocate("SEARCH_ORDER_ALLOCATE", 2, userid, User_Role_Id, Production_Date);
                Orderallocate.Show();
            }
            catch (Exception ex)

            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }


        }

        private void Refresh_Dashcount()
        {
            //if (InvokeRequired)
            //{


            if (InvokeRequired)
            {

                this.Invoke(new MethodInvoker(delegate
                {
                    alertControl1.Show(this, "Dashboard", "Refreshing.....", "", null, "Dashboard");
                }
                ));
            }
            else
            {


            }
            if (User_Role_Id == "1" || User_Role_Id == "6")
            {
                Bind_Over_Daily_WiseCount();

            }


            if (User_Role_Id == "1" || User_Role_Id == "6" || User_Role_Id == "5")
            {

                Get_Count_Of_Abstractor_Orders();
            }

            Get_Count_Of_Orders();



            if (User_Role_Id == "1" || User_Role_Id == "6" || User_Role_Id == "5" || User_Role_Id == "4" || User_Role_Id == "3")
            {
                Get_Count_Of_Tax_Orders();

            }

            Populate_Production_Date();
            //  Employee_Wise_Effeciency();
            //  Employee_New_effeciency();


            Employee_New_Update_effeciency();
            Update_User_Last_Login_Date();
            if (User_Role_Id != "2")
            {
                Bind_Auto_Allocation_Users_List();
                Get_Count_Of_Vendor_Orders();
            }

            // }
        }

        private void Refresh_Dashcount1()
        {
            //if (InvokeRequired)
            //{


            if (InvokeRequired)
            {

                this.Invoke(new MethodInvoker(delegate
                {
                    alertControl1.Show(this, "Dashboard", "Refreshing.....", "", null, "Dashboard");
                }
                ));
            }
            else
            {


            }
            if (User_Role_Id == "1" || User_Role_Id == "6")
            {
                Bind_Over_Daily_WiseCount();

            }


            if (User_Role_Id == "1" || User_Role_Id == "6" || User_Role_Id == "5")
            {

                Get_Count_Of_Abstractor_Orders();
            }

            Get_Count_Of_Orders();



            if (User_Role_Id == "1" || User_Role_Id == "6" || User_Role_Id == "5" || User_Role_Id == "4" || User_Role_Id == "3")
            {
                Get_Count_Of_Tax_Orders();

            }

            Populate_Production_Date();
            //  Employee_Wise_Effeciency();
            //  Employee_New_effeciency();


            Employee_New_Update_effeciency();
            Update_User_Last_Login_Date();
            if (User_Role_Id != "2")
            {
                Bind_Auto_Allocation_Users_List();
                Get_Count_Of_Vendor_Orders();
            }

            // }
        }

        private void Update_User_Last_Login_Date()
        {

            Hashtable htupdate_time = new Hashtable();
            System.Data.DataTable dtupdate_Time = new System.Data.DataTable();

            htupdate_time.Add("@Trans", "UPDATE_LAST_LOGIN_DATE");
            htupdate_time.Add("@User_id", userid);
            dtupdate_Time = dataaccess.ExecuteSP("Sp_User", htupdate_time);



        }

        private void lbl_search_Qc_Allocate_Count_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);
            try
            {

                Ordermanagement_01.Order_Allocate Orderallocate = new Order_Allocate("SEARCH_QC_ORDER_ALLOCATE", 3, userid, User_Role_Id, Production_Date);
                Orderallocate.Show();

            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Order_Allocate("SEARCH_QC_ORDER_ALLOCATE", 3, userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start();   
        }

        private void lbl_typing_Allocate_Count_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);
            try
            {
                Ordermanagement_01.Order_Allocate Orderallocate = new Order_Allocate("SEARCH_TYPING_ORDER_ALLOCATE", 4, userid, User_Role_Id, Production_Date);
                Orderallocate.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }

            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Order_Allocate("SEARCH_TYPING_ORDER_ALLOCATE", 4, userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 
        }

        private void lbl_Typing_Allocate_Qc_Count_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);
            try
            {
                Ordermanagement_01.Order_Allocate Orderallocate = new Order_Allocate("TYPING_QC_ORDERS_ALLOCATE", 7, userid, User_Role_Id, Production_Date);
                Orderallocate.Show();

            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }

            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Order_Allocate("TYPING_QC_ORDERS_ALLOCATE", 7, userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 
        }

        private void lbl_Upload_Orders_Allocate_Count_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);
            try
            {
                Ordermanagement_01.Order_Allocate Orderallocate = new Order_Allocate("UPLOAD_ORDERS_ALLOCATE", 12, userid, User_Role_Id, Production_Date);
                Orderallocate.Show();

            }


            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Order_Allocate("UPLOAD_ORDERS_ALLOCATE", 12, userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 
        }

        private void lbl_Search_Work_Orders_Count_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);

            try
            {

                Ordermanagement_01.Employee_View Emp_view = new Ordermanagement_01.Employee_View(2, "Search", userid, User_Role_Id, "Live", 1);
                Emp_view.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }

        }

        private void lbl_Search_orders_Qc_Count_Click(object sender, EventArgs e)
        {

            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);

            try
            {

                Ordermanagement_01.Employee_View Emp_view = new Ordermanagement_01.Employee_View(3, "Search_Qc", userid, User_Role_Id, "Live", 1);
                Emp_view.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }



        }

        private void lbl_Typing_work_Count_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);

            try
            {


                Ordermanagement_01.Employee_View Emp_view = new Ordermanagement_01.Employee_View(4, "Type", userid, User_Role_Id, "Live", 1);
                Emp_view.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
        }

        private void lbl_Typing_Qc_Orders_Work_Count_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);

            try
            {

                Ordermanagement_01.Employee_View Emp_view = new Ordermanagement_01.Employee_View(7, "Typing_Qc", userid, User_Role_Id, "Live", 1);
                Emp_view.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
        }

        private void lbl_Upload_Order_Work_Count_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);

            try
            {

                Ordermanagement_01.Employee_View Emp_view = new Ordermanagement_01.Employee_View(12, "Upload_ORDERS_ALLOCATE", userid, User_Role_Id, "Live", 1);
                Emp_view.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }

        }

        private void lbl_Appstraction_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);

            try
            {

                Ordermanagement_01.Abstractor_View Abs_view = new Ordermanagement_01.Abstractor_View(2, "Abstract_ORDERS_ALLOCATE", userid, User_Role_Id);
                Abs_view.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }

            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Abstractor_View(2, "Abstract_ORDERS_ALLOCATE", userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 

        }


        private void ToolStripButton10_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Orders_Queue OrderQueue = new Ordermanagement_01.Orders_Queue(userid, User_Role_Id, Production_Date);
            OrderQueue.Show();


            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Orders_Queue(userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 
        }

        private void ToolStripButton11_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Order_Entry OrderEntry = new Ordermanagement_01.Order_Entry(0, userid, User_Role_Id, Production_Date);
            OrderEntry.Show();
        }

        private void toolStripButton1_Click(object sender, EventArgs e)
        {
            //Ordermanagement_01.Import_Orders ImportOrders = new Ordermanagement_01.Import_Orders(userid);
            //ImportOrders.Show();


            Ordermanagement_01.Import_Orders_New ImportOrders = new Ordermanagement_01.Import_Orders_New(userid);
            ImportOrders.Show();

        }

        private void ToolStripButton12_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Users.User_Profile UserProfile = new Ordermanagement_01.Users.User_Profile(userid);
            UserProfile.Show();
        }

        private void ToolStripButton14_Click(object sender, EventArgs e)
        {
            //Ordermanagement_01.Reports.Reports_Master ReportsMaster = new Ordermanagement_01.Reports.Reports_Master(userid, User_Role_Id);
            //ReportsMaster.Show();


            Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Reports.Reports_Master(userid, User_Role_Id, Production_Date)); });
            t.SetApartmentState(ApartmentState.STA);
            t.Start();
        }

        private void Lbl_Clarification_orders_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            Ordermanagement_01.Order_Allocate Orderallocate = new Order_Allocate("CLARIFICATION_ORDER_ALLOCATE_PENDING", 2, userid, User_Role_Id, Production_Date);
            Orderallocate.Show();


            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Order_Allocate("CLARIFICATION_ORDER_ALLOCATE_PENDING", 2, userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 

        }

        private void lbl_Hold_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            Ordermanagement_01.Order_Allocate Orderallocate = new Order_Allocate("HOLD_ORDER_ALLOCATE_PENDING", 2, userid, User_Role_Id, Production_Date);
            Orderallocate.Show();

            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Order_Allocate("HOLD_ORDER_ALLOCATE_PENDING", 2, userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 
        }

        private void lbl_CANCELLED_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            Ordermanagement_01.Order_Allocate Orderallocate = new Order_Allocate("CANCELLED_ORDER_ALLOCATE_PENDING", 2, userid, User_Role_Id, Production_Date);
            Orderallocate.Show();


            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Order_Allocate("CANCELLED_ORDER_ALLOCATE_PENDING", 2, userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 
        }

        private void ToolStripButton15_Click(object sender, EventArgs e)
        {
            Hashtable htupdate = new Hashtable();
            System.Data.DataTable dtupdate = new System.Data.DataTable();
            htupdate.Add("@Path", @"D:\Saravanan\BackupSqlfile\OMS ");
            dtupdate = dataaccess.ExecuteSP("sp_OMS_BackUp", htupdate);

        }

        private void FrimMasterToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(1) != false)
            {

                Ordermanagement_01.Create_Company Orderallocate = new Create_Company(userid, lbl_username.Text);
                Orderallocate.Show();
            }
        }

        private void BranchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(2) != false)
            {
                Ordermanagement_01.Create_Branch Orderallocate = new Create_Branch(userid, lbl_username.Text);
                Orderallocate.Show();
            }
        }

        private void ClientToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(3) != false)
            {
                Ordermanagement_01.Create_Client Orderallocate = new Create_Client(userid, lbl_username.Text);
                Orderallocate.Show();
            }
        }

        private void SubClientToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(4) != false)
            {
                Ordermanagement_01.Create_SubProcess Orderallocate = new Create_SubProcess(userid, lbl_username.Text);
                Orderallocate.Show();
            }
        }

        private void OrderTypeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(6) != false)
            {
                Ordermanagement_01.Create_Order_Type Orderallocate = new Create_Order_Type(userid, lbl_username.Text);
                Orderallocate.Show();
            }
        }

        private void OrderStatusToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(7) != false)
            {
                Ordermanagement_01.Create_Order_Status Orderallocate = new Create_Order_Status(userid, lbl_username.Text);
                Orderallocate.Show();
            }
        }

        private void countyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(8) != false)
            {
                Ordermanagement_01.Masters.Create_County cr = new Masters.Create_County(userid);
                cr.Show();
            }
        }

        private void btn_reallocate_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Order_Reallocate Orderallocate = new Order_Reallocate(userid, User_Role_Id, Production_Date);
            Orderallocate.Show();

            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Order_Reallocate(userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 
        }

        private void mnuReportExplorer_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Reports.Reports_Master ReportMaster = new Ordermanagement_01.Reports.Reports_Master(userid, User_Role_Id, Production_Date);
            ReportMaster.Show();

            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Reports.Reports_Master(userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 
        }

        private void deedToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Deed.Deed Deed = new Ordermanagement_01.Deed.Deed(userid);
            Deed.Show();
        }

        private void markerMakerToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            //Ordermanagement_01.MarkerMaker.MarkerMaker Markermaker =new Ordermanagement_01.MarkerMaker.MarkerMaker();
            //Markermaker.Show();
        }

        private void ToolStripButton17_Click_1(object sender, EventArgs e)
        {
            System.Data.DataTable dt_Employee_Status = new System.Data.DataTable();
            Hashtable ht_Employee_Status = new Hashtable();
            ht_Employee_Status.Add("@Trans", "Log_In_Present");
            ht_Employee_Status.Add("@Presents", "False");
            ht_Employee_Status.Add("@Employee_Id", userid);
            dt_Employee_Status = dataaccess.ExecuteSP("Sp_Employee_Status", ht_Employee_Status);
            this.Close();
        }

        private void lnk_TimeZone_Click(object sender, EventArgs e)
        {

        }

        private void groupBox3_Enter(object sender, EventArgs e)
        {

        }

        protected void Bind_Over_Daily_WiseCount()
        {

            //Order Count Information
            Hashtable htorder = new Hashtable();
            htorder.Add("@Trans", "GET_RECIVED_COMPLETED");
            System.Data.DataTable dtorder = new System.Data.DataTable();
            dtorder = dataaccess.ExecuteSP("Sp_Order_Target_Info", htorder);
            if (dtorder.Rows.Count > 0)
            {




                if (InvokeRequired)
                {

                    this.Invoke(new MethodInvoker(delegate
                    {
                        lnk_Target_Recived.Text = dtorder.Rows[0]["RECIVED"].ToString();
                        lnk_Completed.Text = dtorder.Rows[0]["COMPLETED"].ToString();

                    }));
                }
                else
                {
                    // Your code here, like set text box content or get text box contents etc..
                    // SAME CODE AS ABOVE

                    lnk_Target_Recived.Text = dtorder.Rows[0]["RECIVED"].ToString();
                    lnk_Completed.Text = dtorder.Rows[0]["COMPLETED"].ToString();

                }
            }


        }

        protected void lnk_Target_Pending_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            // clsLoader.startProgress();
            OrderViewType = "ORDER_COUNT";
            Order_Target = "TOTAL_PENDING";
            header_Pending = "PENDING ORDERS";
            // tot_orderinfo = "TOTAL ORDERS";
            TAT = "PENDING ORDERS";
            Order_Target = "TOTAL_PENDING";
            Time_Zone = Time_Zone.ToString();
            Time_Zone = Time_Zone.ToString();
            Get_Target_Orders_To_GridviewBind();
            // clsLoader.stopProgress();
        }

        protected void lnk_Target_Recived_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            //clsLoader.startProgress();
            OrderViewType = "ORDER_COUNT";
            Order_Target = "RECIVED";
            Order_Target = "RECIVED";
            header_Pending = "RECEIVED ORDERS";
            TAT = "RECEIVED ORDERS";
            //  tot_orderinfo = "TOTAL RECEIVED ORDERS";

            Get_Target_Orders_To_GridviewBind();
            // clsLoader.stopProgress();
        }

        protected void lnk_Completed_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            // clsLoader.startProgress();
            OrderViewType = "ORDER_COUNT";
            Order_Target = "COMPLETED";
            Order_Target = "COMPLETED";
            header_Pending = "COMPLETED ORDERS";
            TAT = "COMPLETED ORDERS";
            //  tot_orderinfo = "TOTAL COMPLETED ORDERS";
            //Time_Zone = Time_Zone.ToString();
            //Time_Zone = Time_Zone.ToString();
            Get_Target_Orders_To_GridviewBind();
            //clsLoader.stopProgress();
        }

        protected void lnk_Work_Progress_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            //clsLoader.startProgress();
            OrderViewType = "ORDER_COUNT";
            Order_Target = "WORK_IN_PROGRESS";
            header_Pending = "WORK PROGRESSING ORDERS";
            TAT = "WORK PROGRESSING ORDERS";
            //  tot_orderinfo="

            Get_Target_Orders_To_GridviewBind();
            // clsLoader.stopProgress();

        }

        protected void lnk_Hold_Clarification_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            //clsLoader.startProgress();

            OrderViewType = "ORDER_COUNT";
            //   lbl_AdminHeder.Text = "HOLD/CLARIFICATION ORDERS";
            Order_Target = "HOLD_CLARIFICATION";
            header_Pending = "HOLD/CLARIFICATION ORDERS";
            TAT = "HOLD/CLARIFICATION ORDERS";

            Get_Target_Orders_To_GridviewBind();
            //clsLoader.stopProgress();
        }

        protected void lnk_Canceled_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            //clsLoader.startProgress();
            OrderViewType = "ORDER_COUNT";
            //   lbl_AdminHeder.Text = "CANCELLED ORDERS";
            Order_Target = "CANCELLED";
            header_Pending = "CANCELLED ORDERS";
            TAT = "CANCELLED ORDERS";

            Get_Target_Orders_To_GridviewBind();
            //clsLoader.stopProgress();
        }

        protected void lnk_OPEN_Orders_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            //clsLoader.startProgress();

            OrderViewType = "OPEN_ORDERS";

            Order_Target = "OPEN_ORDERS";
            header_Pending = "OPENED ORDERS";
            TAT = "OPENED ORDERS";

            Get_Target_Orders_To_GridviewBind();
            //clsLoader.stopProgress();
        }

        protected void lnk_Not_Assigned_Orders_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            //clsLoader.startProgress();
            OrderViewType = "NOT_ASSIGNED_ORDERS";
            //  lbl_AdminHeder.Text = "NOT_ASSIGNED_ORDERS";
            Order_Target = "NOT_ASSIGNED_ORDERS";
            header_Pending = "NOT ASSIGNED ORDERS";
            TAT = "NOT ASSIGNED ORDERS";
            Get_Target_Orders_To_GridviewBind();
            //clsLoader.stopProgress();
        }

        protected void Bind_Employee_Wise_Target_Count_Of_Orders()
        {


            Hashtable httargetorder = new Hashtable();
            System.Data.DataTable dttargetorder = new System.Data.DataTable();
            httargetorder.Add("@Trans", "GET_COUNT_OF_ORDERS_EST_TIME_ZONE");
            dttargetorder = dataaccess.ExecuteSP("Sp_Order_Employee_Target_Info", httargetorder);
            if (dttargetorder.Rows.Count > 0)
            {

                btn_Employee_Green.Text = dttargetorder.Rows[0]["GREEN_ORDERS"].ToString();
                btn_Employee_Yellow.Text = dttargetorder.Rows[0]["YELLOW_ORDERS"].ToString();
                btn_Employee_Red.Text = dttargetorder.Rows[0]["RED_ORDERS"].ToString();


            }


        }

        protected void Get_Target_Orders_To_GridviewBind()
        {
            Ordermanagement_01.TargetDashboard TargeDashboard = new Ordermanagement_01.TargetDashboard(Order_Target, "Eastern(EST)", OrderViewType, 0, userid, TAT, score_board, header_Pending, dateTimePicker1.Text, userid, User_Role_Id, "Current");
            TargeDashboard.Show();
            TargeDashboard.Focus();

        }

        protected void Get_Target_Orders_Client_WiseTo_GridviewBind()
        {

            Ordermanagement_01.TargetDashboard TargeDashboard = new Ordermanagement_01.TargetDashboard(Order_Target, "Eastern(EST)", OrderViewType, 1, userid, TAT, score_board, header_Pending, dateTimePicker1.Text, userid, User_Role_Id, "Current");
            TargeDashboard.Show();
            TargeDashboard.Focus();
        }

        protected void Bind_Client_Wise_Target_Count_Of_Orders()
        {


            Hashtable httargetorder = new Hashtable();
            System.Data.DataTable dttargetorder = new System.Data.DataTable();
            httargetorder.Add("@Trans", "GET_COUNT_OF_ORDERS_EST_TIME_ZONE");
            dttargetorder = dataaccess.ExecuteSP("Sp_Order_Client_Target_Info", httargetorder);
            if (dttargetorder.Rows.Count > 0)
            {

                btn_Client_Green.Text = dttargetorder.Rows[0]["GREEN_ORDERS"].ToString();
                btn_Client_Yellow.Text = dttargetorder.Rows[0]["YELLOW_ORDERS"].ToString();
                btn_Client_Red.Text = dttargetorder.Rows[0]["RED_ORDERS"].ToString();


            }


        }

        private void btn_Client_Green_Click(object sender, EventArgs e)
        {
            OrderViewType = "TAT-C";
            TAT = "CLIENT TAT";
            //lbl_AdminHeder.Text = "TOTAL GREEN(>0 and <=66%) ORDERS";
            Order_Target = "GREEN_ORDERS";
            Order_Target = "GREEN_ORDERS";

            Get_Target_Orders_Client_WiseTo_GridviewBind();
        }

        private void btn_Client_Yellow_Click(object sender, EventArgs e)
        {
            OrderViewType = "TAT-C";
            TAT = "CLIENT TAT";
            // lbl_AdminHeder.Text = "TOTAL YELLOW(>66% and <99.99%) ORDERS";
            Order_Target = "YELLOW_ORDERS";
            Order_Target = "YELLOW_ORDERS";
            //  Time_Zone = ViewState["Time_Zone"].ToString();
            Get_Target_Orders_Client_WiseTo_GridviewBind();
        }

        private void btn_Client_Red_Click(object sender, EventArgs e)
        {
            OrderViewType = "TAT-C";
            TAT = "CLIENT TAT";
            //  lbl_AdminHeder.Text = "TOTAL RED(>=100%) ORDERS";
            Order_Target = "RED_ORDERS";
            Order_Target = "RED_ORDERS";
            //  Time_Zone = ViewState["Time_Zone"].ToString();
            Get_Target_Orders_Client_WiseTo_GridviewBind();
        }

        private void btn_Employee_Green_Click(object sender, EventArgs e)
        {
            OrderViewType = "TAT-E";
            TAT = "EMPLOYEE TAT";
            // lbl_AdminHeder.Text = "TOTAL GREEN(>0 and <=66%) ORDERS";
            Order_Target = "GREEN_ORDERS";
            Order_Target = "GREEN_ORDERS";
            // Time_Zone = ViewState["Time_Zone"].ToString();
            Get_Target_Orders_Client_WiseTo_GridviewBind();
        }

        private void btn_Employee_Yellow_Click(object sender, EventArgs e)
        {
            OrderViewType = "TAT-E";
            TAT = "EMPLOYEE TAT";
            // lbl_AdminHeder.Text = "TOTAL YELLOW(>66% and <99.99%) ORDERS";
            Order_Target = "YELLOW_ORDERS";
            Order_Target = "YELLOW_ORDERS";
            //Time_Zone = ViewState["Time_Zone"].ToString();
            Get_Target_Orders_Client_WiseTo_GridviewBind();
        }

        private void btn_Employee_Red_Click(object sender, EventArgs e)
        {

            OrderViewType = "TAT-E";
            TAT = "EMPLOYEE TAT";
            // lbl_AdminHeder.Text = "TOTAL RED(>=100%) ORDERS";
            Order_Target = "RED_ORDERS";
            Order_Target = "RED_ORDERS";
            //  Time_Zone = ViewState["Time_Zone"].ToString();
            Get_Target_Orders_Client_WiseTo_GridviewBind();
        }

        private void EmployeeStatusToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(23) != false)
            {
                Ordermanagement_01.Matrix.Employee_Status EmployeeStatus = new Ordermanagement_01.Matrix.Employee_Status(User_Role_Id);
                EmployeeStatus.Show();
            }
        }

        private void UserToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(31) != false)
            {
                //Ordermanagement_01.Create_User Create_User = new Create_User(userid, 1, lbl_username.Text.ToString());
                Ordermanagement_01.Users.Create_User_New Create_User = new Ordermanagement_01.Users.Create_User_New(userid, 1, lbl_username.Text.ToString(), int.Parse(User_Role_Id.ToString()));
                Create_User.Show();
            }

        }

        private void ThemesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(32) != false)
            {

                Ordermanagement_01.Create_UserRole User_Role = new Create_UserRole(userid, lbl_username.Text);
                User_Role.Show();
            }
        }

        private void Score_Board()
        {


            DateTime d1 = DateTime.Now;
            d1 = d1.AddDays(-1);
            Hashtable ht_Score = new Hashtable();

            System.Data.DataTable dt_Score = new System.Data.DataTable();
            dt_Score.Clear();

            if (dateTimePicker1.Text == "")
            {
                datescoredate = DateTime.Now;
                ht_Score.Add("@Date", datescoredate);
            }
            else
            {
                Score_Board_Date = dateTimePicker1.Text;

                ht_Score.Add("@Date", dateTimePicker1.Text.ToString());
            }
            ht_Score.Add("@Trans", "Current_Date");


            dt_Score = dataaccess.ExecuteSP("Sp_Score_Board", ht_Score);




            if (dt_Score.Rows.Count > 0)
            {
                Grd_Score_Board.Rows.Clear();
                for (int i = 0; i < dt_Score.Rows.Count; i++)
                {

                    Grd_Score_Board.AutoGenerateColumns = false;
                    Grd_Score_Board.Rows.Add();
                    Grd_Score_Board.Rows[i].Cells[0].Value = i + 1;
                    Grd_Score_Board.Rows[i].Cells[1].Value = dt_Score.Rows[i]["User_Name"].ToString();
                    Grd_Score_Board.Rows[i].Cells[2].Value = dt_Score.Rows[i]["Count_Orders"].ToString();
                    Grd_Score_Board.Rows[i].Cells[3].Value = dt_Score.Rows[i]["User_id"].ToString();
                    Grd_Score_Board.Rows[i].Cells[4].Value = dt_Score.Rows[i]["Others"].ToString();
                    Grd_Score_Board.Rows[i].Cells[5].Value = dt_Score.Rows[i]["Total"].ToString();

                    //System.Windows.Forms.Application.DoEvents();
                }


                //Grd_Score_Board.DataSource = dt_Score_Sort;

            }
            Grd_Score_Board.ColumnHeadersDefaultCellStyle.BackColor = Color.SlateGray;
            Grd_Score_Board.EnableHeadersVisualStyles = false;
            Grd_Score_Board.ColumnHeadersDefaultCellStyle.ForeColor = Color.WhiteSmoke;

        }

        private void New_Score_Board1()
        {


            DateTime d1 = DateTime.Now;
            d1 = d1.AddDays(-1);
            Hashtable ht_Score1 = new Hashtable();

            System.Data.DataTable dt_Score1 = new System.Data.DataTable();
            dt_Score1.Clear();


            Hashtable ht_Get_User_Orders = new Hashtable();
            System.Data.DataTable dt_Get_User_Orders = new System.Data.DataTable();


            if (User_Role_Id == "2")
            {

                ht_Get_User_Orders.Add("@Trans", "CALCUATE_MONTHLY_WISE_USER_EFFECINECY_BY_USER_ID");

            }
            else
            {
                ht_Get_User_Orders.Add("@Trans", "CALCUATE_MONTHLY_WISE_USER_EFFECINECY");
            }

            ht_Get_User_Orders.Add("@User_Id", userid);
            ht_Get_User_Orders.Add("@Month", ddl_Month.SelectedValue.ToString()); //ddl_Month.SelectedValue.ToString()
            ht_Get_User_Orders.Add("@Years", ddl_Year.SelectedValue.ToString()); //ddl_Year.SelectedValue.ToString()
            dt_Get_User_Orders = dataaccess.ExecuteSP("Sp_Score_Board", ht_Get_User_Orders);

            int Emp_Job_role_Id;
            decimal Emp_Sal, Emp_cat_Value;
            int Emp_Sal_Cat_Id;
            int Eff_Order_Id, Eff_Client_Id, Eff_Order_Type_Abs_Id, Eff_Order_Task_Id, Eff_Order_Source_Type_Id, Eff_State_Id, Eff_County_Id, Eff_Sub_Process_Id, Eff_User_Id, Eff_Work_Type_Id;

            for (int i = 0; i < dt_Get_User_Orders.Rows.Count; i++)
            {

                // Get the Employee Sal CatGory_Id
                Eff_Order_Id = int.Parse(dt_Get_User_Orders.Rows[i]["Order_Id"].ToString());
                Emp_Job_role_Id = int.Parse(dt_Get_User_Orders.Rows[i]["Job_Role_Id"].ToString());
                Emp_Sal = decimal.Parse(dt_Get_User_Orders.Rows[i]["Salary"].ToString());
                Eff_Client_Id = int.Parse(dt_Get_User_Orders.Rows[i]["Client_Id"].ToString());
                Eff_Sub_Process_Id = int.Parse(dt_Get_User_Orders.Rows[i]["Sub_ProcessId"].ToString());
                Eff_State_Id = int.Parse(dt_Get_User_Orders.Rows[i]["State"].ToString());
                Eff_County_Id = int.Parse(dt_Get_User_Orders.Rows[i]["County"].ToString());
                Eff_Order_Task_Id = int.Parse(dt_Get_User_Orders.Rows[i]["Order_Status_Id"].ToString());
                Eff_Order_Type_Abs_Id = int.Parse(dt_Get_User_Orders.Rows[i]["OrderType_ABS_Id"].ToString());
                Eff_User_Id = int.Parse(dt_Get_User_Orders.Rows[i]["User_Id"].ToString());
                Eff_Work_Type_Id = int.Parse(dt_Get_User_Orders.Rows[i]["Work_Type"].ToString());

                if (Emp_Job_role_Id != 0 && Emp_Sal != 0)
                {

                    // Getting Emp Sal Cat ID
                    Hashtable htget_Category = new Hashtable();
                    System.Data.DataTable dtget_Category = new System.Data.DataTable();
                    if (Emp_Job_role_Id == 1)
                    {
                        htget_Category.Add("@Trans", "GET_CATEGORY_ID_FOR_SEARCHER");
                    }
                    else if (Emp_Job_role_Id == 2)
                    {

                        htget_Category.Add("@Trans", "GET_CATEGORY_ID_FOR_TYPER");
                    }
                    htget_Category.Add("@Salary", Emp_Sal);
                    htget_Category.Add("@Job_Role_Id", Emp_Job_role_Id);

                    dtget_Category = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Category);


                    if (dtget_Category.Rows.Count > 0)
                    {
                        Emp_Sal_Cat_Id = int.Parse(dtget_Category.Rows[0]["Category_ID"].ToString());
                        Emp_cat_Value = decimal.Parse(dtget_Category.Rows[0]["Category_Name"].ToString());
                    }
                    else
                    {

                        Emp_Sal_Cat_Id = 0;
                        Emp_cat_Value = 0;
                    }

                    Hashtable htcheck_Order_Production = new Hashtable();
                    System.Data.DataTable dtcheck_Order_Production = new System.Data.DataTable();

                    if (Eff_Work_Type_Id == 1)
                    {
                        htcheck_Order_Production.Add("@Trans", "CHECK_ORDER");
                    }
                    else if (Eff_Work_Type_Id == 2)
                    {

                        htcheck_Order_Production.Add("@Trans", "CHECK_REWORK_ORDER");
                    }
                    else if (Eff_Work_Type_Id == 3)
                    {

                        htcheck_Order_Production.Add("@Trans", "CHECK_SUPERQC_ORDER");
                    }

                    htcheck_Order_Production.Add("@Order_Id", Eff_Order_Id);
                    htcheck_Order_Production.Add("@Order_Task_Id", Eff_Order_Task_Id);
                    htcheck_Order_Production.Add("@User_Id", Eff_User_Id);
                    dtcheck_Order_Production = dataaccess.ExecuteSP("Sp_Score_Board", htcheck_Order_Production);
                    int Check_production;
                    decimal Entered_User_Order_Eff;
                    if (dtcheck_Order_Production.Rows.Count > 0)
                    {
                        Check_production = int.Parse(dtcheck_Order_Production.Rows[0]["count"].ToString());
                        Entered_User_Order_Eff = decimal.Parse(dtcheck_Order_Production.Rows[0]["Order_User_Effeciency"].ToString());
                    }
                    else
                    {
                        Check_production = 0;

                        Entered_User_Order_Eff = 0;

                    }
                    // && Entered_User_Order_Eff==0

                    if (Emp_Sal_Cat_Id != 0 && Emp_cat_Value != 0)
                    {


                        // Check for the Search Task

                        //Check its Plant  or Technical For Searcher and Search qc

                        if (Eff_Order_Task_Id == 2 || Eff_Order_Task_Id == 3)
                        {
                            Hashtable htcheckplant_Technical = new Hashtable();
                            System.Data.DataTable dtcheckplant_Technical = new System.Data.DataTable();
                            htcheckplant_Technical.Add("@Trans", "GET_ORDER_SOURCE_TYPE_ID");
                            htcheckplant_Technical.Add("@State_Id", Eff_State_Id);
                            htcheckplant_Technical.Add("@County", Eff_County_Id);
                            dtcheckplant_Technical = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htcheckplant_Technical);

                            if (dtcheckplant_Technical.Rows.Count > 0)
                            {

                                Eff_Order_Source_Type_Id = int.Parse(dtcheckplant_Technical.Rows[0]["Order_Source_Type_ID"].ToString());

                            }
                            else
                            {
                                Eff_Order_Source_Type_Id = 0;

                            }

                            // If its an Technical or Plant

                            if (Eff_Order_Source_Type_Id != 0)
                            {
                                //Get the Allocated Count in the Efffecincy Matrix
                                Hashtable htget_Effecicy_Value = new Hashtable();
                                System.Data.DataTable dtget_Effeciency_Value = new System.Data.DataTable();

                                htget_Effecicy_Value.Add("@Trans", "GET_ALLOCTAED_ORDER_COUNT");
                                htget_Effecicy_Value.Add("@Client_Id", Eff_Client_Id);
                                htget_Effecicy_Value.Add("@Order_Status_Id", Eff_Order_Task_Id);
                                htget_Effecicy_Value.Add("@Order_Type_Abs_Id", Eff_Order_Type_Abs_Id);
                                htget_Effecicy_Value.Add("@Order_Source_Type_Id", Eff_Order_Source_Type_Id);
                                htget_Effecicy_Value.Add("@Category_Id", Emp_Sal_Cat_Id);
                                dtget_Effeciency_Value = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Effecicy_Value);

                                if (dtget_Effeciency_Value.Rows.Count > 0)
                                {
                                    Emp_Eff_Allocated_Order_Count = Convert.ToDecimal(dtget_Effeciency_Value.Rows[0]["Allocated_count"].ToString());
                                    Eff_Order_User_Effecncy = (1 / Emp_Eff_Allocated_Order_Count) * 100;

                                }
                                else
                                {

                                    htget_Effecicy_Value.Clear();
                                    dtget_Effeciency_Value.Clear();

                                    htget_Effecicy_Value.Add("@Trans", "GET_ALLOCTAED_ORDER_COUNT");
                                    htget_Effecicy_Value.Add("@Client_Id", Eff_Client_Id);
                                    htget_Effecicy_Value.Add("@Order_Status_Id", Eff_Order_Task_Id);
                                    htget_Effecicy_Value.Add("@Order_Type_Abs_Id", Eff_Order_Type_Abs_Id);
                                    htget_Effecicy_Value.Add("@Order_Source_Type_Id", 4);
                                    htget_Effecicy_Value.Add("@Category_Id", Emp_Sal_Cat_Id);
                                    dtget_Effeciency_Value = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Effecicy_Value);


                                }


                                if (dtget_Effeciency_Value.Rows.Count > 0)
                                {
                                    Emp_Eff_Allocated_Order_Count = Convert.ToDecimal(dtget_Effeciency_Value.Rows[0]["Allocated_count"].ToString());

                                    Eff_Order_User_Effecncy = (1 / Emp_Eff_Allocated_Order_Count) * 100;

                                }
                                else
                                {

                                    Emp_Eff_Allocated_Order_Count = 0;
                                }






                            }
                            else if (Emp_Eff_Allocated_Order_Count != 0 && Eff_Order_Source_Type_Id != 0)
                            {
                                //Get the Allocated Count in the Efffecincy Matrix for Online
                                Hashtable htget_Effecicy_Value = new Hashtable();
                                System.Data.DataTable dtget_Effeciency_Value = new System.Data.DataTable();

                                htget_Effecicy_Value.Add("@Trans", "GET_ALLOCTAED_ORDER_COUNT");
                                htget_Effecicy_Value.Add("@Client_Id", Eff_Client_Id);
                                htget_Effecicy_Value.Add("@Order_Status_Id", Eff_Order_Task_Id);
                                htget_Effecicy_Value.Add("@Order_Type_Abs_Id", Eff_Order_Type_Abs_Id);
                                htget_Effecicy_Value.Add("@Order_Source_Type_Id", 4);
                                htget_Effecicy_Value.Add("@Category_Id", Emp_Sal_Cat_Id);
                                dtget_Effeciency_Value = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Effecicy_Value);

                                if (dtget_Effeciency_Value.Rows.Count > 0)
                                {
                                    Emp_Eff_Allocated_Order_Count = Convert.ToDecimal(dtget_Effeciency_Value.Rows[0]["Allocated_count"].ToString());

                                    Eff_Order_User_Effecncy = (1 / Emp_Eff_Allocated_Order_Count) * 100;

                                }
                                else
                                {



                                    htget_Effecicy_Value.Clear();
                                    dtget_Effeciency_Value.Clear();

                                    htget_Effecicy_Value.Add("@Trans", "GET_ALLOCTAED_ORDER_COUNT");
                                    htget_Effecicy_Value.Add("@Client_Id", Eff_Client_Id);
                                    htget_Effecicy_Value.Add("@Order_Status_Id", Eff_Order_Task_Id);
                                    htget_Effecicy_Value.Add("@Order_Type_Abs_Id", Eff_Order_Type_Abs_Id);
                                    htget_Effecicy_Value.Add("@Order_Source_Type_Id", 4);
                                    htget_Effecicy_Value.Add("@Category_Id", Emp_Sal_Cat_Id);
                                    dtget_Effeciency_Value = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Effecicy_Value);


                                }
                                if (dtget_Effeciency_Value.Rows.Count > 0)
                                {
                                    Emp_Eff_Allocated_Order_Count = Convert.ToDecimal(dtget_Effeciency_Value.Rows[0]["Allocated_count"].ToString());

                                    Eff_Order_User_Effecncy = (1 / Emp_Eff_Allocated_Order_Count) * 100;

                                }
                                else
                                {

                                    Emp_Eff_Allocated_Order_Count = 0;
                                }


                            }
                            else
                            {
                                Hashtable htget_Effecicy_Value = new Hashtable();
                                System.Data.DataTable dtget_Effeciency_Value = new System.Data.DataTable();

                                htget_Effecicy_Value.Add("@Trans", "GET_ALLOCTAED_ORDER_COUNT");
                                htget_Effecicy_Value.Add("@Client_Id", Eff_Client_Id);
                                htget_Effecicy_Value.Add("@Order_Status_Id", Eff_Order_Task_Id);
                                htget_Effecicy_Value.Add("@Order_Type_Abs_Id", Eff_Order_Type_Abs_Id);
                                htget_Effecicy_Value.Add("@Order_Source_Type_Id", 4);// This is nothing But Genral Option In Effeciency
                                htget_Effecicy_Value.Add("@Category_Id", Emp_Sal_Cat_Id);
                                dtget_Effeciency_Value = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Effecicy_Value);

                                if (dtget_Effeciency_Value.Rows.Count > 0)
                                {
                                    Emp_Eff_Allocated_Order_Count = Convert.ToDecimal(dtget_Effeciency_Value.Rows[0]["Allocated_count"].ToString());

                                    Eff_Order_User_Effecncy = (1 / Emp_Eff_Allocated_Order_Count) * 100;
                                }
                                else
                                {

                                    Emp_Eff_Allocated_Order_Count = 0;
                                    Eff_Order_User_Effecncy = 0;
                                }

                            }




                        }
                        else if (Eff_Order_Task_Id == 4 || Eff_Order_Task_Id == 7)
                        {

                            // this is for Deed Chain Order and Typing 


                            Hashtable htcheck_Deed_Chain = new Hashtable();
                            System.Data.DataTable dtcheck_Deed_Chain = new System.Data.DataTable();
                            htcheck_Deed_Chain.Add("@Trans", "GET_ORDER_SOURCE_TYPE_ID_BY_SUB_CLIENT");
                            htcheck_Deed_Chain.Add("@Subprocess_Id", Eff_Sub_Process_Id);
                            dtcheck_Deed_Chain = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htcheck_Deed_Chain);

                            if (dtcheck_Deed_Chain.Rows.Count > 0)
                            {

                                Eff_Order_Source_Type_Id = int.Parse(dtcheck_Deed_Chain.Rows[0]["Order_Source_Type_ID"].ToString());

                            }
                            else
                            {
                                Eff_Order_Source_Type_Id = 0;

                            }

                            if (Eff_Order_Source_Type_Id != 0)
                            {

                                Hashtable htget_Effecicy_Value = new Hashtable();
                                System.Data.DataTable dtget_Effeciency_Value = new System.Data.DataTable();

                                htget_Effecicy_Value.Add("@Trans", "GET_ALLOCTAED_ORDER_COUNT");
                                htget_Effecicy_Value.Add("@Client_Id", Eff_Client_Id);
                                htget_Effecicy_Value.Add("@Order_Status_Id", Eff_Order_Task_Id);
                                htget_Effecicy_Value.Add("@Order_Type_Abs_Id", Eff_Order_Type_Abs_Id);
                                htget_Effecicy_Value.Add("@Order_Source_Type_Id", Eff_Order_Source_Type_Id);
                                htget_Effecicy_Value.Add("@Category_Id", Emp_Sal_Cat_Id);
                                dtget_Effeciency_Value = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Effecicy_Value);

                                if (dtget_Effeciency_Value.Rows.Count > 0)
                                {
                                    Emp_Eff_Allocated_Order_Count = Convert.ToDecimal(dtget_Effeciency_Value.Rows[0]["Allocated_count"].ToString());

                                }
                                else
                                {


                                    htget_Effecicy_Value.Clear();
                                    dtget_Effeciency_Value.Clear();

                                    htget_Effecicy_Value.Add("@Trans", "GET_ALLOCTAED_ORDER_COUNT");
                                    htget_Effecicy_Value.Add("@Client_Id", Eff_Client_Id);
                                    htget_Effecicy_Value.Add("@Order_Status_Id", Eff_Order_Task_Id);
                                    htget_Effecicy_Value.Add("@Order_Type_Abs_Id", Eff_Order_Type_Abs_Id);
                                    htget_Effecicy_Value.Add("@Order_Source_Type_Id", 4);
                                    htget_Effecicy_Value.Add("@Category_Id", Emp_Sal_Cat_Id);
                                    dtget_Effeciency_Value = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Effecicy_Value);

                                }

                                // Calculate eff

                                if (dtget_Effeciency_Value.Rows.Count > 0)
                                {
                                    Emp_Eff_Allocated_Order_Count = Convert.ToDecimal(dtget_Effeciency_Value.Rows[0]["Allocated_count"].ToString());

                                    Eff_Order_User_Effecncy = (1 / Emp_Eff_Allocated_Order_Count) * 100;


                                }
                                else
                                {

                                    Emp_Eff_Allocated_Order_Count = 0;
                                }


                            }
                            else if (Eff_Order_Source_Type_Id != 0 && Emp_Eff_Allocated_Order_Count != 0)
                            {

                                //Get the Allocated Count in the Efffecincy Matrix for Online
                                Hashtable htget_Effecicy_Value = new Hashtable();
                                System.Data.DataTable dtget_Effeciency_Value = new System.Data.DataTable();

                                htget_Effecicy_Value.Add("@Trans", "GET_ALLOCTAED_ORDER_COUNT");
                                htget_Effecicy_Value.Add("@Client_Id", Eff_Client_Id);
                                htget_Effecicy_Value.Add("@Order_Status_Id", Eff_Order_Task_Id);
                                htget_Effecicy_Value.Add("@Order_Type_Abs_Id", Eff_Order_Type_Abs_Id);
                                htget_Effecicy_Value.Add("@Order_Source_Type_Id", 4);// This is nothing But Genral Option In Effeciency
                                htget_Effecicy_Value.Add("@Category_Id", Emp_Sal_Cat_Id);
                                dtget_Effeciency_Value = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Effecicy_Value);

                                if (dtget_Effeciency_Value.Rows.Count > 0)
                                {
                                    Emp_Eff_Allocated_Order_Count = Convert.ToDecimal(dtget_Effeciency_Value.Rows[0]["Allocated_count"].ToString());

                                }
                                else
                                {

                                    Emp_Eff_Allocated_Order_Count = 0;
                                }

                                Eff_Order_User_Effecncy = (1 / Emp_Eff_Allocated_Order_Count) * 100;



                            }

                            else
                            {
                                Hashtable htget_Effecicy_Value = new Hashtable();
                                System.Data.DataTable dtget_Effeciency_Value = new System.Data.DataTable();

                                htget_Effecicy_Value.Add("@Trans", "GET_ALLOCTAED_ORDER_COUNT");
                                htget_Effecicy_Value.Add("@Client_Id", Eff_Client_Id);
                                htget_Effecicy_Value.Add("@Order_Status_Id", Eff_Order_Task_Id);
                                htget_Effecicy_Value.Add("@Order_Type_Abs_Id", Eff_Order_Type_Abs_Id);
                                htget_Effecicy_Value.Add("@Order_Source_Type_Id", 4);// This is nothing But Genral Option In Effeciency
                                htget_Effecicy_Value.Add("@Category_Id", Emp_Sal_Cat_Id);
                                dtget_Effeciency_Value = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Effecicy_Value);

                                if (dtget_Effeciency_Value.Rows.Count > 0)
                                {
                                    Emp_Eff_Allocated_Order_Count = Convert.ToDecimal(dtget_Effeciency_Value.Rows[0]["Allocated_count"].ToString());

                                    Eff_Order_User_Effecncy = (1 / Emp_Eff_Allocated_Order_Count) * 100;
                                }
                                else
                                {

                                    Emp_Eff_Allocated_Order_Count = 0;
                                    Eff_Order_User_Effecncy = 0;
                                }

                            }





                        }
                        else  // this is for not Search and Typing Qc
                        {


                            Hashtable htget_Effecicy_Value = new Hashtable();
                            System.Data.DataTable dtget_Effeciency_Value = new System.Data.DataTable();

                            htget_Effecicy_Value.Add("@Trans", "GET_ALLOCTAED_ORDER_COUNT");
                            htget_Effecicy_Value.Add("@Client_Id", Eff_Client_Id);
                            htget_Effecicy_Value.Add("@Order_Status_Id", Eff_Order_Task_Id);
                            htget_Effecicy_Value.Add("@Order_Type_Abs_Id", Eff_Order_Type_Abs_Id);
                            htget_Effecicy_Value.Add("@Order_Source_Type_Id", 4);// This is nothing But Genral Option In Effeciency
                            htget_Effecicy_Value.Add("@Category_Id", Emp_Sal_Cat_Id);
                            dtget_Effeciency_Value = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Effecicy_Value);

                            if (dtget_Effeciency_Value.Rows.Count > 0)
                            {
                                Emp_Eff_Allocated_Order_Count = Convert.ToDecimal(dtget_Effeciency_Value.Rows[0]["Allocated_count"].ToString());

                                Eff_Order_User_Effecncy = (1 / Emp_Eff_Allocated_Order_Count) * 100;
                            }
                            else
                            {

                                Emp_Eff_Allocated_Order_Count = 0;
                                Eff_Order_User_Effecncy = 0;
                            }




                        }




                        // here it is inserting for Production Table

                        decimal e1 = Convert.ToDecimal(Entered_User_Order_Eff.ToString());


                        decimal ee2 = Convert.ToDecimal(Eff_Order_User_Effecncy.ToString());

                        if (ee2 != 0)
                        {
                            e2 = Convert.ToDecimal(ee2.ToString("#.##"));
                        }

                        if (Eff_Order_User_Effecncy != 0 && e1 != e2)
                        {

                            Hashtable htcheck_Order_Production1 = new Hashtable();
                            System.Data.DataTable dtcheck_Order_Production1 = new System.Data.DataTable();

                            if (Eff_Work_Type_Id == 1)
                            {
                                htcheck_Order_Production1.Add("@Trans", "CHECK_ORDER");
                            }
                            else if (Eff_Work_Type_Id == 2)
                            {

                                htcheck_Order_Production1.Add("@Trans", "CHECK_REWORK_ORDER");
                            }
                            else if (Eff_Work_Type_Id == 3)
                            {

                                htcheck_Order_Production1.Add("@Trans", "CHECK_SUPERQC_ORDER");
                            }

                            htcheck_Order_Production1.Add("@Order_Id", Eff_Order_Id);
                            htcheck_Order_Production1.Add("@Order_Task_Id", Eff_Order_Task_Id);
                            htcheck_Order_Production1.Add("@User_Id", Eff_User_Id);
                            dtcheck_Order_Production1 = dataaccess.ExecuteSP("Sp_Score_Board", htcheck_Order_Production1);
                            int Check_production1;
                            decimal Entered_User_Order_Eff1;
                            if (dtcheck_Order_Production1.Rows.Count > 0)
                            {
                                Check_production1 = int.Parse(dtcheck_Order_Production1.Rows[0]["count"].ToString());
                                Entered_User_Order_Eff1 = decimal.Parse(dtcheck_Order_Production1.Rows[0]["Order_User_Effeciency"].ToString());
                            }
                            else
                            {
                                Check_production1 = 0;

                                Entered_User_Order_Eff1 = 0;

                            }
                            if (Check_production1 > 0)//Entered_User_Order_Eff1 == 0 && 
                            {


                                Hashtable htinsert_Production_Eff = new Hashtable();
                                System.Data.DataTable dtinsert_Production_Eff = new System.Data.DataTable();

                                if (Eff_Work_Type_Id == 1)
                                {
                                    htinsert_Production_Eff.Add("@Trans", "UPDATE_USER_ORDER_EFF");
                                }
                                else if (Eff_Work_Type_Id == 2)
                                {

                                    htinsert_Production_Eff.Add("@Trans", "UPDATE_USER_REWORK_ORDER_EFF");
                                }
                                else if (Eff_Work_Type_Id == 3)
                                {

                                    htinsert_Production_Eff.Add("@Trans", "UPDATE_USER_SUPER_QC_ORDER_EFF");
                                }

                                htinsert_Production_Eff.Add("@Order_User_Effeciency", Eff_Order_User_Effecncy);
                                htinsert_Production_Eff.Add("@Order_Id", Eff_Order_Id);
                                htinsert_Production_Eff.Add("@Order_Task_Id", Eff_Order_Task_Id);
                                htinsert_Production_Eff.Add("@User_Id", Eff_User_Id);
                                dtinsert_Production_Eff = dataaccess.ExecuteSP("Sp_Score_Board", htinsert_Production_Eff);







                            }


                        }

                    }

                }


            }


            if (User_Role_Id == "2")
            {
                ht_Score1.Add("@Trans", "GET_MONTHLY_WISE_USER_EFFECINECY_BY_USER_ID");

            }

            else
            {
                ht_Score1.Add("@Trans", "GET_MONTHLY_WISE_USER_EFFECINECY");
            }
            //else if (User_Role_Id == "2")
            //{
            //    ht_Score1.Add("@Trans", "GET_MONTHLY_WISE_USER_EFFECINECY_BY_USER_ID");

            //}

            ht_Score1.Add("@User_Id", userid);
            ht_Score1.Add("@Month", ddl_Month.SelectedValue.ToString());
            ht_Score1.Add("@Years", ddl_Year.SelectedValue.ToString());

            dt_Score1 = dataaccess.ExecuteSP("Sp_Score_Board", ht_Score1);



            Hashtable ht_Score = new Hashtable();

            System.Data.DataTable dt_Score = new System.Data.DataTable();
            System.Data.DataTable dt_Score2 = new System.Data.DataTable();
            dt_Score2.Clear();


            if (User_Role_Id == "2")
            {

                ht_Score.Add("@Trans", "GET_USER_ORDER_EFFECINECY_USER_ID_WISE");
            }
            else
            {
                ht_Score.Add("@Trans", "GET_USER_ORDER_EFFECINECY");

            }

            ht_Score.Add("@User_Id", userid);
            dt_Score2 = dataaccess.ExecuteSP("Sp_Score_Board", ht_Score);



            Hashtable htget_Avg_Total_eff = new Hashtable();
            System.Data.DataTable dtget_Avg_Total_Eff = new System.Data.DataTable();



            if (User_Role_Id == "2")
            {

                htget_Avg_Total_eff.Add("@Trans", "GET_SUM_AND_AVARAGE_EFF_USER_ID");
            }
            else
            {
                htget_Avg_Total_eff.Add("@Trans", "GET_SUM_AND_AVARAGE_EFF");

            }
            htget_Avg_Total_eff.Add("@User_Id", userid);
            dtget_Avg_Total_Eff = dataaccess.ExecuteSP("Sp_Score_Board", htget_Avg_Total_eff);




            System.Data.DataTable dt_Final_Score1 = new System.Data.DataTable();



            //  var collection = from t1 in dt_Score2.AsEnumerable()
            //  join t2 in dtget_Avg_Total_Eff.AsEnumerable()
            //on t1["User_Id"] equals t2["User_Id"]
            //  into a
            //  from b in a.DefaultIfEmpty()


            var collection = from t1 in dt_Score2.AsEnumerable()
                             join t2 in dtget_Avg_Total_Eff.AsEnumerable()
                               on t1["User_Id"] equals t2["User_Id"]
                             select new
                             {
                                 User_Id = t1["User_Id"],
                                 User_Name = t1["User_Name"],
                                 Grand_Eff = t2["Grand_Eff"],
                                 Avg_Eff = t2["Avg_Eff"],
                                 D1 = t1["1"],
                                 D2 = t1["2"],
                                 D3 = t1["3"],
                                 D4 = t1["4"],
                                 D5 = t1["5"],
                                 D6 = t1["6"],
                                 D7 = t1["7"],
                                 D8 = t1["8"],
                                 D9 = t1["9"],
                                 D10 = t1["10"],
                                 D11 = t1["11"],
                                 D12 = t1["12"],
                                 D13 = t1["13"],
                                 D14 = t1["14"],
                                 D15 = t1["15"],
                                 D16 = t1["16"],
                                 D17 = t1["17"],
                                 D18 = t1["18"],
                                 D19 = t1["19"],
                                 D20 = t1["20"],
                                 D21 = t1["21"],
                                 D22 = t1["22"],
                                 D23 = t1["23"],
                                 D24 = t1["24"],
                                 D25 = t1["25"],
                                 D26 = t1["26"],
                                 D27 = t1["27"],
                                 D28 = t1["28"],
                                 D29 = t1["29"],
                                 D30 = t1["30"],
                                 D31 = t1["31"],
                             };
            System.Data.DataTable result = new System.Data.DataTable("Final_Data");
            result.Columns.Add("User_Id", typeof(string));
            result.Columns.Add("User_Name", typeof(string));
            result.Columns.Add("Grand_Eff", typeof(string));
            result.Columns.Add("Avg_Eff", typeof(string));
            result.Columns.Add("D1", typeof(decimal));
            result.Columns.Add("D2", typeof(decimal));
            result.Columns.Add("D3", typeof(decimal));
            result.Columns.Add("D4", typeof(decimal));
            result.Columns.Add("D5", typeof(decimal));
            result.Columns.Add("D6", typeof(decimal));
            result.Columns.Add("D7", typeof(decimal));
            result.Columns.Add("D8", typeof(decimal));
            result.Columns.Add("D9", typeof(decimal));
            result.Columns.Add("D10", typeof(decimal));
            result.Columns.Add("D11", typeof(decimal));
            result.Columns.Add("D12", typeof(decimal));
            result.Columns.Add("D13", typeof(decimal));
            result.Columns.Add("D14", typeof(decimal));
            result.Columns.Add("D15", typeof(decimal));
            result.Columns.Add("D16", typeof(decimal));
            result.Columns.Add("D17", typeof(decimal));
            result.Columns.Add("D18", typeof(decimal));
            result.Columns.Add("D19", typeof(decimal));
            result.Columns.Add("D20", typeof(decimal));
            result.Columns.Add("D21", typeof(decimal));
            result.Columns.Add("D22", typeof(decimal));
            result.Columns.Add("D23", typeof(decimal));
            result.Columns.Add("D24", typeof(decimal));
            result.Columns.Add("D25", typeof(decimal));
            result.Columns.Add("D26", typeof(decimal));
            result.Columns.Add("D27", typeof(decimal));
            result.Columns.Add("D28", typeof(decimal));
            result.Columns.Add("D29", typeof(decimal));
            result.Columns.Add("D30", typeof(decimal));
            result.Columns.Add("D31", typeof(decimal));
            // System.Data.DataTable dt_Final_Score = new System.Data.DataTable();
            foreach (var item in collection)
            {
                result.Rows.Add(item.User_Id, item.User_Name, item.Grand_Eff, item.Avg_Eff, item.D1, item.D2, item.D3, item.D4, item.D5, item.D6, item.D7, item.D8, item.D9, item.D10,
                    item.D11, item.D12, item.D13, item.D14, item.D15, item.D16, item.D17, item.D18, item.D19, item.D20, item.D21, item.D22, item.D23, item.D24, item.D25, item.D26, item.D27, item.D28, item.D29, item.D30, item.D31);

            }


            dt_Final_Score = result;

            //System.Data.DataTable dt_Final_Score = new System.Data.DataTable();

            dt_Final_Score = (System.Data.DataTable)result;


            if (dt_Final_Score.Rows.Count > 0)
            {
                //  Grid_Score.Rows.Clear();
                Grid_Score.DataSource = null;


                Grid_Score.ColumnCount = 35;

                Grid_Score.Columns[0].Name = "User_Id";
                Grid_Score.Columns[0].HeaderText = "User_Id";
                Grid_Score.Columns[0].DataPropertyName = "User_Id";
                Grid_Score.Columns[0].Width = 60;
                Grid_Score.Columns[0].Visible = false;


                Grid_Score.Columns[1].Name = "User_Name";
                Grid_Score.Columns[1].HeaderText = "Employee name";
                Grid_Score.Columns[1].DataPropertyName = "User_Name";
                Grid_Score.Columns[1].Width = 120;

                Grid_Score.Columns[2].Name = "Grand_Eff";
                Grid_Score.Columns[2].HeaderText = "G.T";
                Grid_Score.Columns[2].DataPropertyName = "Grand_Eff";
                Grid_Score.Columns[2].Width = 100;
                Grid_Score.Columns[2].Visible = false;

                Grid_Score.Columns[3].Name = "Avg_Eff";
                Grid_Score.Columns[3].HeaderText = "AVG";
                Grid_Score.Columns[3].DataPropertyName = "Avg_Eff";
                Grid_Score.Columns[3].Width = 50;



                Grid_Score.Columns[4].Name = "1";
                Grid_Score.Columns[4].HeaderText = "D1";
                Grid_Score.Columns[4].DataPropertyName = "D1";
                Grid_Score.Columns[4].Width = 37;




                Grid_Score.Columns[5].Name = "2";
                Grid_Score.Columns[5].HeaderText = "D2";
                Grid_Score.Columns[5].DataPropertyName = "D2";
                Grid_Score.Columns[5].Width = 37;

                Grid_Score.Columns[6].Name = "3";
                Grid_Score.Columns[6].HeaderText = "D3";
                Grid_Score.Columns[6].DataPropertyName = "D3";
                Grid_Score.Columns[6].Width = 37;

                Grid_Score.Columns[7].Name = "4";
                Grid_Score.Columns[7].HeaderText = "D4";
                Grid_Score.Columns[7].DataPropertyName = "D4";
                Grid_Score.Columns[7].Width = 37;

                Grid_Score.Columns[8].Name = "5";
                Grid_Score.Columns[8].HeaderText = "D5";
                Grid_Score.Columns[8].DataPropertyName = "D5";
                Grid_Score.Columns[8].Width = 37;

                Grid_Score.Columns[9].Name = "6";
                Grid_Score.Columns[9].HeaderText = "D6";
                Grid_Score.Columns[9].DataPropertyName = "D6";
                Grid_Score.Columns[9].Width = 37;

                Grid_Score.Columns[10].Name = "7";
                Grid_Score.Columns[10].HeaderText = "D7";
                Grid_Score.Columns[10].DataPropertyName = "D7";
                Grid_Score.Columns[10].Width = 37;

                Grid_Score.Columns[11].Name = "8";
                Grid_Score.Columns[11].HeaderText = "D8";
                Grid_Score.Columns[11].DataPropertyName = "D8";
                Grid_Score.Columns[11].Width = 37;

                Grid_Score.Columns[12].Name = "9";
                Grid_Score.Columns[12].HeaderText = "D9";
                Grid_Score.Columns[12].DataPropertyName = "D9";
                Grid_Score.Columns[12].Width = 37;

                Grid_Score.Columns[13].Name = "10";
                Grid_Score.Columns[13].HeaderText = "D10";
                Grid_Score.Columns[13].DataPropertyName = "D10";
                Grid_Score.Columns[13].Width = 37;

                Grid_Score.Columns[14].Name = "11";
                Grid_Score.Columns[14].HeaderText = "D11";
                Grid_Score.Columns[14].DataPropertyName = "D11";
                Grid_Score.Columns[14].Width = 37;

                Grid_Score.Columns[15].Name = "12";
                Grid_Score.Columns[15].HeaderText = "D12";
                Grid_Score.Columns[15].DataPropertyName = "D12";
                Grid_Score.Columns[15].Width = 37;

                Grid_Score.Columns[16].Name = "13";
                Grid_Score.Columns[16].HeaderText = "D13";
                Grid_Score.Columns[16].DataPropertyName = "D13";
                Grid_Score.Columns[16].Width = 37;

                Grid_Score.Columns[17].Name = "14";
                Grid_Score.Columns[17].HeaderText = "D14";
                Grid_Score.Columns[17].DataPropertyName = "D14";
                Grid_Score.Columns[17].Width = 37;

                Grid_Score.Columns[18].Name = "15";
                Grid_Score.Columns[18].HeaderText = "D15";
                Grid_Score.Columns[18].DataPropertyName = "D15";
                Grid_Score.Columns[18].Width = 37;

                Grid_Score.Columns[19].Name = "16";
                Grid_Score.Columns[19].HeaderText = "D16";
                Grid_Score.Columns[19].DataPropertyName = "D16";
                Grid_Score.Columns[19].Width = 37;

                Grid_Score.Columns[20].Name = "17";
                Grid_Score.Columns[20].HeaderText = "D17";
                Grid_Score.Columns[20].DataPropertyName = "D17";
                Grid_Score.Columns[20].Width = 37;

                Grid_Score.Columns[21].Name = "18";
                Grid_Score.Columns[21].HeaderText = "D18";
                Grid_Score.Columns[21].DataPropertyName = "D18";
                Grid_Score.Columns[21].Width = 37;

                Grid_Score.Columns[22].Name = "19";
                Grid_Score.Columns[22].HeaderText = "D19";
                Grid_Score.Columns[22].DataPropertyName = "D19";
                Grid_Score.Columns[22].Width = 37;

                Grid_Score.Columns[23].Name = "20";
                Grid_Score.Columns[23].HeaderText = "D20";
                Grid_Score.Columns[23].DataPropertyName = "D20";
                Grid_Score.Columns[23].Width = 37;

                Grid_Score.Columns[24].Name = "21";
                Grid_Score.Columns[24].HeaderText = "D21";
                Grid_Score.Columns[24].DataPropertyName = "D21";
                Grid_Score.Columns[24].Width = 37;

                Grid_Score.Columns[25].Name = "22";
                Grid_Score.Columns[25].HeaderText = "D22";
                Grid_Score.Columns[25].DataPropertyName = "D22";
                Grid_Score.Columns[25].Width = 37;

                Grid_Score.Columns[26].Name = "23";
                Grid_Score.Columns[26].HeaderText = "D23";
                Grid_Score.Columns[26].DataPropertyName = "D23";
                Grid_Score.Columns[26].Width = 37;

                Grid_Score.Columns[27].Name = "24";
                Grid_Score.Columns[27].HeaderText = "D24";
                Grid_Score.Columns[27].DataPropertyName = "D24";
                Grid_Score.Columns[27].Width = 37;

                Grid_Score.Columns[28].Name = "25";
                Grid_Score.Columns[28].HeaderText = "D25";
                Grid_Score.Columns[28].DataPropertyName = "D25";
                Grid_Score.Columns[28].Width = 37;

                Grid_Score.Columns[29].Name = "26";
                Grid_Score.Columns[29].HeaderText = "D26";
                Grid_Score.Columns[29].DataPropertyName = "D26";
                Grid_Score.Columns[29].Width = 37;

                Grid_Score.Columns[30].Name = "27";
                Grid_Score.Columns[30].HeaderText = "D27";
                Grid_Score.Columns[30].DataPropertyName = "D27";
                Grid_Score.Columns[30].Width = 37;

                Grid_Score.Columns[31].Name = "28";
                Grid_Score.Columns[31].HeaderText = "D28";
                Grid_Score.Columns[31].DataPropertyName = "D28";
                Grid_Score.Columns[31].Width = 37;

                Grid_Score.Columns[32].Name = "29";
                Grid_Score.Columns[32].HeaderText = "D29";
                Grid_Score.Columns[32].DataPropertyName = "D29";
                Grid_Score.Columns[32].Width = 37;

                Grid_Score.Columns[33].Name = "30";
                Grid_Score.Columns[33].HeaderText = "D30";
                Grid_Score.Columns[33].DataPropertyName = "D30";
                Grid_Score.Columns[33].Width = 37;

                Grid_Score.Columns[34].Name = "31";
                Grid_Score.Columns[34].HeaderText = "D31";
                Grid_Score.Columns[34].DataPropertyName = "D31";
                Grid_Score.Columns[34].Width = 37;




                Grid_Score.Visible = true;
                Grid_Score.DataSource = dt_Final_Score;





            }
            else
            {

                Grid_Score.DataSource = null;
                Grid_Score.Rows.Clear();
            }

            Hashtable htgetfirst_Last_Dates = new Hashtable();
            System.Data.DataTable dtgetfirst_last_Dates = new System.Data.DataTable();

            htgetfirst_Last_Dates.Add("@Trans", "GET_FIRST_LAST_DATE");
            htgetfirst_Last_Dates.Add("@Month", int.Parse(ddl_Month.SelectedValue.ToString()));
            htgetfirst_Last_Dates.Add("@Years", int.Parse(ddl_Year.SelectedValue.ToString()));
            dtgetfirst_last_Dates = dataaccess.ExecuteSP("Sp_Score_Board", htgetfirst_Last_Dates);


            Hashtable htdatecolumn = new Hashtable();

            System.Data.DataTable dtdatecolumn = new System.Data.DataTable();
            htdatecolumn.Add("@Trans", "GET_DATES");
            htdatecolumn.Add("@date_from1", dtgetfirst_last_Dates.Rows[0]["First_Date"].ToString());
            htdatecolumn.Add("@date_to1", dtgetfirst_last_Dates.Rows[0]["Last_Date"].ToString());
            dtdatecolumn = dataaccess.ExecuteSP("Sp_Score_Board", htdatecolumn);


            if (Grid_Score.Rows.Count > 0)
            {

                if (dtdatecolumn.Rows.Count > 0)
                {

                    for (int i = 0; i < dtdatecolumn.Rows.Count; i++)
                    {

                        int k = i + 4;

                        Grid_Score.Columns[k].HeaderText = dtdatecolumn.Rows[i][0].ToString();




                    }


                }
            }

        }


        private void Updated_Score_Board()
        {

            DateTime d1 = DateTime.Now;
            d1 = d1.AddDays(-1);
            Hashtable ht_Score1 = new Hashtable();

            System.Data.DataTable dt_Score1 = new System.Data.DataTable();
            dt_Score1.Clear();

            Hashtable ht_Get_User_Orders = new Hashtable();
            System.Data.DataTable dt_Get_User_Orders = new System.Data.DataTable();

            if (User_Role_Id == "2")
            {
                ht_Get_User_Orders.Add("@Trans", "CALCUATE_MONTHLY_WISE_USER_EFFECINECY_BY_USER_ID_SCORE_BOARD2");
            }
            else
            {
                ht_Get_User_Orders.Add("@Trans", "CALCUATE_MONTHLY_WISE_USER_EFFECINECY_FOR_SCORE_BOARD2");
            }

            ht_Get_User_Orders.Add("@User_Id", userid);
            ht_Get_User_Orders.Add("@Month", ddl_Month.SelectedValue.ToString()); //ddl_Month.SelectedValue.ToString()
            ht_Get_User_Orders.Add("@Years", ddl_Year.SelectedValue.ToString()); //ddl_Year.SelectedValue.ToString()
            dt_Get_User_Orders = dataaccess.ExecuteSP("Sp_Score_Board", ht_Get_User_Orders);


            Hashtable ht_Score = new Hashtable();

            System.Data.DataTable dt_Score = new System.Data.DataTable();
            System.Data.DataTable dt_Score2 = new System.Data.DataTable();
            dt_Score2.Clear();




            if (User_Role_Id == "2")
            {
                ht_Score.Add("@Trans", "GET_USER_NEWLY_UPDATED_ORDER_EFFECINECY_USER_ID_WISE");
            }
            else
            {

                // Insert to temp table data
                Hashtable ht_Temp_Score = new Hashtable();

                System.Data.DataTable dt_Temp_Score = new System.Data.DataTable();
                ht_Temp_Score.Add("@Trans", "INSERT_EFF_TO_TEMP");
                dt_Temp_Score = dataaccess.ExecuteSP("Sp_Score_Board", ht_Temp_Score);

                if (rbtn_Score_Production_Time.Checked == true)
                {
                    ht_Score.Add("@Trans", "GET_USER_UPDATED_NEW_ORDER_EFFECINECY");
                }
                else if (rbtn_Score_Target_Wise.Checked == true)
                {
                    ht_Score.Add("@Trans", "GET_USER_UPDATED_TARGET_WISE_ORDER_EFFECINECY");
                }
            }

            ht_Score.Add("@User_Id", userid);
            dt_Score2 = dataaccess.ExecuteSP("Sp_Score_Board", ht_Score);

            Hashtable htget_Avg_Total_eff = new Hashtable();
            System.Data.DataTable dtget_Avg_Total_Eff = new System.Data.DataTable();

            if (User_Role_Id == "2")
            {
                htget_Avg_Total_eff.Add("@Trans", "GET_NEWLY_UPDATED_AVG_EFF_BY_USER_ID");
            }
            else
            {

                if (rbtn_Score_Production_Time.Checked == true)
                {
                    htget_Avg_Total_eff.Add("@Trans", "GET_NEWLY_UPDATED_AVG_EFF");
                }
                else if (rbtn_Score_Target_Wise.Checked == true)
                {

                    htget_Avg_Total_eff.Add("@Trans", "GET_NEWLY_TARGETED_UPDATED_AVG_EFF");
                }

            }
            htget_Avg_Total_eff.Add("@User_Id", userid);
            dtget_Avg_Total_Eff = dataaccess.ExecuteSP("Sp_Score_Board", htget_Avg_Total_eff);

            System.Data.DataTable dt_Final_Score1 = new System.Data.DataTable();

            //  var collection = from t1 in dt_Score2.AsEnumerable()
            //  join t2 in dtget_Avg_Total_Eff.AsEnumerable()
            //on t1["User_Id"] equals t2["User_Id"]
            //  into a
            //  from b in a.DefaultIfEmpty()

            var collection = from t1 in dt_Score2.AsEnumerable()
                             join t2 in dtget_Avg_Total_Eff.AsEnumerable()
                               on t1["User_Id"] equals t2["User_Id"]
                             select new
                             {
                                 User_Id = t1["User_Id"],
                                 User_Name = t1["User_Name"],
                                 DRN_Emp_Code = t1["DRN_Emp_Code"],
                                 Emp_Job_Role = t1["Emp_Job_Role"],
                                 Shift_Type_Name = t1["Shift_Type_Name"],
                                 Reporting_To_1 = t1["Reporting_To_1"],
                                 Reporting_To_2 = t1["Reporting_To_2"],
                                 Avg_Eff = t2["Avg_Eff"],
                                 D1 = t1["1"],
                                 D2 = t1["2"],
                                 D3 = t1["3"],
                                 D4 = t1["4"],
                                 D5 = t1["5"],
                                 D6 = t1["6"],
                                 D7 = t1["7"],
                                 D8 = t1["8"],
                                 D9 = t1["9"],
                                 D10 = t1["10"],
                                 D11 = t1["11"],
                                 D12 = t1["12"],
                                 D13 = t1["13"],
                                 D14 = t1["14"],
                                 D15 = t1["15"],
                                 D16 = t1["16"],
                                 D17 = t1["17"],
                                 D18 = t1["18"],
                                 D19 = t1["19"],
                                 D20 = t1["20"],
                                 D21 = t1["21"],
                                 D22 = t1["22"],
                                 D23 = t1["23"],
                                 D24 = t1["24"],
                                 D25 = t1["25"],
                                 D26 = t1["26"],
                                 D27 = t1["27"],
                                 D28 = t1["28"],
                                 D29 = t1["29"],
                                 D30 = t1["30"],
                                 D31 = t1["31"],
                             };
            System.Data.DataTable result = new System.Data.DataTable("Final_Data");
            result.Columns.Add("User_Id", typeof(string));
            result.Columns.Add("User_Name", typeof(string));
            result.Columns.Add("DRN_Emp_Code", typeof(string));
            result.Columns.Add("Emp_Job_Role", typeof(string));
            result.Columns.Add("Shift_Type_Name", typeof(string));
            result.Columns.Add("Reporting_To_1", typeof(string));
            result.Columns.Add("Reporting_To_2", typeof(string));
            result.Columns.Add("Avg_Eff", typeof(string));
            result.Columns.Add("D1", typeof(decimal));
            result.Columns.Add("D2", typeof(decimal));
            result.Columns.Add("D3", typeof(decimal));
            result.Columns.Add("D4", typeof(decimal));
            result.Columns.Add("D5", typeof(decimal));
            result.Columns.Add("D6", typeof(decimal));
            result.Columns.Add("D7", typeof(decimal));
            result.Columns.Add("D8", typeof(decimal));
            result.Columns.Add("D9", typeof(decimal));
            result.Columns.Add("D10", typeof(decimal));
            result.Columns.Add("D11", typeof(decimal));
            result.Columns.Add("D12", typeof(decimal));
            result.Columns.Add("D13", typeof(decimal));
            result.Columns.Add("D14", typeof(decimal));
            result.Columns.Add("D15", typeof(decimal));
            result.Columns.Add("D16", typeof(decimal));
            result.Columns.Add("D17", typeof(decimal));
            result.Columns.Add("D18", typeof(decimal));
            result.Columns.Add("D19", typeof(decimal));
            result.Columns.Add("D20", typeof(decimal));
            result.Columns.Add("D21", typeof(decimal));
            result.Columns.Add("D22", typeof(decimal));
            result.Columns.Add("D23", typeof(decimal));
            result.Columns.Add("D24", typeof(decimal));
            result.Columns.Add("D25", typeof(decimal));
            result.Columns.Add("D26", typeof(decimal));
            result.Columns.Add("D27", typeof(decimal));
            result.Columns.Add("D28", typeof(decimal));
            result.Columns.Add("D29", typeof(decimal));
            result.Columns.Add("D30", typeof(decimal));
            result.Columns.Add("D31", typeof(decimal));
            // System.Data.DataTable dt_Final_Score = new System.Data.DataTable();
            foreach (var item in collection)
            {
                result.Rows.Add(item.User_Id, item.User_Name, item.DRN_Emp_Code, item.Emp_Job_Role, item.Shift_Type_Name, item.Reporting_To_1, item.Reporting_To_2, item.Avg_Eff, item.D1, item.D2, item.D3, item.D4, item.D5, item.D6, item.D7, item.D8, item.D9, item.D10,
                    item.D11, item.D12, item.D13, item.D14, item.D15, item.D16, item.D17, item.D18, item.D19, item.D20, item.D21, item.D22, item.D23, item.D24, item.D25, item.D26, item.D27, item.D28, item.D29, item.D30, item.D31);
            }
            dt_Final_Score = result;

            //System.Data.DataTable dt_Final_Score = new System.Data.DataTable();
            dt_Final_Score = (System.Data.DataTable)result;


            if (dt_Final_Score.Rows.Count > 0)
            {
                //  Grid_Score.Rows.Clear();
                Grid_Score.DataSource = null;
                Grid_Score.ColumnCount = 39;

                Grid_Score.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Ebrima", 7.75F, FontStyle.Bold);
                Grid_Score.ColumnHeadersHeight = 40;


                //Grid_Score. = true;
                //Grid_Score.LinkBehavior = LinkBehavior.SystemDefault;
                //Grid_Score.LinkColor = Color.Blue;
                //Grid_Score.TrackVisitedState = true;
                //Grid_Score.UseColumnTextForLinkValue = true;

                Grid_Score.Columns[0].Name = "User_Id";
                Grid_Score.Columns[0].HeaderText = "User_Id";
                Grid_Score.Columns[0].DataPropertyName = "User_Id";
                Grid_Score.Columns[0].Width = 60;
                Grid_Score.Columns[0].Visible = false;


                Grid_Score.Columns[1].Name = "User_Name";
                Grid_Score.Columns[1].HeaderText = "EMPLOYEE NAME";
                Grid_Score.Columns[1].DataPropertyName = "User_Name";
                Grid_Score.Columns[1].Width = 120;



                Grid_Score.Columns[2].Name = "DRN_Emp_Code";
                Grid_Score.Columns[2].HeaderText = "EMP CODE";
                Grid_Score.Columns[2].DataPropertyName = "DRN_Emp_Code";
                Grid_Score.Columns[2].Width = 120;
                //  Grid_Score.Columns[2].Visible = false;


                Grid_Score.Columns[3].Name = "Emp_Job_Role";
                Grid_Score.Columns[3].HeaderText = "JOB ROLE";
                Grid_Score.Columns[3].DataPropertyName = "Emp_Job_Role";
                Grid_Score.Columns[3].Width = 80;
                //  Grid_Score.Columns[3].Visible = false;

                Grid_Score.Columns[4].Name = "Shift_Type_Name";
                Grid_Score.Columns[4].HeaderText = "SHIFT";
                Grid_Score.Columns[4].DataPropertyName = "Shift_Type_Name";
                Grid_Score.Columns[4].Width = 100;
                // Grid_Score.Columns[4].Visible = false;

                Grid_Score.Columns[5].Name = "Reporting_To_1";
                Grid_Score.Columns[5].HeaderText = "REPORTING TO 1";
                Grid_Score.Columns[5].DataPropertyName = "Reporting_To_1";
                Grid_Score.Columns[5].Width = 100;
                // Grid_Score.Columns[5].Visible = false;

                Grid_Score.Columns[6].Name = "Reporting_To_2";
                Grid_Score.Columns[6].HeaderText = "REPORTING TO 2";
                Grid_Score.Columns[6].DataPropertyName = "Reporting_To_2";
                Grid_Score.Columns[6].Width = 100;
                // Grid_Score.Columns[6].Visible = false;

                Grid_Score.Columns[7].Name = "Avg_Eff";
                Grid_Score.Columns[7].HeaderText = "AVG";
                Grid_Score.Columns[7].DataPropertyName = "Avg_Eff";
                Grid_Score.Columns[7].Width = 50;

                Grid_Score.Columns[8].Name = "1";
                Grid_Score.Columns[8].HeaderText = "D1";
                Grid_Score.Columns[8].DataPropertyName = "D1";
                Grid_Score.Columns[8].Width = 37;
                // Grid_Score.Columns[8].Visible = false;



                //DataGridViewLinkColumn link = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link);
                //link.Name = "1";
                //link.HeaderText = "D1";
                //link.DataPropertyName = "D1";
                //link.Width = 37;
                //link.DisplayIndex = 8;


                Grid_Score.Columns[9].Name = "2";
                Grid_Score.Columns[9].HeaderText = "D2";
                Grid_Score.Columns[9].DataPropertyName = "D2";
                Grid_Score.Columns[9].Width = 37;
                //   Grid_Score.Columns[9].Visible = false;

                //DataGridViewLinkColumn link_2 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_2);
                //link_2.Name = "2";
                //link_2.HeaderText = "D2";
                //link_2.DataPropertyName = "D2";
                //link_2.Width = 37;
                //link_2.DisplayIndex = 9;

                Grid_Score.Columns[10].Name = "3";
                Grid_Score.Columns[10].HeaderText = "D3";
                Grid_Score.Columns[10].DataPropertyName = "D3";
                Grid_Score.Columns[10].Width = 37;
                //   Grid_Score.Columns[10].Visible = false;

                //DataGridViewLinkColumn link_3 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_3);
                //link_3.Name = "3";
                //link_3.HeaderText = "D3";
                //link_3.DataPropertyName = "D3";
                //link_3.Width = 37;
                //link_3.DisplayIndex = 10;

                Grid_Score.Columns[11].Name = "4";
                Grid_Score.Columns[11].HeaderText = "D4";
                Grid_Score.Columns[11].DataPropertyName = "D4";
                Grid_Score.Columns[11].Width = 37;
                //    Grid_Score.Columns[11].Visible = false;

                //DataGridViewLinkColumn link_4 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_4);
                //link_4.Name = "4";
                //link_4.HeaderText = "D4";
                //link_4.DataPropertyName = "D4";
                //link_4.Width = 37;
                //link_4.DisplayIndex = 11;



                Grid_Score.Columns[12].Name = "5";
                Grid_Score.Columns[12].HeaderText = "D5";
                Grid_Score.Columns[12].DataPropertyName = "D5";
                Grid_Score.Columns[12].Width = 37;
                //  Grid_Score.Columns[12].Visible = false;

                //DataGridViewLinkColumn link_5 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_5);
                //link_5.Name = "5";
                //link_5.HeaderText = "D5";
                //link_5.DataPropertyName = "D5";
                //link_5.Width = 37;
                //link_5.DisplayIndex = 12;

                Grid_Score.Columns[13].Name = "6";
                Grid_Score.Columns[13].HeaderText = "D6";
                Grid_Score.Columns[13].DataPropertyName = "D6";
                Grid_Score.Columns[13].Width = 37;
                //  Grid_Score.Columns[13].Visible = false;

                //DataGridViewLinkColumn link_6 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_6);
                //link_6.Name = "6";
                //link_6.HeaderText = "D6";
                //link_6.DataPropertyName = "D6";
                //link_6.Width = 37;
                //link_6.DisplayIndex = 13;

                Grid_Score.Columns[14].Name = "7";
                Grid_Score.Columns[14].HeaderText = "D7";
                Grid_Score.Columns[14].DataPropertyName = "D7";
                Grid_Score.Columns[14].Width = 37;
                //  Grid_Score.Columns[14].Visible = false;

                //DataGridViewLinkColumn link_7 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_7);
                //link_7.Name = "7";
                //link_7.HeaderText = "D7";
                //link_7.DataPropertyName = "D7";
                //link_7.Width = 37;
                //link_7.DisplayIndex = 14;

                Grid_Score.Columns[15].Name = "8";
                Grid_Score.Columns[15].HeaderText = "D8";
                Grid_Score.Columns[15].DataPropertyName = "D8";
                Grid_Score.Columns[15].Width = 37;
                //  Grid_Score.Columns[15].Visible = false;

                //DataGridViewLinkColumn link_8 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_8);
                //link_8.Name = "8";
                //link_8.HeaderText = "D8";
                //link_8.DataPropertyName = "D8";
                //link_8.Width = 37;
                //link_8.DisplayIndex = 15;


                Grid_Score.Columns[16].Name = "9";
                Grid_Score.Columns[16].HeaderText = "D9";
                Grid_Score.Columns[16].DataPropertyName = "D9";
                Grid_Score.Columns[16].Width = 37;
                //   Grid_Score.Columns[16].Visible = false;

                //DataGridViewLinkColumn link_9 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_9);
                //link_9.Name = "9";
                //link_9.HeaderText = "D9";
                //link_9.DataPropertyName = "D9";
                //link_9.Width = 37;
                //link_9.DisplayIndex = 16;

                Grid_Score.Columns[17].Name = "10";
                Grid_Score.Columns[17].HeaderText = "D10";
                Grid_Score.Columns[17].DataPropertyName = "D10";
                Grid_Score.Columns[17].Width = 37;
                //  Grid_Score.Columns[17].Visible = false;

                //DataGridViewLinkColumn link_10 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_10);
                //link_10.Name = "10";
                //link_10.HeaderText = "D10";
                //link_10.DataPropertyName = "D10";
                //link_10.Width = 37;
                //link_10.DisplayIndex = 17;

                Grid_Score.Columns[18].Name = "11";
                Grid_Score.Columns[18].HeaderText = "D11";
                Grid_Score.Columns[18].DataPropertyName = "D11";
                Grid_Score.Columns[18].Width = 37;
                //   Grid_Score.Columns[18].Visible = false;

                //DataGridViewLinkColumn link_11 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_11);
                //link_11.Name = "11";
                //link_11.HeaderText = "D11";
                //link_11.DataPropertyName = "D11";
                //link_11.Width = 37;
                //link_11.DisplayIndex = 18;

                Grid_Score.Columns[19].Name = "12";
                Grid_Score.Columns[19].HeaderText = "D12";
                Grid_Score.Columns[19].DataPropertyName = "D12";
                Grid_Score.Columns[19].Width = 37;
                //   Grid_Score.Columns[19].Visible = false;

                //DataGridViewLinkColumn link_12 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_12);
                //link_12.Name = "12";
                //link_12.HeaderText = "D12";
                //link_12.DataPropertyName = "D12";
                //link_12.Width = 37;
                //link_12.DisplayIndex = 19;

                Grid_Score.Columns[20].Name = "13";
                Grid_Score.Columns[20].HeaderText = "D13";
                Grid_Score.Columns[20].DataPropertyName = "D13";
                Grid_Score.Columns[20].Width = 37;
                //  Grid_Score.Columns[20].Visible = false;

                //DataGridViewLinkColumn link_13 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_13);
                //link_13.Name = "13";
                //link_13.HeaderText = "D13";
                //link_13.DataPropertyName = "D13";
                //link_13.Width = 37;
                //link_13.DisplayIndex = 20;

                Grid_Score.Columns[21].Name = "14";
                Grid_Score.Columns[21].HeaderText = "D14";
                Grid_Score.Columns[21].DataPropertyName = "D14";
                Grid_Score.Columns[21].Width = 37;
                //   Grid_Score.Columns[21].Visible = false;

                //DataGridViewLinkColumn link_14 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_14);
                //link_14.Name = "14";
                //link_14.HeaderText = "D14";
                //link_14.DataPropertyName = "D14";
                //link_14.Width = 37;
                //link_14.DisplayIndex = 21;

                Grid_Score.Columns[22].Name = "15";
                Grid_Score.Columns[22].HeaderText = "D15";
                Grid_Score.Columns[22].DataPropertyName = "D15";
                Grid_Score.Columns[22].Width = 37;
                //  Grid_Score.Columns[22].Visible = false;

                //DataGridViewLinkColumn link_15 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_15);
                //link_15.Name = "15";
                //link_15.HeaderText = "D15";
                //link_15.DataPropertyName = "D15";
                //link_15.Width = 37;
                //link_15.DisplayIndex = 22;

                Grid_Score.Columns[23].Name = "16";
                Grid_Score.Columns[23].HeaderText = "D16";
                Grid_Score.Columns[23].DataPropertyName = "D16";
                Grid_Score.Columns[23].Width = 37;
                // Grid_Score.Columns[23].Visible = false;

                //DataGridViewLinkColumn link_16 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_16);
                //link_16.Name = "16";
                //link_16.HeaderText = "D16";
                //link_16.DataPropertyName = "D16";
                //link_16.Width = 37;
                //link_16.DisplayIndex = 23;

                Grid_Score.Columns[24].Name = "17";
                Grid_Score.Columns[24].HeaderText = "D17";
                Grid_Score.Columns[24].DataPropertyName = "D17";
                Grid_Score.Columns[24].Width = 37;
                //   Grid_Score.Columns[24].Visible = false;

                //DataGridViewLinkColumn link_17 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_17);
                //link_17.Name = "17";
                //link_17.HeaderText = "D17";
                //link_17.DataPropertyName = "D17";
                //link_17.Width = 37;
                //link_17.DisplayIndex = 24;

                Grid_Score.Columns[25].Name = "18";
                Grid_Score.Columns[25].HeaderText = "D18";
                Grid_Score.Columns[25].DataPropertyName = "D18";
                Grid_Score.Columns[25].Width = 37;
                //   Grid_Score.Columns[25].Visible = false;

                //DataGridViewLinkColumn link_18 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_18);
                //link_18.Name = "18";
                //link_18.HeaderText = "D18";
                //link_18.DataPropertyName = "D18";
                //link_18.Width = 37;
                //link_18.DisplayIndex = 25;

                Grid_Score.Columns[26].Name = "19";
                Grid_Score.Columns[26].HeaderText = "D19";
                Grid_Score.Columns[26].DataPropertyName = "D19";
                Grid_Score.Columns[26].Width = 37;
                //   Grid_Score.Columns[26].Visible = false;

                //DataGridViewLinkColumn link_19 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_19);
                //link_19.Name = "19";
                //link_19.HeaderText = "D19";
                //link_19.DataPropertyName = "D19";
                //link_19.Width = 37;
                //link_19.DisplayIndex = 26;

                Grid_Score.Columns[27].Name = "20";
                Grid_Score.Columns[27].HeaderText = "D20";
                Grid_Score.Columns[27].DataPropertyName = "D20";
                Grid_Score.Columns[27].Width = 37;
                //   Grid_Score.Columns[27].Visible = false;

                //DataGridViewLinkColumn link_20 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_20);
                //link_20.Name = "20";
                //link_20.HeaderText = "D20";
                //link_20.DataPropertyName = "D20";
                //link_20.Width = 37;
                //link_20.DisplayIndex = 27;

                Grid_Score.Columns[28].Name = "21";
                Grid_Score.Columns[28].HeaderText = "D21";
                Grid_Score.Columns[28].DataPropertyName = "D21";
                Grid_Score.Columns[28].Width = 37;
                //   Grid_Score.Columns[28].Visible = false;

                //DataGridViewLinkColumn link_21 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_21);
                //link_21.Name = "21";
                //link_21.HeaderText = "D21";
                //link_21.DataPropertyName = "D21";
                //link_21.Width = 37;
                //link_21.DisplayIndex = 28;

                Grid_Score.Columns[29].Name = "22";
                Grid_Score.Columns[29].HeaderText = "D22";
                Grid_Score.Columns[29].DataPropertyName = "D22";
                Grid_Score.Columns[29].Width = 37;
                // Grid_Score.Columns[29].Visible = false;

                //DataGridViewLinkColumn link_22 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_22);
                //link_22.Name = "22";
                //link_22.HeaderText = "D22";
                //link_22.DataPropertyName = "D22";
                //link_22.Width = 37;
                //link_22.DisplayIndex = 29;

                Grid_Score.Columns[30].Name = "23";
                Grid_Score.Columns[30].HeaderText = "D23";
                Grid_Score.Columns[30].DataPropertyName = "D23";
                Grid_Score.Columns[30].Width = 37;
                //   Grid_Score.Columns[30].Visible = false;

                //DataGridViewLinkColumn link_23 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_23);
                //link_23.Name = "23";
                //link_23.HeaderText = "D23";
                //link_23.DataPropertyName = "D23";
                //link_23.Width = 37;
                //link_23.DisplayIndex = 30;

                Grid_Score.Columns[31].Name = "24";
                Grid_Score.Columns[31].HeaderText = "D24";
                Grid_Score.Columns[31].DataPropertyName = "D24";
                Grid_Score.Columns[31].Width = 37;
                //   Grid_Score.Columns[31].Visible = false;

                //DataGridViewLinkColumn link_24 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_24);
                //link_24.Name = "24";
                //link_24.HeaderText = "D24";
                //link_24.DataPropertyName = "D24";
                //link_24.Width = 37;
                //link_24.DisplayIndex = 31;

                Grid_Score.Columns[32].Name = "25";
                Grid_Score.Columns[32].HeaderText = "D25";
                Grid_Score.Columns[32].DataPropertyName = "D25";
                Grid_Score.Columns[32].Width = 37;
                //  Grid_Score.Columns[32].Visible = false;

                //DataGridViewLinkColumn link_25 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_25);
                //link_25.Name = "25";
                //link_25.HeaderText = "D25";
                //link_25.DataPropertyName = "D25";
                //link_25.Width = 37;
                //link_25.DisplayIndex = 32;

                Grid_Score.Columns[33].Name = "26";
                Grid_Score.Columns[33].HeaderText = "D26";
                Grid_Score.Columns[33].DataPropertyName = "D26";
                Grid_Score.Columns[33].Width = 37;
                //   Grid_Score.Columns[33].Visible = false;

                //DataGridViewLinkColumn link_26 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_26);
                //link_26.Name = "26";
                //link_26.HeaderText = "D26";
                //link_26.DataPropertyName = "D26";
                //link_26.Width = 37;
                //link_26.DisplayIndex = 33;

                Grid_Score.Columns[34].Name = "27";
                Grid_Score.Columns[34].HeaderText = "D27";
                Grid_Score.Columns[34].DataPropertyName = "D27";
                Grid_Score.Columns[34].Width = 37;
                //  Grid_Score.Columns[34].Visible = false;

                //DataGridViewLinkColumn link_27 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_27);
                //link_27.Name = "27";
                //link_27.HeaderText = "D27";
                //link_27.DataPropertyName = "D27";
                //link_27.Width = 37;
                //link_27.DisplayIndex = 34;

                Grid_Score.Columns[35].Name = "28";
                Grid_Score.Columns[35].HeaderText = "D28";
                Grid_Score.Columns[35].DataPropertyName = "D28";
                Grid_Score.Columns[35].Width = 37;
                // Grid_Score.Columns[35].Visible = false;

                //DataGridViewLinkColumn link_28 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_28);
                //link_28.Name = "28";
                //link_28.HeaderText = "D28";
                //link_28.DataPropertyName = "D28";
                //link_28.Width = 37;
                //link_28.DisplayIndex = 35;

                Grid_Score.Columns[36].Name = "29";
                Grid_Score.Columns[36].HeaderText = "D29";
                Grid_Score.Columns[36].DataPropertyName = "D29";
                Grid_Score.Columns[36].Width = 37;
                //  Grid_Score.Columns[36].Visible = false;

                //DataGridViewLinkColumn link_29 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_29);
                //link_29.Name = "29";
                //link_29.HeaderText = "D29";
                //link_29.DataPropertyName = "D29";
                //link_29.Width = 37;
                //link_29.DisplayIndex = 36;

                Grid_Score.Columns[37].Name = "30";
                Grid_Score.Columns[37].HeaderText = "D30";
                Grid_Score.Columns[37].DataPropertyName = "D30";
                Grid_Score.Columns[37].Width = 37;
                //Grid_Score.Columns[37].Visible = false;

                //DataGridViewLinkColumn link_30 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_30);
                //link_30.Name = "30";
                //link_30.HeaderText = "D30";
                //link_30.DataPropertyName = "D30";
                //link_30.Width = 37;
                //link_30.DisplayIndex = 37;

                Grid_Score.Columns[38].Name = "31";
                Grid_Score.Columns[38].HeaderText = "D31";
                Grid_Score.Columns[38].DataPropertyName = "D31";
                Grid_Score.Columns[38].Width = 37;


                //DataGridViewLinkColumn link_31 = new DataGridViewLinkColumn();
                //Grid_Score.Columns.Add(link_31);
                //link_31.Name = "31";
                //link_31.HeaderText = "D31";
                //link_31.DataPropertyName = "D31";
                //link_31.Width = 37;
                //link_31.DisplayIndex = 38;




                Grid_Score.Visible = true;
                Grid_Score.DataSource = dt_Final_Score;

            }
            else
            {
                Grid_Score.DataSource = null;
                Grid_Score.Rows.Clear();
            }

            Hashtable htgetfirst_Last_Dates = new Hashtable();
            System.Data.DataTable dtgetfirst_last_Dates = new System.Data.DataTable();

            htgetfirst_Last_Dates.Add("@Trans", "GET_FIRST_LAST_DATE");
            htgetfirst_Last_Dates.Add("@Month", int.Parse(ddl_Month.SelectedValue.ToString()));
            htgetfirst_Last_Dates.Add("@Years", int.Parse(ddl_Year.SelectedValue.ToString()));
            dtgetfirst_last_Dates = dataaccess.ExecuteSP("Sp_Score_Board", htgetfirst_Last_Dates);

            Hashtable htdatecolumn = new Hashtable();

            System.Data.DataTable dtdatecolumn = new System.Data.DataTable();
            htdatecolumn.Add("@Trans", "GET_DATES");
            htdatecolumn.Add("@date_from1", dtgetfirst_last_Dates.Rows[0]["First_Date"].ToString());
            htdatecolumn.Add("@date_to1", dtgetfirst_last_Dates.Rows[0]["Last_Date"].ToString());
            dtdatecolumn = dataaccess.ExecuteSP("Sp_Score_Board", htdatecolumn);

            if (Grid_Score.Rows.Count > 0)
            {
                if (dtdatecolumn.Rows.Count > 0)
                {

                    for (int i = 0; i < dtdatecolumn.Rows.Count; i++)
                    {
                        int k = i + 8;

                        Grid_Score.Columns[k].HeaderText = dtdatecolumn.Rows[i][0].ToString();
                    }
                }
            }

        }

        private void New_Score_Board2()
        {


            DateTime d1 = DateTime.Now;
            d1 = d1.AddDays(-1);
            Hashtable ht_Score1 = new Hashtable();

            System.Data.DataTable dt_Score1 = new System.Data.DataTable();
            dt_Score1.Clear();


            Hashtable ht_Get_User_Orders = new Hashtable();
            System.Data.DataTable dt_Get_User_Orders = new System.Data.DataTable();


            if (User_Role_Id == "2")
            {

                ht_Get_User_Orders.Add("@Trans", "CALCUATE_MONTHLY_WISE_USER_EFFECINECY_BY_USER_ID");

            }
            else
            {
                ht_Get_User_Orders.Add("@Trans", "CALCUATE_MONTHLY_WISE_USER_EFFECINECY_FOR_SCORE_BOARD2");
            }

            ht_Get_User_Orders.Add("@User_Id", userid);
            ht_Get_User_Orders.Add("@Month", ddl_Month.SelectedValue.ToString()); //ddl_Month.SelectedValue.ToString()
            ht_Get_User_Orders.Add("@Years", ddl_Year.SelectedValue.ToString()); //ddl_Year.SelectedValue.ToString()
            dt_Get_User_Orders = dataaccess.ExecuteSP("Sp_Score_Board", ht_Get_User_Orders);

            int Emp_Job_role_Id;
            decimal Emp_Sal, Emp_cat_Value;
            int Emp_Sal_Cat_Id;
            int Eff_Order_Id, Eff_Client_Id, Eff_Order_Type_Abs_Id, Eff_Order_Task_Id, Eff_Order_Source_Type_Id, Eff_State_Id, Eff_County_Id, Eff_Sub_Process_Id, Eff_User_Id, Eff_Work_Type_Id;

            for (int i = 0; i < dt_Get_User_Orders.Rows.Count; i++)
            {

                // Get the Employee Sal CatGory_Id
                Eff_Order_Id = int.Parse(dt_Get_User_Orders.Rows[i]["Order_Id"].ToString());
                Emp_Job_role_Id = int.Parse(dt_Get_User_Orders.Rows[i]["Job_Role_Id"].ToString());
                Emp_Sal = decimal.Parse(dt_Get_User_Orders.Rows[i]["Salary"].ToString());
                Eff_Client_Id = int.Parse(dt_Get_User_Orders.Rows[i]["Client_Id"].ToString());
                Eff_Sub_Process_Id = int.Parse(dt_Get_User_Orders.Rows[i]["Sub_ProcessId"].ToString());
                Eff_State_Id = int.Parse(dt_Get_User_Orders.Rows[i]["State"].ToString());
                Eff_County_Id = int.Parse(dt_Get_User_Orders.Rows[i]["County"].ToString());
                Eff_Order_Task_Id = int.Parse(dt_Get_User_Orders.Rows[i]["Order_Status_Id"].ToString());
                Eff_Order_Type_Abs_Id = int.Parse(dt_Get_User_Orders.Rows[i]["OrderType_ABS_Id"].ToString());
                Eff_User_Id = int.Parse(dt_Get_User_Orders.Rows[i]["User_Id"].ToString());
                Eff_Work_Type_Id = int.Parse(dt_Get_User_Orders.Rows[i]["Work_Type"].ToString());

                if (Emp_Job_role_Id != 0 && Emp_Sal != 0)
                {

                    // Getting Emp Sal Cat ID
                    Hashtable htget_Category = new Hashtable();
                    System.Data.DataTable dtget_Category = new System.Data.DataTable();
                    if (Emp_Job_role_Id == 1)
                    {
                        htget_Category.Add("@Trans", "GET_CATEGORY_ID_FOR_SEARCHER");
                    }
                    else if (Emp_Job_role_Id == 2)
                    {

                        htget_Category.Add("@Trans", "GET_CATEGORY_ID_FOR_TYPER");
                    }
                    htget_Category.Add("@Salary", Emp_Sal);
                    htget_Category.Add("@Job_Role_Id", Emp_Job_role_Id);

                    dtget_Category = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Category);


                    if (dtget_Category.Rows.Count > 0)
                    {
                        Emp_Sal_Cat_Id = int.Parse(dtget_Category.Rows[0]["Category_ID"].ToString());
                        Emp_cat_Value = decimal.Parse(dtget_Category.Rows[0]["Category_Name"].ToString());
                    }
                    else
                    {

                        Emp_Sal_Cat_Id = 0;
                        Emp_cat_Value = 0;
                    }

                    //Hashtable htcheck_Order_Production = new Hashtable();
                    //System.Data.DataTable dtcheck_Order_Production = new System.Data.DataTable();

                    //if (Eff_Work_Type_Id == 1)
                    //{
                    //    htcheck_Order_Production.Add("@Trans", "CHECK_ORDER");
                    //}
                    //else if (Eff_Work_Type_Id == 2)
                    //{

                    //    htcheck_Order_Production.Add("@Trans", "CHECK_REWORK_ORDER");
                    //}
                    //else if (Eff_Work_Type_Id == 3)
                    //{

                    //    htcheck_Order_Production.Add("@Trans", "CHECK_SUPERQC_ORDER");
                    //}

                    //htcheck_Order_Production.Add("@Order_Id", Eff_Order_Id);
                    //htcheck_Order_Production.Add("@Order_Task_Id", Eff_Order_Task_Id);
                    //htcheck_Order_Production.Add("@User_Id", Eff_User_Id);
                    //dtcheck_Order_Production = dataaccess.ExecuteSP("Sp_Score_Board", htcheck_Order_Production);

                    //int Check_production;
                    //decimal Entered_User_Order_Eff;
                    //if (dtcheck_Order_Production.Rows.Count > 0)
                    //{
                    //    Check_production = int.Parse(dtcheck_Order_Production.Rows[0]["count"].ToString());
                    //    Entered_User_Order_Eff = decimal.Parse(dtcheck_Order_Production.Rows[0]["Order_User_Effeciency"].ToString());
                    //}
                    //else
                    //{
                    //    Check_production = 0;

                    //    Entered_User_Order_Eff = 0;

                    //}


                    // && Entered_User_Order_Eff==0

                    if (Emp_Sal_Cat_Id != 0 && Emp_cat_Value != 0)
                    {


                        // Check for the Search Task

                        //Check its Plant  or Technical For Searcher and Search qc

                        if (Eff_Order_Task_Id == 2 || Eff_Order_Task_Id == 3)
                        {
                            Hashtable htcheckplant_Technical = new Hashtable();
                            System.Data.DataTable dtcheckplant_Technical = new System.Data.DataTable();
                            htcheckplant_Technical.Add("@Trans", "GET_ORDER_SOURCE_TYPE_ID");
                            htcheckplant_Technical.Add("@State_Id", Eff_State_Id);
                            htcheckplant_Technical.Add("@County", Eff_County_Id);
                            dtcheckplant_Technical = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htcheckplant_Technical);

                            if (dtcheckplant_Technical.Rows.Count > 0)
                            {

                                Eff_Order_Source_Type_Id = int.Parse(dtcheckplant_Technical.Rows[0]["Order_Source_Type_ID"].ToString());

                            }
                            else
                            {
                                Eff_Order_Source_Type_Id = 0;

                            }

                            // If its an Technical or Plant

                            if (Eff_Order_Source_Type_Id != 0)
                            {
                                //Get the Allocated Count in the Efffecincy Matrix
                                Hashtable htget_Effecicy_Value = new Hashtable();
                                System.Data.DataTable dtget_Effeciency_Value = new System.Data.DataTable();

                                htget_Effecicy_Value.Add("@Trans", "GET_ALLOCTAED_ORDER_COUNT");
                                htget_Effecicy_Value.Add("@Client_Id", Eff_Client_Id);
                                htget_Effecicy_Value.Add("@Order_Status_Id", Eff_Order_Task_Id);
                                htget_Effecicy_Value.Add("@Order_Type_Abs_Id", Eff_Order_Type_Abs_Id);
                                htget_Effecicy_Value.Add("@Order_Source_Type_Id", Eff_Order_Source_Type_Id);
                                htget_Effecicy_Value.Add("@Category_Id", Emp_Sal_Cat_Id);
                                dtget_Effeciency_Value = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Effecicy_Value);

                                if (dtget_Effeciency_Value.Rows.Count > 0)
                                {
                                    Emp_Eff_Allocated_Order_Count = Convert.ToDecimal(dtget_Effeciency_Value.Rows[0]["Allocated_count"].ToString());
                                    Eff_Order_User_Effecncy = (1 / Emp_Eff_Allocated_Order_Count) * 100;

                                }
                                else
                                {

                                    htget_Effecicy_Value.Clear();
                                    dtget_Effeciency_Value.Clear();

                                    htget_Effecicy_Value.Add("@Trans", "GET_ALLOCTAED_ORDER_COUNT");
                                    htget_Effecicy_Value.Add("@Client_Id", Eff_Client_Id);
                                    htget_Effecicy_Value.Add("@Order_Status_Id", Eff_Order_Task_Id);
                                    htget_Effecicy_Value.Add("@Order_Type_Abs_Id", Eff_Order_Type_Abs_Id);
                                    htget_Effecicy_Value.Add("@Order_Source_Type_Id", 4);
                                    htget_Effecicy_Value.Add("@Category_Id", Emp_Sal_Cat_Id);
                                    dtget_Effeciency_Value = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Effecicy_Value);


                                }


                                if (dtget_Effeciency_Value.Rows.Count > 0)
                                {
                                    Emp_Eff_Allocated_Order_Count = Convert.ToDecimal(dtget_Effeciency_Value.Rows[0]["Allocated_count"].ToString());

                                    //    Eff_Order_User_Effecncy = (1 / Emp_Eff_Allocated_Order_Count) * 100;

                                }
                                else
                                {

                                    Emp_Eff_Allocated_Order_Count = 0;
                                }






                            }
                            else if (Emp_Eff_Allocated_Order_Count != 0 && Eff_Order_Source_Type_Id != 0)
                            {
                                //Get the Allocated Count in the Efffecincy Matrix for Online
                                Hashtable htget_Effecicy_Value = new Hashtable();
                                System.Data.DataTable dtget_Effeciency_Value = new System.Data.DataTable();

                                htget_Effecicy_Value.Add("@Trans", "GET_ALLOCTAED_ORDER_COUNT");
                                htget_Effecicy_Value.Add("@Client_Id", Eff_Client_Id);
                                htget_Effecicy_Value.Add("@Order_Status_Id", Eff_Order_Task_Id);
                                htget_Effecicy_Value.Add("@Order_Type_Abs_Id", Eff_Order_Type_Abs_Id);
                                htget_Effecicy_Value.Add("@Order_Source_Type_Id", 4);
                                htget_Effecicy_Value.Add("@Category_Id", Emp_Sal_Cat_Id);
                                dtget_Effeciency_Value = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Effecicy_Value);

                                if (dtget_Effeciency_Value.Rows.Count > 0)
                                {
                                    Emp_Eff_Allocated_Order_Count = Convert.ToDecimal(dtget_Effeciency_Value.Rows[0]["Allocated_count"].ToString());

                                    // Eff_Order_User_Effecncy = (1 / Emp_Eff_Allocated_Order_Count) * 100;

                                }
                                else
                                {



                                    htget_Effecicy_Value.Clear();
                                    dtget_Effeciency_Value.Clear();

                                    htget_Effecicy_Value.Add("@Trans", "GET_ALLOCTAED_ORDER_COUNT");
                                    htget_Effecicy_Value.Add("@Client_Id", Eff_Client_Id);
                                    htget_Effecicy_Value.Add("@Order_Status_Id", Eff_Order_Task_Id);
                                    htget_Effecicy_Value.Add("@Order_Type_Abs_Id", Eff_Order_Type_Abs_Id);
                                    htget_Effecicy_Value.Add("@Order_Source_Type_Id", 4);
                                    htget_Effecicy_Value.Add("@Category_Id", Emp_Sal_Cat_Id);
                                    dtget_Effeciency_Value = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Effecicy_Value);


                                }
                                if (dtget_Effeciency_Value.Rows.Count > 0)
                                {
                                    Emp_Eff_Allocated_Order_Count = Convert.ToDecimal(dtget_Effeciency_Value.Rows[0]["Allocated_count"].ToString());

                                    //Eff_Order_User_Effecncy = (1 / Emp_Eff_Allocated_Order_Count) * 100;

                                }
                                else
                                {

                                    Emp_Eff_Allocated_Order_Count = 0;
                                }


                            }
                            else
                            {
                                Hashtable htget_Effecicy_Value = new Hashtable();
                                System.Data.DataTable dtget_Effeciency_Value = new System.Data.DataTable();

                                htget_Effecicy_Value.Add("@Trans", "GET_ALLOCTAED_ORDER_COUNT");
                                htget_Effecicy_Value.Add("@Client_Id", Eff_Client_Id);
                                htget_Effecicy_Value.Add("@Order_Status_Id", Eff_Order_Task_Id);
                                htget_Effecicy_Value.Add("@Order_Type_Abs_Id", Eff_Order_Type_Abs_Id);
                                htget_Effecicy_Value.Add("@Order_Source_Type_Id", 4);// This is nothing But Genral Option In Effeciency
                                htget_Effecicy_Value.Add("@Category_Id", Emp_Sal_Cat_Id);
                                dtget_Effeciency_Value = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Effecicy_Value);

                                if (dtget_Effeciency_Value.Rows.Count > 0)
                                {
                                    Emp_Eff_Allocated_Order_Count = Convert.ToDecimal(dtget_Effeciency_Value.Rows[0]["Allocated_count"].ToString());

                                    // Eff_Order_User_Effecncy = (1 / Emp_Eff_Allocated_Order_Count) * 100;
                                }
                                else
                                {

                                    Emp_Eff_Allocated_Order_Count = 0;
                                    Eff_Order_User_Effecncy = 0;
                                }

                            }




                        }
                        else if (Eff_Order_Task_Id == 4 || Eff_Order_Task_Id == 7)
                        {

                            // this is for Deed Chain Order and Typing 


                            Hashtable htcheck_Deed_Chain = new Hashtable();
                            System.Data.DataTable dtcheck_Deed_Chain = new System.Data.DataTable();
                            htcheck_Deed_Chain.Add("@Trans", "GET_ORDER_SOURCE_TYPE_ID_BY_SUB_CLIENT");
                            htcheck_Deed_Chain.Add("@Subprocess_Id", Eff_Sub_Process_Id);
                            dtcheck_Deed_Chain = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htcheck_Deed_Chain);

                            if (dtcheck_Deed_Chain.Rows.Count > 0)
                            {

                                Eff_Order_Source_Type_Id = int.Parse(dtcheck_Deed_Chain.Rows[0]["Order_Source_Type_ID"].ToString());

                            }
                            else
                            {
                                Eff_Order_Source_Type_Id = 0;

                            }

                            if (Eff_Order_Source_Type_Id != 0)
                            {

                                Hashtable htget_Effecicy_Value = new Hashtable();
                                System.Data.DataTable dtget_Effeciency_Value = new System.Data.DataTable();

                                htget_Effecicy_Value.Add("@Trans", "GET_ALLOCTAED_ORDER_COUNT");
                                htget_Effecicy_Value.Add("@Client_Id", Eff_Client_Id);
                                htget_Effecicy_Value.Add("@Order_Status_Id", Eff_Order_Task_Id);
                                htget_Effecicy_Value.Add("@Order_Type_Abs_Id", Eff_Order_Type_Abs_Id);
                                htget_Effecicy_Value.Add("@Order_Source_Type_Id", Eff_Order_Source_Type_Id);
                                htget_Effecicy_Value.Add("@Category_Id", Emp_Sal_Cat_Id);
                                dtget_Effeciency_Value = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Effecicy_Value);

                                if (dtget_Effeciency_Value.Rows.Count > 0)
                                {
                                    Emp_Eff_Allocated_Order_Count = Convert.ToDecimal(dtget_Effeciency_Value.Rows[0]["Allocated_count"].ToString());

                                }
                                else
                                {


                                    htget_Effecicy_Value.Clear();
                                    dtget_Effeciency_Value.Clear();

                                    htget_Effecicy_Value.Add("@Trans", "GET_ALLOCTAED_ORDER_COUNT");
                                    htget_Effecicy_Value.Add("@Client_Id", Eff_Client_Id);
                                    htget_Effecicy_Value.Add("@Order_Status_Id", Eff_Order_Task_Id);
                                    htget_Effecicy_Value.Add("@Order_Type_Abs_Id", Eff_Order_Type_Abs_Id);
                                    htget_Effecicy_Value.Add("@Order_Source_Type_Id", 4);
                                    htget_Effecicy_Value.Add("@Category_Id", Emp_Sal_Cat_Id);
                                    dtget_Effeciency_Value = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Effecicy_Value);

                                }

                                // Calculate eff

                                if (dtget_Effeciency_Value.Rows.Count > 0)
                                {
                                    Emp_Eff_Allocated_Order_Count = Convert.ToDecimal(dtget_Effeciency_Value.Rows[0]["Allocated_count"].ToString());

                                    //  Eff_Order_User_Effecncy = (1 / Emp_Eff_Allocated_Order_Count) * 100;


                                }
                                else
                                {

                                    Emp_Eff_Allocated_Order_Count = 0;
                                }


                            }
                            else if (Eff_Order_Source_Type_Id != 0 && Emp_Eff_Allocated_Order_Count != 0)
                            {

                                //Get the Allocated Count in the Efffecincy Matrix for Online
                                Hashtable htget_Effecicy_Value = new Hashtable();
                                System.Data.DataTable dtget_Effeciency_Value = new System.Data.DataTable();

                                htget_Effecicy_Value.Add("@Trans", "GET_ALLOCTAED_ORDER_COUNT");
                                htget_Effecicy_Value.Add("@Client_Id", Eff_Client_Id);
                                htget_Effecicy_Value.Add("@Order_Status_Id", Eff_Order_Task_Id);
                                htget_Effecicy_Value.Add("@Order_Type_Abs_Id", Eff_Order_Type_Abs_Id);
                                htget_Effecicy_Value.Add("@Order_Source_Type_Id", 4);// This is nothing But Genral Option In Effeciency
                                htget_Effecicy_Value.Add("@Category_Id", Emp_Sal_Cat_Id);
                                dtget_Effeciency_Value = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Effecicy_Value);

                                if (dtget_Effeciency_Value.Rows.Count > 0)
                                {
                                    Emp_Eff_Allocated_Order_Count = Convert.ToDecimal(dtget_Effeciency_Value.Rows[0]["Allocated_count"].ToString());

                                }
                                else
                                {

                                    Emp_Eff_Allocated_Order_Count = 0;
                                }

                                //  Eff_Order_User_Effecncy = (1 / Emp_Eff_Allocated_Order_Count) * 100;



                            }

                            else
                            {
                                Hashtable htget_Effecicy_Value = new Hashtable();
                                System.Data.DataTable dtget_Effeciency_Value = new System.Data.DataTable();

                                htget_Effecicy_Value.Add("@Trans", "GET_ALLOCTAED_ORDER_COUNT");
                                htget_Effecicy_Value.Add("@Client_Id", Eff_Client_Id);
                                htget_Effecicy_Value.Add("@Order_Status_Id", Eff_Order_Task_Id);
                                htget_Effecicy_Value.Add("@Order_Type_Abs_Id", Eff_Order_Type_Abs_Id);
                                htget_Effecicy_Value.Add("@Order_Source_Type_Id", 4);// This is nothing But Genral Option In Effeciency
                                htget_Effecicy_Value.Add("@Category_Id", Emp_Sal_Cat_Id);
                                dtget_Effeciency_Value = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Effecicy_Value);

                                if (dtget_Effeciency_Value.Rows.Count > 0)
                                {
                                    Emp_Eff_Allocated_Order_Count = Convert.ToDecimal(dtget_Effeciency_Value.Rows[0]["Allocated_count"].ToString());

                                    // Eff_Order_User_Effecncy = (1 / Emp_Eff_Allocated_Order_Count) * 100;
                                }
                                else
                                {

                                    Emp_Eff_Allocated_Order_Count = 0;
                                    Eff_Order_User_Effecncy = 0;
                                }

                            }





                        }
                        else  // this is for not Search and Typing Qc
                        {


                            Hashtable htget_Effecicy_Value = new Hashtable();
                            System.Data.DataTable dtget_Effeciency_Value = new System.Data.DataTable();

                            htget_Effecicy_Value.Add("@Trans", "GET_ALLOCTAED_ORDER_COUNT");
                            htget_Effecicy_Value.Add("@Client_Id", Eff_Client_Id);
                            htget_Effecicy_Value.Add("@Order_Status_Id", Eff_Order_Task_Id);
                            htget_Effecicy_Value.Add("@Order_Type_Abs_Id", Eff_Order_Type_Abs_Id);
                            htget_Effecicy_Value.Add("@Order_Source_Type_Id", 4);// This is nothing But Genral Option In Effeciency
                            htget_Effecicy_Value.Add("@Category_Id", Emp_Sal_Cat_Id);
                            dtget_Effeciency_Value = dataaccess.ExecuteSP("Sp_Emp_Order_Wise_User_Efficiency", htget_Effecicy_Value);

                            if (dtget_Effeciency_Value.Rows.Count > 0)
                            {
                                Emp_Eff_Allocated_Order_Count = Convert.ToDecimal(dtget_Effeciency_Value.Rows[0]["Allocated_count"].ToString());

                                // Eff_Order_User_Effecncy = (1 / Emp_Eff_Allocated_Order_Count) * 100;
                            }
                            else
                            {

                                Emp_Eff_Allocated_Order_Count = 0;
                                Eff_Order_User_Effecncy = 0;
                            }




                        }




                        // here it is inserting for Production Table


                        //decimal e1 = Convert.ToDecimal(Entered_User_Order_Eff.ToString());


                        //decimal ee2 = Convert.ToDecimal(Eff_Order_User_Effecncy.ToString());

                        //if (ee2 != 0)
                        //{
                        //    e2 = Convert.ToDecimal(ee2.ToString("#.##"));
                        //}

                        //if (Eff_Order_User_Effecncy != 0 && e1 != e2)
                        //{

                        //    Hashtable htcheck_Order_Production1 = new Hashtable();
                        //    System.Data.DataTable dtcheck_Order_Production1 = new System.Data.DataTable();

                        //    if (Eff_Work_Type_Id == 1)
                        //    {
                        //        htcheck_Order_Production1.Add("@Trans", "CHECK_ORDER");
                        //    }
                        //    else if (Eff_Work_Type_Id == 2)
                        //    {

                        //        htcheck_Order_Production1.Add("@Trans", "CHECK_REWORK_ORDER");
                        //    }
                        //    else if (Eff_Work_Type_Id == 3)
                        //    {

                        //        htcheck_Order_Production1.Add("@Trans", "CHECK_SUPERQC_ORDER");
                        //    }

                        //    htcheck_Order_Production1.Add("@Order_Id", Eff_Order_Id);
                        //    htcheck_Order_Production1.Add("@Order_Task_Id", Eff_Order_Task_Id);
                        //    htcheck_Order_Production1.Add("@User_Id", Eff_User_Id);
                        //    dtcheck_Order_Production1 = dataaccess.ExecuteSP("Sp_Score_Board", htcheck_Order_Production1);
                        //    int Check_production1;
                        //    decimal Entered_User_Order_Eff1;
                        //    if (dtcheck_Order_Production1.Rows.Count > 0)
                        //    {
                        //        Check_production1 = int.Parse(dtcheck_Order_Production1.Rows[0]["count"].ToString());
                        //        Entered_User_Order_Eff1 = decimal.Parse(dtcheck_Order_Production1.Rows[0]["Order_User_Effeciency"].ToString());
                        //    }
                        //    else
                        //    {
                        //        Check_production1 = 0;

                        //        Entered_User_Order_Eff1 = 0;

                        //    }
                        //    if (Check_production1 > 0)//Entered_User_Order_Eff1 == 0 && 
                        //    {


                        //        Hashtable htinsert_Production_Eff = new Hashtable();
                        //        System.Data.DataTable dtinsert_Production_Eff = new System.Data.DataTable();

                        //        if (Eff_Work_Type_Id == 1)
                        //        {
                        //            htinsert_Production_Eff.Add("@Trans", "UPDATE_USER_ORDER_EFF");
                        //        }
                        //        else if (Eff_Work_Type_Id == 2)
                        //        {

                        //            htinsert_Production_Eff.Add("@Trans", "UPDATE_USER_REWORK_ORDER_EFF");
                        //        }
                        //        else if (Eff_Work_Type_Id == 3)
                        //        {

                        //            htinsert_Production_Eff.Add("@Trans", "UPDATE_USER_SUPER_QC_ORDER_EFF");
                        //        }

                        //        htinsert_Production_Eff.Add("@Order_User_Effeciency", Eff_Order_User_Effecncy);
                        //        htinsert_Production_Eff.Add("@Order_Id", Eff_Order_Id);
                        //        htinsert_Production_Eff.Add("@Order_Task_Id", Eff_Order_Task_Id);
                        //        htinsert_Production_Eff.Add("@User_Id", Eff_User_Id);
                        //        dtinsert_Production_Eff = dataaccess.ExecuteSP("Sp_Score_Board", htinsert_Production_Eff);







                        //    }


                        //}

                    }

                }


            }


            if (User_Role_Id == "2")
            {
                ht_Score1.Add("@Trans", "GET_MONTHLY_WISE_USER_EFFECINECY_BY_USER_ID");

            }

            else
            {
                ht_Score1.Add("@Trans", "GET_MONTHLY_WISE_USER_EFFECINECY");
            }


            ht_Score1.Add("@User_Id", userid);
            ht_Score1.Add("@Month", ddl_Month.SelectedValue.ToString());
            ht_Score1.Add("@Years", ddl_Year.SelectedValue.ToString());

            dt_Score1 = dataaccess.ExecuteSP("Sp_Score_Board", ht_Score1);



            Hashtable ht_Score = new Hashtable();

            System.Data.DataTable dt_Score = new System.Data.DataTable();
            System.Data.DataTable dt_Score2 = new System.Data.DataTable();
            dt_Score2.Clear();


            if (User_Role_Id == "2")
            {

                ht_Score.Add("@Trans", "GET_USER_ORDER_EFFECINECY_USER_ID_WISE");
            }
            else
            {
                ht_Score.Add("@Trans", "GET_USER_ORDER_EFFECINECY");

            }

            ht_Score.Add("@User_Id", userid);
            dt_Score2 = dataaccess.ExecuteSP("Sp_Score_Board", ht_Score);



            Hashtable htget_Avg_Total_eff = new Hashtable();
            System.Data.DataTable dtget_Avg_Total_Eff = new System.Data.DataTable();



            if (User_Role_Id == "2")
            {

                htget_Avg_Total_eff.Add("@Trans", "GET_SUM_AND_AVARAGE_EFF_USER_ID");
            }
            else
            {
                htget_Avg_Total_eff.Add("@Trans", "GET_SUM_AND_AVARAGE_EFF");

            }
            htget_Avg_Total_eff.Add("@User_Id", userid);
            dtget_Avg_Total_Eff = dataaccess.ExecuteSP("Sp_Score_Board", htget_Avg_Total_eff);




            System.Data.DataTable dt_Final_Score1 = new System.Data.DataTable();



            //  var collection = from t1 in dt_Score2.AsEnumerable()
            //  join t2 in dtget_Avg_Total_Eff.AsEnumerable()
            //on t1["User_Id"] equals t2["User_Id"]
            //  into a
            //  from b in a.DefaultIfEmpty()


            var collection = from t1 in dt_Score2.AsEnumerable()
                             join t2 in dtget_Avg_Total_Eff.AsEnumerable()
                               on t1["User_Id"] equals t2["User_Id"]
                             select new
                             {
                                 User_Id = t1["User_Id"],
                                 User_Name = t1["User_Name"],
                                 Grand_Eff = t2["Grand_Eff"],
                                 Avg_Eff = t2["Avg_Eff"],
                                 D1 = t1["1"],
                                 D2 = t1["2"],
                                 D3 = t1["3"],
                                 D4 = t1["4"],
                                 D5 = t1["5"],
                                 D6 = t1["6"],
                                 D7 = t1["7"],
                                 D8 = t1["8"],
                                 D9 = t1["9"],
                                 D10 = t1["10"],
                                 D11 = t1["11"],
                                 D12 = t1["12"],
                                 D13 = t1["13"],
                                 D14 = t1["14"],
                                 D15 = t1["15"],
                                 D16 = t1["16"],
                                 D17 = t1["17"],
                                 D18 = t1["18"],
                                 D19 = t1["19"],
                                 D20 = t1["20"],
                                 D21 = t1["21"],
                                 D22 = t1["22"],
                                 D23 = t1["23"],
                                 D24 = t1["24"],
                                 D25 = t1["25"],
                                 D26 = t1["26"],
                                 D27 = t1["27"],
                                 D28 = t1["28"],
                                 D29 = t1["29"],
                                 D30 = t1["30"],
                                 D31 = t1["31"],
                             };
            System.Data.DataTable result = new System.Data.DataTable("Final_Data");
            result.Columns.Add("User_Id", typeof(string));
            result.Columns.Add("User_Name", typeof(string));
            result.Columns.Add("Grand_Eff", typeof(string));
            result.Columns.Add("Avg_Eff", typeof(string));
            result.Columns.Add("D1", typeof(decimal));
            result.Columns.Add("D2", typeof(decimal));
            result.Columns.Add("D3", typeof(decimal));
            result.Columns.Add("D4", typeof(decimal));
            result.Columns.Add("D5", typeof(decimal));
            result.Columns.Add("D6", typeof(decimal));
            result.Columns.Add("D7", typeof(decimal));
            result.Columns.Add("D8", typeof(decimal));
            result.Columns.Add("D9", typeof(decimal));
            result.Columns.Add("D10", typeof(decimal));
            result.Columns.Add("D11", typeof(decimal));
            result.Columns.Add("D12", typeof(decimal));
            result.Columns.Add("D13", typeof(decimal));
            result.Columns.Add("D14", typeof(decimal));
            result.Columns.Add("D15", typeof(decimal));
            result.Columns.Add("D16", typeof(decimal));
            result.Columns.Add("D17", typeof(decimal));
            result.Columns.Add("D18", typeof(decimal));
            result.Columns.Add("D19", typeof(decimal));
            result.Columns.Add("D20", typeof(decimal));
            result.Columns.Add("D21", typeof(decimal));
            result.Columns.Add("D22", typeof(decimal));
            result.Columns.Add("D23", typeof(decimal));
            result.Columns.Add("D24", typeof(decimal));
            result.Columns.Add("D25", typeof(decimal));
            result.Columns.Add("D26", typeof(decimal));
            result.Columns.Add("D27", typeof(decimal));
            result.Columns.Add("D28", typeof(decimal));
            result.Columns.Add("D29", typeof(decimal));
            result.Columns.Add("D30", typeof(decimal));
            result.Columns.Add("D31", typeof(decimal));
            // System.Data.DataTable dt_Final_Score = new System.Data.DataTable();
            foreach (var item in collection)
            {
                result.Rows.Add(item.User_Id, item.User_Name, item.Grand_Eff, item.Avg_Eff, item.D1, item.D2, item.D3, item.D4, item.D5, item.D6, item.D7, item.D8, item.D9, item.D10,
                    item.D11, item.D12, item.D13, item.D14, item.D15, item.D16, item.D17, item.D18, item.D19, item.D20, item.D21, item.D22, item.D23, item.D24, item.D25, item.D26, item.D27, item.D28, item.D29, item.D30, item.D31);

            }


            dt_Final_Score = result;

            //System.Data.DataTable dt_Final_Score = new System.Data.DataTable();

            dt_Final_Score = (System.Data.DataTable)result;


            if (dt_Final_Score.Rows.Count > 0)
            {
                //  Grid_Score.Rows.Clear();
                Grid_Score.DataSource = null;


                Grid_Score.ColumnCount = 35;

                Grid_Score.Columns[0].Name = "User_Id";
                Grid_Score.Columns[0].HeaderText = "User_Id";
                Grid_Score.Columns[0].DataPropertyName = "User_Id";
                Grid_Score.Columns[0].Width = 60;
                Grid_Score.Columns[0].Visible = false;


                Grid_Score.Columns[1].Name = "User_Name";
                Grid_Score.Columns[1].HeaderText = "Employee name";
                Grid_Score.Columns[1].DataPropertyName = "User_Name";
                Grid_Score.Columns[1].Width = 120;

                Grid_Score.Columns[2].Name = "Grand_Eff";
                Grid_Score.Columns[2].HeaderText = "G.T";
                Grid_Score.Columns[2].DataPropertyName = "Grand_Eff";
                Grid_Score.Columns[2].Width = 100;
                Grid_Score.Columns[2].Visible = false;

                Grid_Score.Columns[3].Name = "Avg_Eff";
                Grid_Score.Columns[3].HeaderText = "AVG";
                Grid_Score.Columns[3].DataPropertyName = "Avg_Eff";
                Grid_Score.Columns[3].Width = 50;



                Grid_Score.Columns[4].Name = "1";
                Grid_Score.Columns[4].HeaderText = "D1";
                Grid_Score.Columns[4].DataPropertyName = "D1";
                Grid_Score.Columns[4].Width = 37;




                Grid_Score.Columns[5].Name = "2";
                Grid_Score.Columns[5].HeaderText = "D2";
                Grid_Score.Columns[5].DataPropertyName = "D2";
                Grid_Score.Columns[5].Width = 37;

                Grid_Score.Columns[6].Name = "3";
                Grid_Score.Columns[6].HeaderText = "D3";
                Grid_Score.Columns[6].DataPropertyName = "D3";
                Grid_Score.Columns[6].Width = 37;

                Grid_Score.Columns[7].Name = "4";
                Grid_Score.Columns[7].HeaderText = "D4";
                Grid_Score.Columns[7].DataPropertyName = "D4";
                Grid_Score.Columns[7].Width = 37;

                Grid_Score.Columns[8].Name = "5";
                Grid_Score.Columns[8].HeaderText = "D5";
                Grid_Score.Columns[8].DataPropertyName = "D5";
                Grid_Score.Columns[8].Width = 37;

                Grid_Score.Columns[9].Name = "6";
                Grid_Score.Columns[9].HeaderText = "D6";
                Grid_Score.Columns[9].DataPropertyName = "D6";
                Grid_Score.Columns[9].Width = 37;

                Grid_Score.Columns[10].Name = "7";
                Grid_Score.Columns[10].HeaderText = "D7";
                Grid_Score.Columns[10].DataPropertyName = "D7";
                Grid_Score.Columns[10].Width = 37;

                Grid_Score.Columns[11].Name = "8";
                Grid_Score.Columns[11].HeaderText = "D8";
                Grid_Score.Columns[11].DataPropertyName = "D8";
                Grid_Score.Columns[11].Width = 37;

                Grid_Score.Columns[12].Name = "9";
                Grid_Score.Columns[12].HeaderText = "D9";
                Grid_Score.Columns[12].DataPropertyName = "D9";
                Grid_Score.Columns[12].Width = 37;

                Grid_Score.Columns[13].Name = "10";
                Grid_Score.Columns[13].HeaderText = "D10";
                Grid_Score.Columns[13].DataPropertyName = "D10";
                Grid_Score.Columns[13].Width = 37;

                Grid_Score.Columns[14].Name = "11";
                Grid_Score.Columns[14].HeaderText = "D11";
                Grid_Score.Columns[14].DataPropertyName = "D11";
                Grid_Score.Columns[14].Width = 37;

                Grid_Score.Columns[15].Name = "12";
                Grid_Score.Columns[15].HeaderText = "D12";
                Grid_Score.Columns[15].DataPropertyName = "D12";
                Grid_Score.Columns[15].Width = 37;

                Grid_Score.Columns[16].Name = "13";
                Grid_Score.Columns[16].HeaderText = "D13";
                Grid_Score.Columns[16].DataPropertyName = "D13";
                Grid_Score.Columns[16].Width = 37;

                Grid_Score.Columns[17].Name = "14";
                Grid_Score.Columns[17].HeaderText = "D14";
                Grid_Score.Columns[17].DataPropertyName = "D14";
                Grid_Score.Columns[17].Width = 37;

                Grid_Score.Columns[18].Name = "15";
                Grid_Score.Columns[18].HeaderText = "D15";
                Grid_Score.Columns[18].DataPropertyName = "D15";
                Grid_Score.Columns[18].Width = 37;

                Grid_Score.Columns[19].Name = "16";
                Grid_Score.Columns[19].HeaderText = "D16";
                Grid_Score.Columns[19].DataPropertyName = "D16";
                Grid_Score.Columns[19].Width = 37;

                Grid_Score.Columns[20].Name = "17";
                Grid_Score.Columns[20].HeaderText = "D17";
                Grid_Score.Columns[20].DataPropertyName = "D17";
                Grid_Score.Columns[20].Width = 37;

                Grid_Score.Columns[21].Name = "18";
                Grid_Score.Columns[21].HeaderText = "D18";
                Grid_Score.Columns[21].DataPropertyName = "D18";
                Grid_Score.Columns[21].Width = 37;

                Grid_Score.Columns[22].Name = "19";
                Grid_Score.Columns[22].HeaderText = "D19";
                Grid_Score.Columns[22].DataPropertyName = "D19";
                Grid_Score.Columns[22].Width = 37;

                Grid_Score.Columns[23].Name = "20";
                Grid_Score.Columns[23].HeaderText = "D20";
                Grid_Score.Columns[23].DataPropertyName = "D20";
                Grid_Score.Columns[23].Width = 37;

                Grid_Score.Columns[24].Name = "21";
                Grid_Score.Columns[24].HeaderText = "D21";
                Grid_Score.Columns[24].DataPropertyName = "D21";
                Grid_Score.Columns[24].Width = 37;

                Grid_Score.Columns[25].Name = "22";
                Grid_Score.Columns[25].HeaderText = "D22";
                Grid_Score.Columns[25].DataPropertyName = "D22";
                Grid_Score.Columns[25].Width = 37;

                Grid_Score.Columns[26].Name = "23";
                Grid_Score.Columns[26].HeaderText = "D23";
                Grid_Score.Columns[26].DataPropertyName = "D23";
                Grid_Score.Columns[26].Width = 37;

                Grid_Score.Columns[27].Name = "24";
                Grid_Score.Columns[27].HeaderText = "D24";
                Grid_Score.Columns[27].DataPropertyName = "D24";
                Grid_Score.Columns[27].Width = 37;

                Grid_Score.Columns[28].Name = "25";
                Grid_Score.Columns[28].HeaderText = "D25";
                Grid_Score.Columns[28].DataPropertyName = "D25";
                Grid_Score.Columns[28].Width = 37;

                Grid_Score.Columns[29].Name = "26";
                Grid_Score.Columns[29].HeaderText = "D26";
                Grid_Score.Columns[29].DataPropertyName = "D26";
                Grid_Score.Columns[29].Width = 37;

                Grid_Score.Columns[30].Name = "27";
                Grid_Score.Columns[30].HeaderText = "D27";
                Grid_Score.Columns[30].DataPropertyName = "D27";
                Grid_Score.Columns[30].Width = 37;

                Grid_Score.Columns[31].Name = "28";
                Grid_Score.Columns[31].HeaderText = "D28";
                Grid_Score.Columns[31].DataPropertyName = "D28";
                Grid_Score.Columns[31].Width = 37;

                Grid_Score.Columns[32].Name = "29";
                Grid_Score.Columns[32].HeaderText = "D29";
                Grid_Score.Columns[32].DataPropertyName = "D29";
                Grid_Score.Columns[32].Width = 37;

                Grid_Score.Columns[33].Name = "30";
                Grid_Score.Columns[33].HeaderText = "D30";
                Grid_Score.Columns[33].DataPropertyName = "D30";
                Grid_Score.Columns[33].Width = 37;

                Grid_Score.Columns[34].Name = "31";
                Grid_Score.Columns[34].HeaderText = "D31";
                Grid_Score.Columns[34].DataPropertyName = "D31";
                Grid_Score.Columns[34].Width = 37;




                Grid_Score.Visible = true;
                Grid_Score.DataSource = dt_Final_Score;





            }
            else
            {

                Grid_Score.DataSource = null;
                Grid_Score.Rows.Clear();
            }

            Hashtable htgetfirst_Last_Dates = new Hashtable();
            System.Data.DataTable dtgetfirst_last_Dates = new System.Data.DataTable();

            htgetfirst_Last_Dates.Add("@Trans", "GET_FIRST_LAST_DATE");
            htgetfirst_Last_Dates.Add("@Month", int.Parse(ddl_Month.SelectedValue.ToString()));
            htgetfirst_Last_Dates.Add("@Years", int.Parse(ddl_Year.SelectedValue.ToString()));
            dtgetfirst_last_Dates = dataaccess.ExecuteSP("Sp_Score_Board", htgetfirst_Last_Dates);


            Hashtable htdatecolumn = new Hashtable();

            System.Data.DataTable dtdatecolumn = new System.Data.DataTable();
            htdatecolumn.Add("@Trans", "GET_DATES");
            htdatecolumn.Add("@date_from1", dtgetfirst_last_Dates.Rows[0]["First_Date"].ToString());
            htdatecolumn.Add("@date_to1", dtgetfirst_last_Dates.Rows[0]["Last_Date"].ToString());
            dtdatecolumn = dataaccess.ExecuteSP("Sp_Score_Board", htdatecolumn);


            if (Grid_Score.Rows.Count > 0)
            {

                if (dtdatecolumn.Rows.Count > 0)
                {

                    for (int i = 0; i < dtdatecolumn.Rows.Count; i++)
                    {

                        int k = i + 4;

                        Grid_Score.Columns[k].HeaderText = dtdatecolumn.Rows[i][0].ToString();




                    }


                }
            }

        }


        private bool CheckOpened(string name)
        {
            FormCollection fc = System.Windows.Forms.Application.OpenForms;
            foreach (Form frm in fc)
            {
                if (frm.Text == name)
                {
                    return true;
                }
            }
            return false;
        }


        private void Grd_Score_Board_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex != -1)
            {
                score_board = "SCORE BOARD";
                TAT = "SCORE BOARD";
                if (e.ColumnIndex == 2)
                {
                    Ordermanagement_01.TargetDashboard TargeDashboard = new Ordermanagement_01.TargetDashboard(Order_Target, Time_Zone, OrderViewType, 2, int.Parse(Grd_Score_Board.Rows[e.RowIndex].Cells[3].Value.ToString()), TAT, score_board, header_Pending, dateTimePicker1.Text, userid, User_Role_Id, "Current");
                    TargeDashboard.Show();
                }
                else if (e.ColumnIndex == 4)
                {
                    Ordermanagement_01.TargetDashboard TargeDashboard = new Ordermanagement_01.TargetDashboard(Order_Target, Time_Zone, OrderViewType, 3, int.Parse(Grd_Score_Board.Rows[e.RowIndex].Cells[3].Value.ToString()), TAT, score_board, header_Pending, dateTimePicker1.Text, userid, User_Role_Id, "Current");
                    TargeDashboard.Show();
                }
            }

        }



        private void Gb_Processing_Enter(object sender, EventArgs e)
        {

        }

        private void groupBox1_Enter(object sender, EventArgs e)
        {


        }

        private void label14_Click(object sender, EventArgs e)
        {

        }

        private void Lbl_Flash_Click(object sender, EventArgs e)
        {

        }

        private void Grd_Score_Board_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void groupBox4_Enter(object sender, EventArgs e)
        {

        }

        private void label11_Click(object sender, EventArgs e)
        {

        }

        private void label10_Click(object sender, EventArgs e)
        {

        }

        private void label9_Click(object sender, EventArgs e)
        {

        }

        private void label8_Click(object sender, EventArgs e)
        {

        }

        private void label7_Click(object sender, EventArgs e)
        {

        }

        private void label6_Click(object sender, EventArgs e)
        {

        }

        private void label5_Click(object sender, EventArgs e)
        {

        }

        private void label4_Click(object sender, EventArgs e)
        {

        }

        private void label3_Click(object sender, EventArgs e)
        {

        }

        private void label2_Click_1(object sender, EventArgs e)
        {

        }

        private void lnk_Zone_Time_Click(object sender, EventArgs e)
        {

        }

        private void label12_Click(object sender, EventArgs e)
        {

        }

        private void label13_Click(object sender, EventArgs e)
        {

        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void groupBox2_Enter_1(object sender, EventArgs e)
        {

        }

        private void FileToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void NewToolStripMenuItem1_Click(object sender, EventArgs e)
        {

        }

        private void OpenToolStripMenuItem1_Click(object sender, EventArgs e)
        {

        }

        private void CloseToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void SalesF3ToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void ExitToolStripMenuItem1_Click(object sender, EventArgs e)
        {

        }

        private void ExitToolStripMenuItem2_Click(object sender, EventArgs e)
        {

        }

        private void MastersToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void errorCatoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(9) != false)
            {

                Ordermanagement_01.Masters.Error_Info er = new Masters.Error_Info(userid, lbl_username.Text);
                er.Show();
            }
        }

        private void markerMakerToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void TransactionsToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void ReportsToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void AdminstrationToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void activeDeactiveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(33) != false)
            {
                Ordermanagement_01.Users.ActiveInactiveNew ActiveInactive = new Ordermanagement_01.Users.ActiveInactiveNew(userid, 1);
                ActiveInactive.Show();
            }
        }

        private void ToolsToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void BackUpToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void AboutUsToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void HelpToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void MenuStrip_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {

        }

        private void ToolStripSeparator15_Click(object sender, EventArgs e)
        {

        }

        private void ToolStripSeparator16_Click(object sender, EventArgs e)
        {

        }

        private void ToolStripSeparator17_Click(object sender, EventArgs e)
        {

        }

        private void ToolStripSeparator19_Click(object sender, EventArgs e)
        {

        }

        private void ToolStripSeparator20_Click(object sender, EventArgs e)
        {

        }

        private void ToolStripSeparator21_Click(object sender, EventArgs e)
        {

        }

        private void ToolStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {

        }

        private void toolStripSeparator2_Click(object sender, EventArgs e)
        {

        }

        private void ToolStripButton16_Click(object sender, EventArgs e)
        {

        }

        private void toolStripSeparator1_Click(object sender, EventArgs e)
        {

        }

        private void lbl_username_Click(object sender, EventArgs e)
        {

        }

        private void panel1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void label11_Click_1(object sender, EventArgs e)
        {

        }

        private void label10_Click_1(object sender, EventArgs e)
        {

        }

        private void label9_Click_1(object sender, EventArgs e)
        {

        }

        private void label8_Click_1(object sender, EventArgs e)
        {

        }

        private void label7_Click_1(object sender, EventArgs e)
        {

        }

        private void label6_Click_1(object sender, EventArgs e)
        {

        }

        private void label5_Click_1(object sender, EventArgs e)
        {

        }

        private void label4_Click_1(object sender, EventArgs e)
        {

        }

        private void label3_Click_1(object sender, EventArgs e)
        {

        }

        private void label2_Click_2(object sender, EventArgs e)
        {

        }


        private void btn_Refresh_Click(object sender, EventArgs e)
        {
            //load_Progressbar.Start_progres();


            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);

            try
            {

                // btn_Refresh.Image = Image.FromFile(@"\\192.168.12.33\Oms-Image-Files\Reload.png");
                //  Reload-1s-32px.gif, loading.png

                // btn_Refresh.Enabled = false;
                this.Enabled = false;

                User_Access();
                Notification_Details();
                User_Role_Wise_Access();


                if (User_Role_Id == "2")
                {
                    Get_Count_Of_Orders();
                    Employee_New_Update_effeciency(); // this is commented for server issue on 29/11/2018
                    Grid_Message_Bind();

                }

                else
                {

                    if (User_Role_Id == "1" || User_Role_Id == "6")
                    {

                        Bind_Over_Daily_WiseCount();
                        // Bind_Client_Wise_Target_Count_Of_Orders();
                    }

                    if (User_Role_Id != "2")
                    {
                        Bind_Auto_Not_Assigned_Orders();
                        Bind_Auto_Assigned_Orders();
                        Get_Count_Of_Vendor_Orders();

                    }
                    // Bind_Employee_Wise_Target_Count_Of_Orders();
                    Get_Count_Of_Orders();
                    if (User_Role_Id == "1" || User_Role_Id == "6" || User_Role_Id == "5")
                    {
                        Get_Count_Of_Abstractor_Orders();
                    }


                    //  Score_Board();

                    //   Bind_Alerts_Count();
                    if (User_Role_Id == "1" || User_Role_Id == "6" || User_Role_Id == "5" || User_Role_Id == "4" || User_Role_Id == "3")
                    {
                        Get_Count_Of_Tax_Orders();
                    }
                    // Employee_Wise_Effeciency();
                    //Employee_New_effeciency();
                    Employee_New_Update_effeciency(); // this is commented for server issue on 29/11/2018
                    Grid_Message_Bind();
                    this.Enabled = true;
                    // clsLoader.stopProgress();

                    //btn_Refresh.Enabled = true;
                    //btn_Refresh.Image = Image.FromFile(@"\\192.168.12.33\Oms-Image-Files\refresh.png");


                }
            }
            catch (Exception ex)
            {

                //Close Wait Form
                this.Enabled = true;
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                this.Enabled = true;
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }

        }

        private void AdminDashboard_FormClosing(object sender, FormClosingEventArgs e)
        {
            System.Data.DataTable dt_Employee_Status = new System.Data.DataTable();
            Hashtable ht_Employee_Status = new Hashtable();
            ht_Employee_Status.Add("@Trans", "Log_In_Present");
            ht_Employee_Status.Add("@Presents", "False");
            ht_Employee_Status.Add("@Employee_Id", userid);
            dt_Employee_Status = dataaccess.ExecuteSP("Sp_Employee_Status", ht_Employee_Status);
        }

        private void btn_Chat_Click(object sender, EventArgs e)
        {
            //Ordermanagement_01.Chat_User_Tes Chating = new Ordermanagement_01.Chat_User_Tes(userid);
            //Chating.Show();
        }

        private void dateTimePicker1_ValueChanged(object sender, EventArgs e)
        {
            Score_Board();
        }

        private void templeteFieldsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Masters.Templete_Information Temp_Master = new Ordermanagement_01.Masters.Templete_Information();
            Temp_Master.Show();
        }

        private void countyWisePasswordToolStripMenuItem_Click(object sender, EventArgs e)
        {


        }

        private void stateWisePasswordToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void websiteWisePasswordToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void toolStripButton2_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Gen_Forms.Home Website_User_name = new Ordermanagement_01.Gen_Forms.Home(userid.ToString());
            Website_User_name.Show();
        }

        private void userAccessToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(34) != false)
            {
                User_Access_Control user_Access_Control = new User_Access_Control(User_Role_Id, userid.ToString(), lbl_username.Text, Password,Application_Login_Type);
                user_Access_Control.Show();
            }
        }

        private void countyWisePasswordToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(89) != false)
            {
                Ordermanagement_01.Gen_Forms.StateCountyUserPasswordEntry Website_User_name = new Ordermanagement_01.Gen_Forms.StateCountyUserPasswordEntry(userid.ToString());
                Website_User_name.Show();
            }
        }

        private void stateWisePasswordToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(90) != false)
            {
                Ordermanagement_01.Gen_Forms.StateWise_UserNameAndPassword Website_User_name = new Ordermanagement_01.Gen_Forms.StateWise_UserNameAndPassword(userid.ToString());
                Website_User_name.Show();
            }
        }

        private void websiteWisePasswordToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(91) != false)
            {
                Ordermanagement_01.Gen_Forms.Website_UserNamePassword Website_User_name = new Ordermanagement_01.Gen_Forms.Website_UserNamePassword(userid.ToString());
                Website_User_name.Show();
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Send_Report_ToEmail sm = new Send_Report_ToEmail(userid);
            sm.Show();
            sm.Close();
        }


        public void Load_AutomaticEmails()
        {

            Hashtable htfrom = new Hashtable();
            System.Data.DataTable dtfrom = new System.Data.DataTable();
            htfrom.Add("@Trans", "GET_FROM_EMAIL");
            dtfrom = dataaccess.ExecuteSP("Sp_Automail", htfrom);
            if (dtfrom.Rows.Count > 0)
            {

                From_Email = dtfrom.Rows[0]["Sent_Email"].ToString();
                Time_Interval = int.Parse(dtfrom.Rows[0]["Email_Interval_Time"].ToString());
                timer3.Interval = Time_Interval;

            }

        }

        private void timer3_Tick(object sender, EventArgs e)
        {

            //if (userid == 1)
            //{
            //    Hashtable hthour = new Hashtable();
            //    System.Data.DataTable dthour = new System.Data.DataTable();
            //    hthour.Add("@Trans", "GET_TIME");
            //    dthour = dataaccess.ExecuteSP("Sp_Get_Day_For_Report", hthour);
            //    if (dthour.Rows.Count > 0)
            //    {

            //        Hour = int.Parse(dthour.Rows[0]["Hour"].ToString());
            //    }


            //    //button1_Click(sender, e);
            //    //System.Windows.Forms.Application.DoEvents();
            //}
        }

        private void abastractorToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Abstractor.Abstractor_View abstractor = new Ordermanagement_01.Abstractor.Abstractor_View(int.Parse(userid.ToString()), User_Role_Id);
            abstractor.Show();

            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Abstractor.Abstractor_View(int.Parse(userid.ToString()), User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 
        }

        private void lbl_Abstractor_Allocation_Que_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Abstractor.Assign_Abstract_Orders Abs_view = new Ordermanagement_01.Abstractor.Assign_Abstract_Orders(userid, User_Role_Id, 0);
            Abs_view.Show();


            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Abstractor.Assign_Abstract_Orders(userid, User_Role_Id, 0)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 

        }

        private void lbl_Abstarctor_Processing_Que_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Abstractor.Abstractor_Order_Que Abs_view = new Ordermanagement_01.Abstractor.Abstractor_Order_Que(userid, User_Role_Id);
            Abs_view.Show();
            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Abstractor.Abstractor_Order_Que(userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 

        }

        private void lbl_Abstractor_Returned_Que_Click(object sender, EventArgs e)
        {

            Ordermanagement_01.Abstractor.Abstract_Order_Move Abs_view = new Ordermanagement_01.Abstractor.Abstract_Order_Move(userid, User_Role_Id, "Returned");
            Abs_view.Show();
            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Abstractor.Abstract_Order_Move(userid, User_Role_Id, "Returned")); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 
        }

        private void button2_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Order_Movement Abs_view = new Ordermanagement_01.Order_Movement(userid, User_Role_Id);
            Abs_view.Show();
            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Order_Movement(userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 
        }

        private void lbl_Oms_Abstractor_Processing_Que_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);

            try
            {

                Ordermanagement_01.Abstractor.Abstractor_Order_Que Abs_view = new Ordermanagement_01.Abstractor.Abstractor_Order_Que(userid, User_Role_Id);
                Abs_view.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
        }

        private void lbl_Appstraction_Click_1(object sender, EventArgs e)
        {

        }

        private void taskConfirmationMasterToolStripMenuItem_Click(object sender, EventArgs e)
        {

            Ordermanagement_01.Typing_Task_Confirmation T_task = new Typing_Task_Confirmation(userid);
            T_task.Show();
        }

        //Masters.Task_Confirmation task = new Masters.Task_Confirmation(userid);
        //task.Show();



        private void ddl_ClientName_SelectedIndexChanged(object sender, EventArgs e)
        {

            if (ddl_ClientName.SelectedIndex > 0)
            {
                //int clientid = int.Parse(ddl_ClientName.SelectedValue.ToString());
                if (User_Role_Id == "1")
                {
                    dbc.BindSubProcessName_rpt(ddl_SubProcess, int.Parse(ddl_ClientName.SelectedValue.ToString()));
                }
                else
                {

                    dbc.BindSubProcessNumber(ddl_SubProcess, int.Parse(ddl_ClientName.SelectedValue.ToString()));
                }
                ddl_SubProcess.Focus();
            }
            else
            {

                if (User_Role_Id == "1")
                {
                    dbc.BindSubProcessName_rpt(ddl_SubProcess, 0);
                }
                else
                {

                    dbc.BindSubProcessNumber(ddl_SubProcess, 0);
                }
            }
        }

        //=============================================================Reports Section=======================================




        public void Load_Client_Production_Count()
        {
            if (ddl_Client_Status.SelectedIndex > 0)
            {
                Client = int.Parse(ddl_Client_Status.SelectedValue.ToString());
            }
            if (ddl_Subprocess_Status.SelectedIndex > 0)
            {
                SubProcess = int.Parse(ddl_Subprocess_Status.SelectedValue.ToString());

            }
            else
            {

                SubProcess = 0;
            }




            DateTime Fromdate = Convert.ToDateTime(txt_Fromdate.Text.ToString());
            DateTime Todate = Convert.ToDateTime(txt_Todate.Text.ToString());


            DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;


            Hashtable ht_Status = new Hashtable();
            System.Data.DataTable dt_Status = new System.Data.DataTable();

            dt_Status.Rows.Clear();
            dtclientexport.Clear();

            if (User_Role_Id != "2")
            {
                if (ddl_Client_Status.SelectedIndex > 0 && ddl_Subprocess_Status.SelectedIndex <= 0)
                {
                    ht_Status.Add("@Trans", "CLIENT_WISE_PRODUCTION_COUNT");
                }
                else if (ddl_Client_Status.SelectedIndex > 0 && ddl_Subprocess_Status.SelectedIndex > 0)
                {
                    ht_Status.Add("@Trans", "CLEINT_SUPROCESS_COUNT");
                }
                else
                {
                    ht_Status.Add("@Trans", "ALL_CLIENT_WISE_PRODUCTION_COUNT");
                }

            }
            else if (User_Role_Id == "2")
            {

                if (ddl_Client_Status.SelectedIndex > 0 && ddl_Subprocess_Status.SelectedIndex <= 0)
                {

                    ht_Status.Add("@Trans", "CLIENT_WISE_PRODUCTION_COUNT");
                }

                else if (ddl_Client_Status.SelectedIndex > 0 && ddl_Subprocess_Status.SelectedIndex > 0)
                {
                    ht_Status.Add("@Trans", "CLEINT_SUPROCESS_COUNT");
                }
                else
                {
                    ht_Status.Add("@Trans", "ALL_CLIENT_WISE_PRODUCTION_COUNT");
                }

            }
            ht_Status.Add("@Fromdate", Fromdate);
            ht_Status.Add("@Todate", Todate);
            ht_Status.Add("@Clint", Client);
            ht_Status.Add("@Log_In_Userid", userid);
            ht_Status.Add("@Subprocess_Id", SubProcess);
            dt_Status = dataaccess.ExecuteSP("Sp_Order_Status_Report", ht_Status);
            dtclientexport = dt_Status;



            if (dt_Status.Rows.Count > 0)
            {
                Grd_OrderTime.Rows.Clear();
                Grd_OrderTime.DataSource = null;

                //Grd_OrderTime.ColumnHeadersDefaultCellStyle.BackColor = System.Drawing.Color.DarkCyan;
                //Grd_OrderTime.EnableHeadersVisualStyles = false;
                //Grd_OrderTime.AutoGenerateColumns = false;
                Grd_OrderTime.ColumnCount = 23;

                Grd_OrderTime.Columns[0].Name = "Client";
                Grd_OrderTime.Columns[0].HeaderText = "Client name";
                if (User_Role_Id == "1")
                {
                    Grd_OrderTime.Columns[0].DataPropertyName = "Client";
                }
                else
                {
                    Grd_OrderTime.Columns[0].DataPropertyName = "Client_Number";
                }
                Grd_OrderTime.Columns[0].Width = 120;

                Grd_OrderTime.Columns[1].Name = "R_Current_Day";
                Grd_OrderTime.Columns[1].HeaderText = "R-" + txt_Todate.Text;
                Grd_OrderTime.Columns[1].DataPropertyName = "R_Current_Day";
                Grd_OrderTime.Columns[1].Width = 70;

                String dy = Todate.Day.ToString();
                String mn = Todate.Month.ToString();
                String yy = Todate.Year.ToString();
                Grd_OrderTime.Columns[2].Name = "R_MTD";
                Grd_OrderTime.Columns[2].HeaderText = "R(MTD)" + "-" + mn + "/" + yy + "";
                Grd_OrderTime.Columns[2].DataPropertyName = "R_MTD";
                Grd_OrderTime.Columns[1].Width = 80;

                Grd_OrderTime.Columns[3].Name = "C_Current_Day";
                Grd_OrderTime.Columns[3].HeaderText = "C-" + txt_Todate.Text;
                Grd_OrderTime.Columns[3].DataPropertyName = "C_Current_Day";
                Grd_OrderTime.Columns[3].Width = 70;

                Grd_OrderTime.Columns[4].Name = "C_MTD";
                Grd_OrderTime.Columns[4].HeaderText = "C(MTD)" + "-" + mn + "/" + yy + "";
                Grd_OrderTime.Columns[4].DataPropertyName = "C_MTD";
                Grd_OrderTime.Columns[4].Width = 80;


                Grd_OrderTime.Columns[5].Name = "Research";
                Grd_OrderTime.Columns[5].HeaderText = "Research";
                Grd_OrderTime.Columns[5].DataPropertyName = "Research";
                Grd_OrderTime.Columns[5].Width = 50;


                Grd_OrderTime.Columns[6].Name = "Tax";
                Grd_OrderTime.Columns[6].HeaderText = "Tax";
                Grd_OrderTime.Columns[6].DataPropertyName = "Tax";
                Grd_OrderTime.Columns[6].Width = 50;


                Grd_OrderTime.Columns[7].Name = "Search";
                Grd_OrderTime.Columns[7].HeaderText = "Search";
                Grd_OrderTime.Columns[7].DataPropertyName = "Search";
                Grd_OrderTime.Columns[7].Width = 50;


                Grd_OrderTime.Columns[8].Name = "Search_Qc";
                Grd_OrderTime.Columns[8].HeaderText = "Search Qc";
                Grd_OrderTime.Columns[8].DataPropertyName = "Search_Qc";
                Grd_OrderTime.Columns[8].Width = 70;


                Grd_OrderTime.Columns[9].Name = "Typing";
                Grd_OrderTime.Columns[9].HeaderText = "Typing";
                Grd_OrderTime.Columns[9].DataPropertyName = "Typing";
                Grd_OrderTime.Columns[9].Width = 50;

                Grd_OrderTime.Columns[10].Name = "Typing_QC";
                Grd_OrderTime.Columns[10].HeaderText = "Typing_QC";
                Grd_OrderTime.Columns[10].DataPropertyName = "Typing_QC";
                Grd_OrderTime.Columns[10].Width = 60;


                Grd_OrderTime.Columns[11].Name = "Final_QC";
                Grd_OrderTime.Columns[11].HeaderText = "Final_QC";
                Grd_OrderTime.Columns[11].DataPropertyName = "Final_QC";
                Grd_OrderTime.Columns[11].Width = 60;


                Grd_OrderTime.Columns[12].Name = "Upload";
                Grd_OrderTime.Columns[12].HeaderText = "Upload";
                Grd_OrderTime.Columns[12].DataPropertyName = "Upload";
                Grd_OrderTime.Columns[12].Width = 50;

                Grd_OrderTime.Columns[13].Name = "Exception";
                Grd_OrderTime.Columns[13].HeaderText = "Exception";
                Grd_OrderTime.Columns[13].DataPropertyName = "Exception";
                Grd_OrderTime.Columns[13].Width = 70;

                Grd_OrderTime.Columns[14].Name = "Abstractor";
                Grd_OrderTime.Columns[14].HeaderText = "Abstractor";
                Grd_OrderTime.Columns[14].DataPropertyName = "Abstractor";
                Grd_OrderTime.Columns[14].Width = 70;

                Grd_OrderTime.Columns[15].Name = "Vendor";
                Grd_OrderTime.Columns[15].HeaderText = "Vendor";
                Grd_OrderTime.Columns[15].DataPropertyName = "Vendor";
                Grd_OrderTime.Columns[15].Width = 60;




                Grd_OrderTime.Columns[16].Name = "Clarification";
                Grd_OrderTime.Columns[16].HeaderText = "Clarification";
                Grd_OrderTime.Columns[16].DataPropertyName = "Clarification";
                Grd_OrderTime.Columns[16].Width = 70;


                Grd_OrderTime.Columns[17].Name = "Hold";
                Grd_OrderTime.Columns[17].HeaderText = "Hold";
                Grd_OrderTime.Columns[17].DataPropertyName = "Hold";
                Grd_OrderTime.Columns[17].Width = 50;


                Grd_OrderTime.Columns[18].Name = "Cancelled";
                Grd_OrderTime.Columns[18].HeaderText = "Cancelled";
                Grd_OrderTime.Columns[18].DataPropertyName = "Cancelled";
                Grd_OrderTime.Columns[18].Width = 70;



                Grd_OrderTime.Columns[19].Name = "WFT";
                Grd_OrderTime.Columns[19].HeaderText = "WFT";
                Grd_OrderTime.Columns[19].DataPropertyName = "WFT";
                Grd_OrderTime.Columns[19].Width = 50;


                Grd_OrderTime.Columns[20].Name = "Search_Tax";
                Grd_OrderTime.Columns[20].HeaderText = "SEARCH TAX REQ";
                Grd_OrderTime.Columns[20].DataPropertyName = "Search_Tax";
                Grd_OrderTime.Columns[20].Width = 50;




                Grd_OrderTime.Columns[21].Name = "Client_Id";
                Grd_OrderTime.Columns[21].HeaderText = "Client_Id";
                Grd_OrderTime.Columns[21].DataPropertyName = "Client_Id";
                Grd_OrderTime.Columns[21].Visible = false;


                if (User_Role_Id == "1")
                {

                    if (ddl_Client_Status.SelectedIndex != 0 && ddl_Subprocess_Status.SelectedIndex != 0)
                    {

                        Grd_OrderTime.Columns[22].Name = "Subprocess_Id";
                        Grd_OrderTime.Columns[22].HeaderText = "Subprocess_Id";
                        Grd_OrderTime.Columns[22].DataPropertyName = "Subprocess_Id";
                        Grd_OrderTime.Columns[22].Visible = false;

                        Pass_Sub_Process_Id = 1;
                    }
                    else
                    {

                        Pass_Sub_Process_Id = 0;

                    }
                }
                else
                {

                    if (ddl_Client_Status.SelectedIndex != 0 && ddl_Subprocess_Status.SelectedIndex != 0)
                    {

                        Grd_OrderTime.Columns[22].Name = "Subprocess_Id";
                        Grd_OrderTime.Columns[22].HeaderText = "Subprocess_Id";
                        Grd_OrderTime.Columns[22].DataPropertyName = "Subprocess_Id";
                        Grd_OrderTime.Columns[22].Visible = false;

                        Pass_Sub_Process_Id = 1;
                    }
                    else
                    {

                        Pass_Sub_Process_Id = 0;


                    }

                }


                Grd_OrderTime.Visible = true;
                Grd_OrderTime.DataSource = dt_Status;

                Grd_OrderTime.Focus();

            }
            else
            {
                Grd_OrderTime.Visible = false;
                Grd_OrderTime.DataSource = null;

            }


            //Grd_OrderTime.AutoResizeColumns();

            //// Configure the details DataGridView so that its columns automatically
            //// adjust their widths when the data changes.
            //Grd_OrderTime.AutoSizeColumnsMode =
            //    DataGridViewAutoSizeColumnsMode.AllCells;






        }

        public void Logon_To_Crystal()
        {

            crConnectionInfo.ServerName = server;
            crConnectionInfo.DatabaseName = database;
            crConnectionInfo.UserID = UserID;
            crConnectionInfo.Password = password;
            CrTables = rptDoc.Database.Tables;

            foreach (CrystalDecisions.CrystalReports.Engine.Table CrTable in CrTables)
            {
                crtableLogoninfo = CrTable.LogOnInfo;
                crtableLogoninfo.ConnectionInfo = crConnectionInfo;
                CrTable.ApplyLogOnInfo(crtableLogoninfo);
            }


        }

        protected void Load_Grd_Master_Report()
        {



            DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;
            //DateTime fromdate = DateTime.ParseExact(txt_Employee_From_Date.Text, "MM/DD/yyyy", null);
            //DateTime fromdate = Convert.ToDateTime(txt_Employee_From_Date.Text, usDtfi);
            //  DateTime Todate = Convert.ToDateTime(txt_Employee_Todate.Text, usDtfi);
            //  DateTime Todate = DateTime.ParseExact(txt_Employee_Todate.Text, "MM/DD/yyyy", null);
            DateTime fromdate = DateTime.ParseExact(txt_Employee_From_Date.Text, @"MM/dd/yyyy",
            System.Globalization.CultureInfo.InvariantCulture);
            DateTime Todate = DateTime.ParseExact(txt_Employee_Todate.Text, @"MM/dd/yyyy",
            System.Globalization.CultureInfo.InvariantCulture);

            if (fromdate <= Todate)
            {
                int orderid = 0;
                int Clientid = 0;
                int SubProcessid = 0;
                int Userid = 0;
                int Status = 0;
                int ProgressId = 0;
                // dbc.BindOrder1(ddl_OrderNumber);
                if (ddl_OrderNumber.SelectedIndex > 0)
                {
                    orderid = int.Parse(ddl_OrderNumber.SelectedValue.ToString());
                }
                if (ddl_ClientName.SelectedIndex > 0)
                {
                    Clientid = int.Parse(ddl_ClientName.SelectedValue.ToString());
                }
                if (ddl_SubProcess.SelectedIndex > 0)
                {
                    SubProcessid = int.Parse(ddl_SubProcess.SelectedValue.ToString());
                }
                if (ddl_EmployeeName.SelectedIndex > 0)
                {
                    Userid = int.Parse(ddl_EmployeeName.SelectedValue.ToString());
                }
                if (ddl_Status.SelectedIndex > 0)
                {
                    ProgressId = int.Parse(ddl_Status.SelectedValue.ToString());
                }
                if (ddl_Task.SelectedIndex > 0)
                {
                    Status = int.Parse(ddl_Task.SelectedValue.ToString());
                }

                ht.Clear();
                dt.Clear();
                dtuserexport.Clear();

                if (Employee_Report == "User Production Report")
                {
                    grid_User_Production_Report.Visible = true;
                    crViewer.Visible = false;

                }
                else if (Employee_Report == "User Production Count")
                {

                    grid_User_Production_Report.Visible = false;
                    crViewer.Visible = true;
                }

                if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                {

                    if (Employee_Report == "User Production Report")
                    {

                        ht.Add("@Trans", "All");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", txt_Employee_From_Date.Text);
                        ht.Add("@To_date", txt_Employee_Todate.Text);
                        ht.Add("@User_Id", Userid);

                    }
                    else if (Employee_Report == "User Production Count")
                    {


                        //rptDoc = new Reports.CrystalReport.User_Production_ReportNew();
                        rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "All");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", 0);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }





                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {

                        ht.Add("@Trans", "User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", txt_Employee_From_Date.Text);
                        ht.Add("@To_date", txt_Employee_Todate.Text);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {


                        rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "SELECT_USER_WISE");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }

                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Progress_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {


                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Progress_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Progress_ID_And_Used_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Progress_ID_And_Used_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }

                }

                else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Status_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Status_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }

                else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Status_ID_and_User_Id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Status_ID_and_User_Id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Status_ID_and_Progress_Id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Status_ID_and_Progress_Id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }

                else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Status_ID_and_Progress_Id_And_UserID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Status_ID_and_Progress_Id_And_UserID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "SubProcess_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "SubProcess_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "SubProcess_ID_And_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "SubProcess_ID_And_Progress_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Progress_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "SubProcess_ID_And_Progress_ID_And_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Progress_ID_And_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "SubProcess_ID_And_Status_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                        dt = dataaccess.ExecuteSP("Sp_Rpt_User_Order_TimeManagement", ht);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "SubProcess_ID_And_Status_ID_And_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID_And_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID_and_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID_and_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                {

                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_Progress_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_Progress_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_Progress_ID_and_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_Progress_ID_and_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_Status_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_Status_ID_and_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID_and_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_Status_ID_and_Progress_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID_and_Progress_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_Status_ID_and_Progress_ID_and_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID_and_Progress_ID_and_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_Subprocess_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID_and_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID_and_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID_And_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID_And_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_Progress_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_Progress_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_Progress_ID_And_User_Id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_Progress_ID_And_User_Id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_Status_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_Status_ID_And_User_Id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID_And_User_Id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_Status_ID_And_Progress_Id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID_And_Progress_Id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_Status_ID_And_Progress_Id_and_User_Id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID_And_Progress_Id_and_User_Id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }



                else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_User_id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_User_id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id_and_User_id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id_and_User_id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_User_id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_User_id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id_and_user_id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id_and_user_id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }

                if (Employee_Report == "User Production Report")
                {
                    //   dt = dataaccess.ExecuteSP("Sp_Rpt_Employee_All_Production_Report_Data", ht); 
                    dt = dataaccess.ExecuteSP("Sp_Rpt_User_Order_TimeManagement", ht);
                    dtuserexport = dt;
                }
                else if (Employee_Report == "User Production Count")
                {
                    crViewer.ReportSource = rptDoc;
                }
                //Grd_OrderTime.ColumnHeadersDefaultCellStyle.BackColor = System.Drawing.Color.DarkSlateGray;
                //Grd_OrderTime.EnableHeadersVisualStyles = false;
                //Grd_OrderTime.ColumnHeadersDefaultCellStyle.ForeColor = System.Drawing.Color.WhiteSmoke;
                if (dt.Rows.Count > 0)
                {


                    grid_User_Production_Report.DataSource = null;
                    grid_User_Production_Report.AutoGenerateColumns = false;

                    grid_User_Production_Report.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Ebrima", 7.75F, FontStyle.Bold);
                    grid_User_Production_Report.ColumnHeadersHeight = 40;

                    grid_User_Production_Report.ColumnCount = 26;
                    //Grd_OrderTime.Rows.Add();
                    grid_User_Production_Report.Columns[0].Name = "SNo";
                    grid_User_Production_Report.Columns[0].HeaderText = "SL.NO";
                    grid_User_Production_Report.Columns[0].Width = 50;

                    grid_User_Production_Report.Columns[1].Name = "ProductionDate";
                    grid_User_Production_Report.Columns[1].HeaderText = "PRODUCTION DATE";
                    grid_User_Production_Report.Columns[1].DataPropertyName = "Production_Date";
                    grid_User_Production_Report.Columns[1].Width = 140;

                    //grid_User_Production_Report.Columns[2].Name = "UserName";
                    //grid_User_Production_Report.Columns[2].HeaderText = "USER NAME";
                    //grid_User_Production_Report.Columns[2].DataPropertyName = "User_Name";
                    //grid_User_Production_Report.Columns[2].Width = 125;


                    grid_User_Production_Report.Columns[2].Name = "User_Name";
                    grid_User_Production_Report.Columns[2].HeaderText = "Employee Name";
                    grid_User_Production_Report.Columns[2].DataPropertyName = "User_Name";
                    grid_User_Production_Report.Columns[2].Width = 125;


                    //grid_User_Production_Report.Columns[3].Name = "OrderNumber";
                    //grid_User_Production_Report.Columns[3].HeaderText = "ORDER_NUMBER";
                    //grid_User_Production_Report.Columns[3].DataPropertyName = "Client_Order_Number";
                    //grid_User_Production_Report.Columns[3].Width = 195;
                    //grid_User_Production_Report.Columns[3].Visible = false;

                    DataGridViewLinkColumn user_link = new DataGridViewLinkColumn();
                    grid_User_Production_Report.Columns.Add(user_link);
                    user_link.DisplayIndex = 3;
                    user_link.HeaderText = "ORDER NUMBER";
                    user_link.DataPropertyName = "Client_Order_Number";
                    user_link.Name = "OrderNumber";
                    user_link.Width = 195;


                    grid_User_Production_Report.Columns[3].Name = "Client_Order_Ref";
                    grid_User_Production_Report.Columns[3].HeaderText = "Order Reference No";
                    grid_User_Production_Report.Columns[3].DataPropertyName = "Client_Order_Ref";
                    grid_User_Production_Report.Columns[3].Width = 120;

                    grid_User_Production_Report.Columns[4].Name = "DRNEmpCode";
                    grid_User_Production_Report.Columns[4].HeaderText = "EMP CODE";
                    grid_User_Production_Report.Columns[4].DataPropertyName = "DRN_Emp_Code";
                    grid_User_Production_Report.Columns[4].Width = 100;





                    grid_User_Production_Report.Columns[5].Name = "empJobRole";
                    grid_User_Production_Report.Columns[5].HeaderText = "JOB ROLE";
                    grid_User_Production_Report.Columns[5].DataPropertyName = "Emp_Job_Role";
                    grid_User_Production_Report.Columns[5].Width = 100;

                    grid_User_Production_Report.Columns[6].Name = "ShiftName";
                    grid_User_Production_Report.Columns[6].HeaderText = "SHIFT";
                    grid_User_Production_Report.Columns[6].DataPropertyName = "Shift_Type_Name";
                    grid_User_Production_Report.Columns[6].Width = 100;

                    grid_User_Production_Report.Columns[7].Name = "ReportingTo1";
                    grid_User_Production_Report.Columns[7].HeaderText = "REPORTING TO LEVEL 1";
                    grid_User_Production_Report.Columns[7].DataPropertyName = "Reporting_To_1";
                    grid_User_Production_Report.Columns[7].Width = 100;


                    grid_User_Production_Report.Columns[8].Name = "ReportingTo2";
                    grid_User_Production_Report.Columns[8].HeaderText = "REPORTING TO LEVEL 2";
                    grid_User_Production_Report.Columns[8].DataPropertyName = "Reporting_To_2";
                    grid_User_Production_Report.Columns[8].Width = 100;









                    if (User_Role_Id == "1")
                    {

                        grid_User_Production_Report.Columns[9].Name = "Client";
                        grid_User_Production_Report.Columns[9].HeaderText = "CLIENT NAME";
                        grid_User_Production_Report.Columns[9].DataPropertyName = "Client_Name";
                        grid_User_Production_Report.Columns[9].Width = 125;

                        grid_User_Production_Report.Columns[10].Name = "SubProcess";
                        grid_User_Production_Report.Columns[10].HeaderText = "SUB PROCESS";
                        grid_User_Production_Report.Columns[10].DataPropertyName = "Sub_ProcessName";
                        grid_User_Production_Report.Columns[10].Width = 250;
                    }
                    else
                    {
                        grid_User_Production_Report.Columns[9].Name = "Client_Number";
                        grid_User_Production_Report.Columns[9].HeaderText = "CLIENT NAME";
                        grid_User_Production_Report.Columns[9].DataPropertyName = "Client_Number";
                        grid_User_Production_Report.Columns[9].Width = 125;

                        grid_User_Production_Report.Columns[10].Name = "Subprocess_Number";
                        grid_User_Production_Report.Columns[10].HeaderText = "SUB PROCESS";
                        grid_User_Production_Report.Columns[10].DataPropertyName = "Subprocess_Number";
                        grid_User_Production_Report.Columns[10].Width = 250;

                    }

                    grid_User_Production_Report.Columns[11].Name = "Target Category";
                    grid_User_Production_Report.Columns[11].HeaderText = "Target Category";
                    grid_User_Production_Report.Columns[11].DataPropertyName = "Order_Source_Type_Name";
                    grid_User_Production_Report.Columns[11].Width = 140;

                    grid_User_Production_Report.Columns[12].Name = "OrderType";
                    grid_User_Production_Report.Columns[12].HeaderText = "ORDER TYPE";
                    grid_User_Production_Report.Columns[12].DataPropertyName = "Order_Type";
                    grid_User_Production_Report.Columns[12].Width = 180;

                    grid_User_Production_Report.Columns[13].Name = "OrderTypeAbs";
                    grid_User_Production_Report.Columns[13].HeaderText = "ORDER TYPE ABS";
                    grid_User_Production_Report.Columns[13].DataPropertyName = "Order_Type_Abrivation";
                    grid_User_Production_Report.Columns[13].Width = 180;

                    grid_User_Production_Report.Columns[14].Name = "OrderStatus";
                    grid_User_Production_Report.Columns[14].HeaderText = "ORDER STATUS";
                    grid_User_Production_Report.Columns[14].DataPropertyName = "Task";
                    grid_User_Production_Report.Columns[14].Width = 150;

                    grid_User_Production_Report.Columns[15].Name = "Status";
                    grid_User_Production_Report.Columns[15].HeaderText = "PROGRESS STATUS";
                    grid_User_Production_Report.Columns[15].DataPropertyName = "Order_Status";
                    grid_User_Production_Report.Columns[15].Width = 150;

                    grid_User_Production_Report.Columns[16].Name = "State";
                    grid_User_Production_Report.Columns[16].HeaderText = "STATE";
                    grid_User_Production_Report.Columns[16].DataPropertyName = "State";
                    grid_User_Production_Report.Columns[16].Width = 150;

                    grid_User_Production_Report.Columns[17].Name = "County";
                    grid_User_Production_Report.Columns[17].HeaderText = "COUNTY";
                    grid_User_Production_Report.Columns[17].DataPropertyName = "County";
                    grid_User_Production_Report.Columns[17].Width = 150;

                    grid_User_Production_Report.Columns[18].Name = "Borrower_Name";
                    grid_User_Production_Report.Columns[18].HeaderText = "BORROWER NAME";
                    grid_User_Production_Report.Columns[18].DataPropertyName = "Borrower_Name";
                    grid_User_Production_Report.Columns[18].Width = 150;


                    grid_User_Production_Report.Columns[19].Name = "StartTime";
                    grid_User_Production_Report.Columns[19].HeaderText = "START TIME";
                    grid_User_Production_Report.Columns[19].DataPropertyName = "Start_Time";
                    grid_User_Production_Report.Columns[19].Width = 120;

                    grid_User_Production_Report.Columns[20].Name = "EndTime";
                    grid_User_Production_Report.Columns[20].HeaderText = "END TIME";
                    grid_User_Production_Report.Columns[20].DataPropertyName = "End_Time";
                    grid_User_Production_Report.Columns[20].Width = 120;

                    grid_User_Production_Report.Columns[21].Name = "TotalTime";
                    grid_User_Production_Report.Columns[21].HeaderText = "TOTAL TIME";
                    grid_User_Production_Report.Columns[21].DataPropertyName = "Total_Time";
                    grid_User_Production_Report.Columns[21].Width = 100;

                    grid_User_Production_Report.Columns[22].Name = "Issue_Type";
                    grid_User_Production_Report.Columns[22].HeaderText = "ISSUE TYPE";
                    grid_User_Production_Report.Columns[22].DataPropertyName = "Issue_Type";
                    grid_User_Production_Report.Columns[22].Width = 100;


                    grid_User_Production_Report.Columns[23].Name = "Reason";
                    grid_User_Production_Report.Columns[23].HeaderText = "REASON";
                    grid_User_Production_Report.Columns[23].DataPropertyName = "Reason";
                    grid_User_Production_Report.Columns[23].Width = 100;

                    grid_User_Production_Report.Columns[24].Name = "OrderId";
                    grid_User_Production_Report.Columns[24].HeaderText = "ORDER ID";
                    grid_User_Production_Report.Columns[24].DataPropertyName = "Order_ID";
                    grid_User_Production_Report.Columns[24].Visible = false;

                    grid_User_Production_Report.Columns[25].Name = "Branch Name";
                    grid_User_Production_Report.Columns[25].HeaderText = "Branch Name";
                    grid_User_Production_Report.Columns[25].DataPropertyName = "Branch_Name";
                    // grid_User_Production_Report.Columns[24].Visible = false;



                    grid_User_Production_Report.DataSource = dt;
                    //  }


                }
                else
                {
                    grid_User_Production_Report.Visible = true;
                    grid_User_Production_Report.DataSource = null;
                    grid_User_Production_Report.Rows.Clear();

                }

            }
            else
            {
                // ScriptManager.RegisterStartupScript(Page, Page.GetType(), "Msg", "<script> alert('Enter date Properly')</script>", false);
            }
            for (int i = 0; i < grid_User_Production_Report.Rows.Count; i++)
            {
                grid_User_Production_Report.Rows[i].Cells[0].Value = i + 1;
            }
        }


        protected void Load_Rep_user_Production_Count()
        {
            DateTime Fromdate = Convert.ToDateTime(txt_Fromdate.Text.ToString());
            DateTime Todate = Convert.ToDateTime(txt_Todate.Text.ToString());


            rptDoc = new Reports.CrystalReport.User_Production_Count();
            Logon_To_Crystal();
            rptDoc.SetParameterValue("@Trans", "SELECT");
            rptDoc.SetParameterValue("@Fromdate", Fromdate);
            rptDoc.SetParameterValue("@Todate", Todate);
            crViewer.ReportSource = rptDoc;





        }
        private void btn_Report_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            // clsLoader.startProgress();
            load_Progressbar.Start_progres();
            Grd_OrderTime.AutoGenerateColumns = false;
            Grd_OrderTime.DataSource = null;

            Load_Client_Production_Count();
            //int value = (Grd_OrderTime.Rows.Count) - 1;
            //Grd_OrderTime.Rows[value].ReadOnly = true;
            //Grd_OrderTime.Rows[value].Cells[1].ReadOnly = true;

            //clsLoader.stopProgress();
        }

        //private bool validate_CLient_Production_Report()
        //{ 


        //}

        private void btn_Export_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            if (dtclientexport.Rows.Count > 0)
            {

                //clsLoader.startProgress();
                DataSet dsexport = new DataSet();

                if (ddl_Client_Status.SelectedIndex > 0)
                {
                    Client = int.Parse(ddl_Client_Status.SelectedValue.ToString());
                }

                if (ddl_Subprocess_Status.SelectedIndex > 0)
                {
                    SubProcess = int.Parse(ddl_Subprocess_Status.SelectedValue.ToString());

                }
                else
                {

                    SubProcess = 0;
                }


                DateTime Fromdate = Convert.ToDateTime(txt_Fromdate.Text.ToString());
                DateTime Todate = Convert.ToDateTime(txt_Todate.Text.ToString());


                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;
                DateTime seldate = Convert.ToDateTime(txt_Todate.Text, usDtfi);

                Hashtable ht_Status1 = new Hashtable();
                System.Data.DataTable dt_Status1 = new System.Data.DataTable();





                if (User_Role_Id == "1")
                {
                    if (ddl_Client_Status.Text != "ALL" && ddl_Subprocess_Status.Text == "ALL")
                    {
                        ht_Status1.Add("@Trans", "Order_Status_Report__ClientWise");
                    }
                    else if (ddl_Client_Status.Text != "ALL" && ddl_Subprocess_Status.Text != "ALL")
                    {
                        ht_Status1.Add("@Trans", "Order_Status_Report__Client_SubprocessWise");
                    }
                    else
                    {
                        ht_Status1.Add("@Trans", "Order_Status_Report_All_ClientWise");
                    }
                }
                else
                {
                    if (ddl_Client_Status.Text != "ALL" && ddl_Subprocess_Status.Text == "ALL")
                    {
                        ht_Status1.Add("@Trans", "Order_Status_Report_ClientWise_Employee_User_Role");
                    }
                    else if (ddl_Client_Status.Text != "ALL" && ddl_Subprocess_Status.Text != "ALL")
                    {
                        ht_Status1.Add("@Trans", "Order_Status_Report__Client_SubprocessWise_Employee_User_Role");
                    }
                    else
                    {
                        ht_Status1.Add("@Trans", "Order_Status_Report_All_ClientWise_Employee_User_Role");
                    }

                }
                ht_Status1.Add("@F_Date", txt_Fromdate.Text);
                ht_Status1.Add("@T_date", txt_Todate.Text);
                ht_Status1.Add("@Clint", Client);
                ht_Status1.Add("@Log_In_Userid", userid);
                ht_Status1.Add("@Subprocess_Id", SubProcess);
                dt_Status1 = dataaccess.ExecuteSP("usp_Order_Status_Report_Details_Updated", ht_Status1);


                dtclientReport = dt_Status1;

                Export_ReportClient_ProductionData();

            }
            else
            {

                MessageBox.Show("No data avilabe to Export");
            }

        }



        private void Export_Data()
        {

            System.Data.DataTable dt = new System.Data.DataTable();
            System.Data.DataTable dt1 = new System.Data.DataTable();

            //Adding the Columns

            if (ddl_Client_Status.SelectedIndex != 0)
            {
                Client = int.Parse(ddl_Client_Status.SelectedValue.ToString());
            }

            if (ddl_Subprocess_Status.SelectedIndex > 0)
            {
                SubProcess = int.Parse(ddl_Subprocess_Status.SelectedValue.ToString());

            }
            else
            {

                SubProcess = 0;
            }
            DateTime Fromdate = Convert.ToDateTime(txt_Fromdate.Text.ToString());
            DateTime Todate = Convert.ToDateTime(txt_Todate.Text.ToString());


            DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;
            DateTime seldate = Convert.ToDateTime(txt_Todate.Text, usDtfi);

            Hashtable ht_Status1 = new Hashtable();
            System.Data.DataTable dt_Status1 = new System.Data.DataTable();


            if (ddl_Client_Status.SelectedIndex > 0 && ddl_Subprocess_Status.SelectedIndex <= 0)
            {
                ht_Status1.Add("@Trans", "Order_Status_Report__ClientWise");
            }
            else if (ddl_Client_Status.SelectedIndex > 0 && ddl_Subprocess_Status.SelectedIndex > 0)
            {
                ht_Status1.Add("@Trans", "Order_Status_Report__Client_SubprocessWise");
            }
            else
            {
                ht_Status1.Add("@Trans", "Order_Status_Report_All_ClientWise");
            }

            ht_Status1.Add("@Fromdate", Fromdate);
            ht_Status1.Add("@Todate", Todate);
            ht_Status1.Add("@Clint", Client);
            ht_Status1.Add("@Log_In_Userid", userid);
            ht_Status1.Add("@Subprocess_Id", SubProcess);
            dt_Status1 = dataaccess.ExecuteSP("Sp_Order_Status_Report", ht_Status1);


            DataGridView grid_client_Data = new DataGridView();


            grid_client_Data.DataSource = dt_Status1;


            //Adding the Rows

            foreach (DataGridViewColumn column in Grd_OrderTime.Columns)
            {
                if (column.HeaderText != "")
                {
                    dt.Columns.Add(column.HeaderText, column.ValueType);
                }
            }

            //Adding the Rows
            foreach (DataGridViewRow row in Grd_OrderTime.Rows)
            {
                dt.Rows.Add();
                foreach (DataGridViewCell cell in row.Cells)
                {
                    if (cell.Value != null)
                    {
                        dt.Rows[dt.Rows.Count - 1][cell.ColumnIndex] = cell.Value.ToString();
                    }
                }
            }




            foreach (DataGridViewColumn column in grid_client_Data.Columns)
            {
                if (column.HeaderText != "")
                {
                    dt1.Columns.Add(column.HeaderText, column.ValueType);
                }
            }

            //Adding the Rows
            foreach (DataGridViewRow row in grid_client_Data.Rows)
            {
                dt1.Rows.Add();
                foreach (DataGridViewCell cell in row.Cells)
                {
                    if (cell.Value != null)
                    {
                        dt1.Rows[dt.Rows.Count - 1][cell.ColumnIndex] = cell.Value.ToString();
                    }
                }
            }





            //Exporting to Excel
            string folderPath = "C:\\Export\\";

            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }
            using (XLWorkbook wb = new XLWorkbook())
            {
                wb.Worksheets.Add(dt, "Count");
                wb.Worksheets.Add(dt1, "Orders");

                wb.SaveAs(folderPath + "Client_Production.xlsx");

            }

            System.Diagnostics.Process.Start(folderPath + "Client_Production.xlsx");
        }

        protected virtual bool IsFileinUse(FileInfo file)
        {
            FileStream stream = null;

            try
            {
                stream = file.Open(FileMode.Open, FileAccess.ReadWrite, FileShare.None);
            }
            catch (IOException)
            {
                //the file is unavailable because it is:
                //still being written to
                //or being processed by another thread
                //or does not exist (has already been processed)
                return true;
            }
            finally
            {
                if (stream != null)
                    stream.Close();
            }
            return false;
        }

        private void Export_Client_Wise_Employee_Production_ReportData()
        {



            System.Data.DataTable dt = new System.Data.DataTable();

            //Adding the Columns
            foreach (DataGridViewColumn column in grid_User_Production_Report.Columns)
            {
                if (column.HeaderText != "")
                {
                    if (column.ValueType == null)
                    {

                        dt.Columns.Add(column.HeaderText, typeof(string));

                    }
                    else
                    {

                        if (column.ValueType == typeof(int))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(int));

                        }
                        else if (column.ValueType == typeof(decimal))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(decimal));

                        }
                        else if (column.ValueType == typeof(DateTime))
                        {

                            dt.Columns.Add(column.HeaderText, typeof(string));
                        }
                        else
                        {
                            dt.Columns.Add(column.HeaderText, column.ValueType);
                        }
                    }
                }

            }

            //Adding the Rows
            foreach (DataGridViewRow row in grid_User_Production_Report.Rows)
            {
                dt.Rows.Add();
                foreach (DataGridViewCell cell in row.Cells)
                {
                    if (cell.Value != null && cell.Value.ToString() != null)
                    {
                        dt.Rows[dt.Rows.Count - 1][cell.ColumnIndex] = cell.Value.ToString();
                    }
                }
            }

            //Exporting to Excel
            string folderPath = "C:\\Temp\\";
            Path1 = folderPath + DateTime.Now.ToString("dd-MM-yyyy-hh-mm-ss") + "User_Production.xlsx";
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);


            }

            using (XLWorkbook wb = new XLWorkbook())
            {
                wb.Worksheets.Add(dt, "User Production Report");


                try
                {

                    wb.SaveAs(Path1);

                }
                catch (Exception ex)
                {

                    MessageBox.Show("File is Opened, Please Close and Export it");
                }



            }

            System.Diagnostics.Process.Start(Path1);
        }

        private void Export_MyClient_Wise_Employee_Production_ReportData()
        {



            System.Data.DataTable dt = new System.Data.DataTable();
            dt.Clear();
            //Adding the Columns
            foreach (DataGridViewColumn column in grd_My_Emp_Production.Columns)
            {
                if (column.HeaderText != "")
                {
                    if (column.ValueType == null)
                    {

                        dt.Columns.Add(column.HeaderText, typeof(string));

                    }
                    else
                    {
                        if (column.ValueType == typeof(int))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(int));

                        }
                        else if (column.ValueType == typeof(decimal))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(decimal));

                        }
                        else if (column.ValueType == typeof(DateTime))
                        {

                            dt.Columns.Add(column.HeaderText, typeof(string));
                        }
                        else
                        {
                            dt.Columns.Add(column.HeaderText, column.ValueType);
                        }
                    }
                }

            }

            //Adding the Rows
            foreach (DataGridViewRow row in grd_My_Emp_Production.Rows)
            {
                dt.Rows.Add();
                foreach (DataGridViewCell cell in row.Cells)
                {
                    if (cell.Value != null && cell.Value.ToString() != null)
                    {
                        dt.Rows[dt.Rows.Count - 1][cell.ColumnIndex] = cell.Value.ToString();
                    }
                }
            }

            //Exporting to Excel
            string folderPath = "C:\\Temp\\";
            Path1 = folderPath + DateTime.Now.ToString("dd-MM-yyyy-hh-mm-ss") + "User_Production.xlsx";
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);


            }

            using (XLWorkbook wb = new XLWorkbook())
            {
                wb.Worksheets.Add(dt, "User Production Report");


                try
                {

                    wb.SaveAs(Path1);

                }

                catch (Exception ex)
                {

                    MessageBox.Show("File is Opened, Please Close and Export it");
                }



            }

            System.Diagnostics.Process.Start(Path1);
        }

        private void Convert_Dataset_to_Excel()
        {
            Microsoft.Office.Interop.Excel.Application ExcelApp = new Microsoft.Office.Interop.Excel.Application();
            ExcelApp.Visible = true;
            Workbook xlWorkbook = ExcelApp.Workbooks.Add(XlWBATemplate.xlWBATWorksheet);

            DataTableCollection collection = ds.Tables;

            for (int i = collection.Count; i > 0; i--)
            {
                Sheets xlSheets = null;
                Worksheet xlWorksheet = null;
                //Create Excel Sheets
                xlSheets = ExcelApp.Worksheets;
                xlWorksheet = (Worksheet)xlSheets.Add(xlSheets[1],
                               Type.Missing, Type.Missing, Type.Missing);

                System.Data.DataTable table = collection[i - 1];
                xlWorksheet.Name = table.TableName;

                for (int j = 1; j < table.Columns.Count + 1; j++)
                {
                    ExcelApp.Cells[1, j] = table.Columns[j - 1].ColumnName;
                }

                // Storing Each row and column value to excel sheet
                for (int k = 0; k < table.Rows.Count; k++)
                {
                    for (int l = 0; l < table.Columns.Count; l++)
                    {
                        ExcelApp.Cells[k + 2, l + 1] =
                        table.Rows[k].ItemArray[l].ToString();
                    }
                }
                ExcelApp.Columns.AutoFit();
            }
            ((Worksheet)ExcelApp.ActiveWorkbook.Sheets[ExcelApp.ActiveWorkbook.Sheets.Count]).Delete();
            ExcelApp.Visible = true;

        }



        private void rbtn_Employee_Production_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtn_Employee_Production.Checked == true)
            {
                Employee_Report = "User Production Report";

                grid_User_Production_Report.Visible = true;
                crViewer.Visible = false;
            }
        }

        private void rbtn_Employee_Prd_Count_CheckedChanged(object sender, EventArgs e)
        {
            if (rbtn_Employee_Prd_Count.Checked == true)
            {
                Employee_Report = "User Production Count";
                grid_User_Production_Report.Visible = false;
                crViewer.Visible = true;
            }
        }

        private void btn_Employee_Refresh_Click(object sender, EventArgs e)
        {

            rbtn_Employee_Production_CheckedChanged(sender, e);
            rbtn_Employee_Prd_Count_CheckedChanged(sender, e);
            dtuserexport.Clear();
            load_Progressbar.Start_progres();
            //clsLoader.startProgress();
            Load_Grd_Master_Report();
            //clsLoader.stopProgress();
        }

        private void btn_Employee_Export_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            // clsLoader.startProgress();
            Export_Client_Wise_Employee_Production_ReportData();
            //DataSet dsexport = new DataSet();

            //dsexport.Clear();
            //dsexport.Tables.Add(dtuserexport);
            //ds = dsexport;
            //if (dsexport.Tables[0].Rows.Count > 0)
            //{
            //    Convert_Dataset_to_Excel();
            //}
            //ds.Clear();
            //dsexport.Clear();
            //dtuserexport.Clear();
            //clsLoader.stopProgress();
        }

        private void Grd_OrderTime_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            load_Progressbar.Start_progres();
            int Totalrowcount = Grd_OrderTime.Rows.Count - 1;
            if (e.RowIndex != -1)
            {
                // clsLoader.startProgress();
                int Sub_Process_Id;
                if (e.ColumnIndex == 1)
                {

                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grd_OrderTime.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RECIVD_ORDER_DATE_WISE_SUB_CLIENT", "GET_RECIVED_ORDER_DATEWISE_SUB_CLIENT_WISE_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RECIVD_ORDER_DATE_WISE_SUB_CLIENT", "GET_RECIVED_ORDER_DATEWISE_SUB_CLIENT_WISE_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RECIVD_ORDER_DATE_WISE", "GET_RECIVED_ORDER_DATEWISE_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RECIVD_ORDER_DATE_WISE", "GET_RECIVED_ORDER_DATEWISE_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }

                }

                else if (e.ColumnIndex == 2)
                {

                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grd_OrderTime.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RECIVD_ORDER_MTD_WISE_SUB_CLIENT_WISE", "GET_RECIVED_MTD_ORDER_MISE_COUNT_SUB_CLIENT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id,User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RECIVD_ORDER_MTD_WISE_SUB_CLIENT_WISE", "GET_RECIVED_MTD_ORDER_MISE_COUNT_SUB_CLIENT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RECIVD_ORDER_MTD_WISE", "GET_RECIVED_MTD_ORDER_MISE_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id,User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RECIVD_ORDER_MTD_WISE", "GET_RECIVED_MTD_ORDER_MISE_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }


                }
                else if (e.ColumnIndex == 3)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grd_OrderTime.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_COMPLETED_ORDER_DATE_SUB_CLIENT_WISE", "GET_COMPLETED_ORDER_DATE_WISE_COUNT_SUB_CLIENT_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id,User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_COMPLETED_ORDER_DATE_SUB_CLIENT_WISE", "GET_COMPLETED_ORDER_DATE_WISE_COUNT_SUB_CLIENT_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_COMPLETED_ORDER_DATE_WISE", "GET_COMPLETED_ORDER_DATE_WISE_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id,User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_COMPLETED_ORDER_DATE_WISE", "GET_COMPLETED_ORDER_DATE_WISE_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }



                }
                else if (e.ColumnIndex == 4)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grd_OrderTime.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_COMPLETED_ORDER_MTD_WISE_SUB_PROCESS_WISE", "GET_COMPLETED_ORDER_MTD_WISE_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id,User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_COMPLETED_ORDER_MTD_WISE_SUB_PROCESS_WISE", "GET_COMPLETED_ORDER_MTD_WISE_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_COMPLETED_ORDER_MTD_WISE", "GET_COMPLETED_ORDER_MTD_WISE_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id,User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_COMPLETED_ORDER_MTD_WISE", "GET_COMPLETED_ORDER_MTD_WISE_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }



                }

                else if (e.ColumnIndex == 5)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grd_OrderTime.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RESEARCH_ORDER_SUB_PROCESS_WISE", "GET_RESEARCH_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id,User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RESEARCH_ORDER_SUB_PROCESS_WISE", "GET_RESEARCH_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RESEARCH_ORDER", "GET_RESEARCH_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RESEARCH_ORDER", "GET_RESEARCH_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }




                }

                else if (e.ColumnIndex == 6)//tax
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grd_OrderTime.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TAX_ORDER_SUB_PROCESS_WISE", "GET_TAX_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TAX_ORDER_SUB_PROCESS_WISE", "GET_TAX_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TAX_ORDER", "GET_TAX_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TAX_ORDER", "GET_TAX_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }




                }
                else if (e.ColumnIndex == 7)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grd_OrderTime.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_SEARCH_ORDER_SUB_PROCESS_WISE", "GET_SEARCH_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        // OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_SEARCH_ORDER_SUB_PROCESS_WISE", "GET_SEARCH_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_SEARCH_ORDER", "GET_SEARCH_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_SEARCH_ORDER", "GET_SEARCH_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }




                }
                else if (e.ColumnIndex == 8)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grd_OrderTime.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_SEARCH_QC_ORDER_SUB_CLIENT_WISE", "GET_SEARCH_QC_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_SEARCH_QC_ORDER_SUB_CLIENT_WISE", "GET_SEARCH_QC_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_SEARCH_QC_ORDER", "GET_SEARCH_QC_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_SEARCH_QC_ORDER", "GET_SEARCH_QC_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }



                }
                else if (e.ColumnIndex == 9)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grd_OrderTime.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TYPING_ORDER_SUB_PROCESS_WISE", "GET_TYPING_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TYPING_ORDER_SUB_PROCESS_WISE", "GET_TYPING_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TYPING_ORDER", "GET_TYPING_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TYPING_ORDER", "GET_TYPING_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }



                }

                else if (e.ColumnIndex == 10)
                {


                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grd_OrderTime.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TYPING_QC_ORDER_SUB_PROCESS_WIESE", "GET_TYPING_QC_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TYPING_QC_ORDER_SUB_PROCESS_WIESE", "GET_TYPING_QC_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TYPING_QC_ORDER", "GET_TYPING_QC_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TYPING_QC_ORDER", "GET_TYPING_QC_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }



                }

                else if (e.ColumnIndex == 11)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grd_OrderTime.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_FINAL_QC_ORDER_SUB_PROCESS_WIESE", "GET_FINAL_QC_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_FINAL_QC_ORDER_SUB_PROCESS_WIESE", "GET_FINAL_QC_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_FINAL_QC_ORDER", "GET_FINAL_QC_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_FINAL_QC_ORDER", "GET_FINAL_QC_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }



                }
                else if (e.ColumnIndex == 12)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grd_OrderTime.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_UPLOAD_ORDER_SUB_PROCESS_WISE", "UPLOAD_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_UPLOAD_ORDER_SUB_PROCESS_WISE", "UPLOAD_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_UPLOAD_ORDER", "UPLOAD_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_UPLOAD_ORDER", "UPLOAD_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }



                }
                else if (e.ColumnIndex == 13)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grd_OrderTime.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_EXCEPTION_ORDER_SUB_PROCESS_WIESE", "GET_EXCEPTION_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_EXCEPTION_ORDER_SUB_PROCESS_WIESE", "GET_EXCEPTION_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_EXCEPTION_ORDER", "GET_EXCEPTION_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_EXCEPTION_ORDER", "GET_EXCEPTION_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }



                }
                else if (e.ColumnIndex == 14)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grd_OrderTime.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_ABSTRACTOR_ORDER_SUB_PROCESS_WISE", "GET_ABSTRATCOR_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_ABSTRACTOR_ORDER_SUB_PROCESS_WISE", "GET_ABSTRATCOR_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_ABSTRACTOR_ORDER", "GET_ABSTRATCOR_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_ABSTRACTOR_ORDER", "GET_ABSTRATCOR_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }



                }
                else if (e.ColumnIndex == 15)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grd_OrderTime.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_VENDOR_ORDER_SUB_PROCESS_WISE", "GET_VENDOR_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_VENDOR_ORDER_SUB_PROCESS_WISE", "GET_VENDOR_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_VENDOR_ORDER", "GET_VENDOR_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_VENDOR_ORDER", "GET_VENDOR_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }



                }

                else if (e.ColumnIndex == 16)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grd_OrderTime.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Clarification_ORDER_SUB_PROCESS_WISE ", "GET_CLARIFICATION_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Clarification_ORDER_SUB_PROCESS_WISE ", "GET_CLARIFICATION_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Clarification_ORDER ", "GET_CLARIFICATION_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Clarification_ORDER ", "GET_CLARIFICATION_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }




                }
                else if (e.ColumnIndex == 17)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grd_OrderTime.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Hold_ORDER_SUB_PROCESS_WISE", "GET_HOLDER_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Hold_ORDER_SUB_PROCESS_WISE", "GET_HOLDER_ORDER_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Hold_ORDER", "GET_HOLDER_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Hold_ORDER", "GET_HOLDER_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }


                }
                else if (e.ColumnIndex == 18)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grd_OrderTime.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Cancelled_ORDER_SUB_PROCESS_WISE", "GET_CANCEELED_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Cancelled_ORDER_SUB_PROCESS_WISE", "GET_CANCEELED_COUNT_SUB_PROCESS_WISE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Cancelled_ORDER", "GET_CANCEELED_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Cancelled_ORDER", "GET_CANCEELED_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }



                }
                else if (e.ColumnIndex == 19)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grd_OrderTime.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_WFT_ORDER_SUB_PROCESS_WISE", "WFT_ORDER_COUNT_SUB_RPOCESS_WIESE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_WFT_ORDER_SUB_PROCESS_WISE", "WFT_ORDER_COUNT_SUB_RPOCESS_WIESE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_WFT_ORDER", "WFT_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_WFT_ORDER", "WFT_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }

                }

                else if (e.ColumnIndex == 20)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grd_OrderTime.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TAX_INTERNAL_ORDER_SUB_PROCESS_WISE", "TAX_INTERNAL_ORDER_COUNT_SUB_RPOCESS_WIESE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TAX_INTERNAL_ORDER_SUB_PROCESS_WISE", "TAX_INTERNAL_ORDER_COUNT_SUB_RPOCESS_WIESE", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TAX_INTERNAL_ORDER", "TAX_INTERNAL_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details OrderView = new Ordermanagement_01.Order_View_Details(Grd_OrderTime.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TAX_INTERNAL_ORDER", "TAX_INTERNAL_ORDER_COUNT", txt_Fromdate.Text, txt_Todate.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        OrderView.Show();
                    }

                }


            }
            Grd_OrderTime_DataSourceChanged(sender, e);
            //clsLoader.stopProgress();
        }

        private void ddl_Client_Status_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ddl_Client_Status.SelectedIndex != 0)
            {
                int clientid = int.Parse(ddl_Client_Status.SelectedValue.ToString());
                if (User_Role_Id == "1")
                {
                    dbc.BindSubProcessName_rpt(ddl_Subprocess_Status, clientid);
                }
                else
                {

                    dbc.BindSubProcessNumber(ddl_Subprocess_Status, clientid);
                }
                ddl_Subprocess_Status.Focus();
            }
            else
            {

                if (User_Role_Id == "1")
                {
                    dbc.BindSubProcessName_rpt(ddl_Subprocess_Status, 0);
                }
                else
                {

                    dbc.BindSubProcessNumber(ddl_Subprocess_Status, 0);
                }
            }

        }

        private void invoiceToolStripMenuItem_Click(object sender, EventArgs e)
        {

            Invoice.Invoice_Orders_List il = new Invoice.Invoice_Orders_List(int.Parse(userid.ToString()), User_Role_Id, "");
            il.Show();


            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Invoice.Invoice_Orders_List(userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start();

        }

        private void lbl_Abstractor_Cancelled_Que_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Abstractor.Abstract_Order_Move Abs_view = new Ordermanagement_01.Abstractor.Abstract_Order_Move(userid, User_Role_Id, "Cancelled");
            Abs_view.Show();

            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Abstractor.Abstract_Order_Move(userid, User_Role_Id, "Cancelled")); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 
        }

        private void btn_Abstractor_Deallocate_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Abstractor.Abstractor_Order_Deallocate Abs_view = new Ordermanagement_01.Abstractor.Abstractor_Order_Deallocate(userid, User_Role_Id, "");
            Abs_view.Show();

            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Abstractor.Abstractor_Order_Deallocate(userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start();
        }

        private void documentListNameToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(10) != false)
            {

                Ordermanagement_01.Masters.Order_Document_List ol = new Masters.Order_Document_List(userid, lbl_username.Text);
                ol.Show();
            }
        }

        private void orderCostToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.InvoiceRep.Order_Cost oc = new InvoiceRep.Order_Cost(userid, User_Role_Id);
            oc.Show();

            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.InvoiceRep.Order_Cost(userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 
        }

        private void clientOrderCostToolStripMenuItem_Click(object sender, EventArgs e)

        {
            if (Validate_User_Access(11) != false)
            {

                Ordermanagement_01.Masters.Client_Order_Cost oc = new Ordermanagement_01.Masters.Client_Order_Cost(userid, User_Role_Id);
                oc.Show();
            }
        }

        private void oMSToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Directory.CreateDirectory(@"c:\DRN_Softwares");
            string temppath = @"c:\DRN_Softwares\DRN_Softwares.rar";
            string srcpath = @"\DRNOMSAPP\DRN_Softwares.rar";

            File.Copy(Environment.CurrentDirectory + srcpath, temppath, true);

            System.Diagnostics.Process.Start(temppath);
        }

        private void typingTaskConfirmationToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(12) != false)
            {
                Ordermanagement_01.Masters.ViewCountyJudgementsLinks CountyLink = new Ordermanagement_01.Masters.ViewCountyJudgementsLinks(userid);
                CountyLink.Show();
            }
        }

        private void lbl_Reassigned_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            Ordermanagement_01.Reassigned_Order_Move re = new Reassigned_Order_Move(userid);
            re.Show();
        }

        private void clientTemplateToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(5) != false)
            {
                Ordermanagement_01.Masters.Client_Template ct = new Masters.Client_Template(userid);
                ct.Show();
            }
        }

        private void taxLinkToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(13) != false)
            {
                Ordermanagement_01.Masters.Tax_Assessment_Link Tax_Assessment = new Ordermanagement_01.Masters.Tax_Assessment_Link(userid, lbl_username.Text);
                Tax_Assessment.Show();
            }
        }

        private void judgmentLinkToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(14) != false)
            {
                Ordermanagement_01.Judgment_Link Judgment = new Ordermanagement_01.Judgment_Link(userid, lbl_username.Text);
                Judgment.Show();
            }
        }

        private void userClientwiseReportsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(15) != false)
            {
                Ordermanagement_01.Masters.User_Clientwise_Reports User_Client = new Ordermanagement_01.Masters.User_Clientwise_Reports(userid, lbl_username.Text, User_Role_Id);
                User_Client.Show();
            }
        }

        private void lbl_Rus_Order_Count_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Rush_Order_View Rush_Order_View = new Ordermanagement_01.Rush_Order_View("GET_RUSH_ORDERS", userid, User_Role_Id, "");
            Rush_Order_View.Show();
        }

        private void lbl_Over_Due_Count_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Rush_Order_View Rush_Order_View = new Ordermanagement_01.Rush_Order_View("GET_OVER_DUE_ORDER", userid, User_Role_Id, "");
            Rush_Order_View.Show();
        }

        private void clientTATMatrixToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(25) != false)
            {
                Ordermanagement_01.Matrix.Client_Target_Matrix ct = new Matrix.Client_Target_Matrix(userid, User_Role_Id);
                ct.Show();
            }
        }

        private void employeeTATMatrixToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Matrix.Employee_Target_Matrix et = new Matrix.Employee_Target_Matrix(userid, User_Role_Id);
            et.Show();

        }

        private void lbl_Rus_Order_Work_COunt_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);

            try
            {

                Ordermanagement_01.Employee_View Emp_view = new Ordermanagement_01.Employee_View(12, "RUS_DUE_ORDERS_FOR_EMPLOYEE", userid, User_Role_Id, "Live", 1);
                Emp_view.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
        }

        private void tabControl1_SelectedIndexChanged(object sender, EventArgs e)
        {
            txt_My_From_Date.Value = DateTime.Now;
            txt_My_To_date.Value = DateTime.Now;
            dtp_Employee_From_Date.Value = DateTime.Now;
            dtp_Employee_To_Date.Value = DateTime.Now;
            txt_First_date.Value = DateTime.Now;
            txt_Second_Date.Value = DateTime.Now;
            dateTimePicker1.Value = DateTime.Now;
            //// clsLoader.startProgress();
            //load_Progressbar.Start_progres();
            //if (tabControl1.SelectedIndex == 2 || tabControl1.SelectedIndex == 5)
            //{
            //    if (User_Role_Id == "1")
            //    {
            //        dbc.Bind_UserClient_rpt(ddl_My_Client, userid);
            //    }
            //    else
            //    {
            //        dbc.Bind_UserClient_Number_rpt(ddl_My_Client, userid);
            //    }
            //    if (User_Role_Id == "1")
            //    {
            //        dbc.Bind_UserClient_rpt(ddl_Client_name, userid);
            //    }
            //    else
            //    {
            //        dbc.Bind_UserClient_Number_rpt(ddl_Client_name, userid);
            //    }
            //txt_My_From_Date.Value = DateTime.Now;
            //    txt_My_To_date.Value = DateTime.Now;
            //    dtp_Employee_From_Date.Value = DateTime.Now;
            //    dtp_Employee_To_Date.Value = DateTime.Now;
            //    dbc.Bind_Team_Members(ddl_My_Username, userid);
            //    dbc.BindOrderStatusRpt(ddl_My_Task);
            //    dbc.Bind_Order_Progress_rpt(ddl_My_Status);
            // //   dbc.Bind_UserClient_rpt(ddl_My_ClientName, userid);
            //    // dbc.BindOrder1(ddl_My_Ordernumber);
            //    //dbc.BindSubProcessName_rpt1(ddl_My_Sub_Client);
            //    if( tabControl1.SelectedIndex == 5)
            //    {
            //    Grid_My_Report.Focus();
            //    }
            //    else if(tabControl1.SelectedIndex == 2)
            //    {
            //    Grd_OrderTime.Focus();
            //    }
            //}
            //else if (tabControl1.SelectedIndex == 3)
            //{
            //}
            //clsLoader.stopProgress();

            load_Progressbar.Start_progres();
            //Grid_Score.Rows.Clear();
            //txt_Search_By_Employee_Name.Text = "";


            if (tabControl1.SelectedIndex == 2 || tabControl1.SelectedIndex == 5)
            {
                if (User_Role_Id == "1")
                {
                    dbc.Bind_UserClient_rpt(ddl_My_Client, userid);
                }
                else
                {
                    dbc.Bind_UserClient_Number_rpt(ddl_My_Client, userid);
                    // dbc.Bind_UserClient_Number_rpt_1(ddl_My_Client, userid);
                }

                if (User_Role_Id == "1")
                {
                    dbc.Bind_UserClient_rpt(ddl_Client_name, userid);
                }
                else
                {
                    dbc.Bind_UserClient_Number_rpt(ddl_Client_name, userid);

                }
                dbc.Bind_Team_Members(ddl_My_Username, userid);

                dbc.BindOrderStatusRpt(ddl_My_Task);
                dbc.Bind_Order_Progress_rpt(ddl_My_Status);

                if (tabControl1.SelectedIndex == 5)
                {
                    Grid_My_Report.Focus();
                }
                else if (tabControl1.SelectedIndex == 2)
                {
                    Grd_OrderTime.Focus();
                }
            }
        }

        private void ddl_My_Sub_Client_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ddl_My_Client.SelectedIndex > 0)
            {
                int clientid = int.Parse(ddl_My_Client.SelectedValue.ToString());
                if (User_Role_Id == "1")
                {
                    dbc.BindSubProcessName_rpt(ddl_My_Sub_Client, clientid);
                }
                else
                {

                    dbc.BindSubProcessNumber(ddl_My_Sub_Client, clientid);
                }
                ddl_My_Sub_Client.Focus();
            }
            else
            {
                //dbc.BindSubProcessName_rpt1(ddl_SubProcess);
            }
        }

        private void btn_My_Client_Refresh_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            Grid_My_Report.AutoGenerateColumns = false;
            Grid_My_Report.DataSource = null;

            Load_My_Client_Production_Count();

        }

        public void Load_My_Client_Production_Count()
        {
            if (ddl_My_Client.SelectedIndex != 0 && ddl_My_Client.SelectedIndex > 0)
            {
                Client = int.Parse(ddl_My_Client.SelectedValue.ToString());
            }
            if (ddl_My_Sub_Client.SelectedIndex > 0)
            {
                SubProcess = int.Parse(ddl_My_Sub_Client.SelectedValue.ToString());

            }
            else
            {

                SubProcess = 0;
            }

            //Inserting Comment Values to Temp table
            Hashtable htcomment = new Hashtable();
            htcomment.Add("@Trans", "INSERT");
            System.Data.DataTable dtcomment = new System.Data.DataTable();
            dtcomment = dataaccess.ExecuteSP("Sp_Temp_User_Order_Comments", htcomment);

            DateTime Fromdate = Convert.ToDateTime(txt_My_From_Date.Text.ToString());
            DateTime Todate = Convert.ToDateTime(txt_My_To_date.Text.ToString());


            DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;


            Hashtable ht_Status = new Hashtable();
            System.Data.DataTable dt_Status = new System.Data.DataTable();

            dt_Status.Rows.Clear();
            dtclientexport.Clear();

            if (User_Role_Id != "2")
            {
                if (ddl_My_Client.SelectedIndex != 0 && ddl_My_Sub_Client.SelectedIndex == 0)
                {
                    ht_Status.Add("@Trans", "CLIENT_WISE_PRODUCTION_COUNT");
                }
                else if (ddl_My_Client.SelectedIndex != 0 && ddl_My_Sub_Client.SelectedIndex != 0 && ddl_My_Client.Text != "" && ddl_My_Sub_Client.Text != "")
                {
                    ht_Status.Add("@Trans", "CLIENT_SUBPROCESS_WISE_PRODUCTION_COUNT");
                }

                else
                {
                    ht_Status.Add("@Trans", "MY_ALL_CLIENT_WISE_PRODUCTION_COUNT");
                    ht_Status.Add("@My_Clients", My_Client);

                }

            }

            ht_Status.Add("@Fromdate", Fromdate);
            ht_Status.Add("@Todate", Todate);
            ht_Status.Add("@Clint", Client);
            ht_Status.Add("@Log_In_Userid", userid);
            ht_Status.Add("@user_id", userid);
            ht_Status.Add("@Subprocess_Id", SubProcess);
            dt_Status = dataaccess.ExecuteSP("Sp_Order_Status_Report", ht_Status);
            dtclientexport = dt_Status;
            if (dt_Status.Rows.Count > 0)
            {
                Grid_My_Report.Rows.Clear();
                Grid_My_Report.DataSource = null;

                //Grd_OrderTime.ColumnHeadersDefaultCellStyle.BackColor = System.Drawing.Color.DarkCyan;
                //Grd_OrderTime.EnableHeadersVisualStyles = false;
                //Grd_OrderTime.AutoGenerateColumns = false;
                Grid_My_Report.ColumnCount = 23;

                if (User_Role_Id == "1")
                {
                    Grid_My_Report.Columns[0].Name = "Client";
                    Grid_My_Report.Columns[0].HeaderText = "Client name";
                    Grid_My_Report.Columns[0].DataPropertyName = "Client";
                    Grid_My_Report.Columns[0].Width = 120;
                }
                else
                {
                    Grid_My_Report.Columns[0].Name = "Client_Number";
                    Grid_My_Report.Columns[0].HeaderText = "Client Number";
                    Grid_My_Report.Columns[0].DataPropertyName = "Client_Number";
                    Grid_My_Report.Columns[0].Width = 120;

                }

                Grid_My_Report.Columns[1].Name = "R_Current_Day";
                Grid_My_Report.Columns[1].HeaderText = "R-" + txt_My_To_date.Text;
                Grid_My_Report.Columns[1].DataPropertyName = "R_Current_Day";
                Grid_My_Report.Columns[1].Width = 70;

                String dy = Todate.Day.ToString();
                String mn = Todate.Month.ToString();
                String yy = Todate.Year.ToString();
                Grid_My_Report.Columns[2].Name = "R_MTD";
                Grid_My_Report.Columns[2].HeaderText = "R(MTD)" + "-" + mn + "/" + yy + "";
                Grid_My_Report.Columns[2].DataPropertyName = "R_MTD";
                Grid_My_Report.Columns[2].Width = 80;

                Grid_My_Report.Columns[3].Name = "C_Current_Day";
                Grid_My_Report.Columns[3].HeaderText = "C-" + txt_My_To_date.Text;
                Grid_My_Report.Columns[3].DataPropertyName = "C_Current_Day";
                Grid_My_Report.Columns[3].Width = 70;

                Grid_My_Report.Columns[4].Name = "C_MTD";
                Grid_My_Report.Columns[4].HeaderText = "C(MTD)" + "-" + mn + "/" + yy + "";
                Grid_My_Report.Columns[4].DataPropertyName = "C_MTD";
                Grid_My_Report.Columns[4].Width = 80;

                Grid_My_Report.Columns[5].Name = "Research";
                Grid_My_Report.Columns[5].HeaderText = "Research";
                Grid_My_Report.Columns[5].DataPropertyName = "Research";
                Grid_My_Report.Columns[5].Width = 50;



                Grid_My_Report.Columns[6].Name = "Tax";
                Grid_My_Report.Columns[6].HeaderText = "Tax";
                Grid_My_Report.Columns[6].DataPropertyName = "Tax";
                Grid_My_Report.Columns[6].Width = 50;


                Grid_My_Report.Columns[7].Name = "Search";
                Grid_My_Report.Columns[7].HeaderText = "Search";
                Grid_My_Report.Columns[7].DataPropertyName = "Search";
                Grid_My_Report.Columns[7].Width = 50;



                Grid_My_Report.Columns[8].Name = "Search_Qc";
                Grid_My_Report.Columns[8].HeaderText = "Search Qc";
                Grid_My_Report.Columns[8].DataPropertyName = "Search_Qc";
                Grid_My_Report.Columns[8].Width = 70;

                Grid_My_Report.Columns[9].Name = "Typing";
                Grid_My_Report.Columns[9].HeaderText = "Typing";
                Grid_My_Report.Columns[9].DataPropertyName = "Typing";
                Grid_My_Report.Columns[9].Width = 50;


                Grid_My_Report.Columns[10].Name = "Typing_QC";
                Grid_My_Report.Columns[10].HeaderText = "Typing_QC";
                Grid_My_Report.Columns[10].DataPropertyName = "Typing_QC";
                Grid_My_Report.Columns[10].Width = 70;


                Grid_My_Report.Columns[11].Name = "Final_QC";
                Grid_My_Report.Columns[11].HeaderText = "Final_QC";
                Grid_My_Report.Columns[11].DataPropertyName = "Final_QC";
                Grid_My_Report.Columns[11].Width = 70;

                Grid_My_Report.Columns[12].Name = "Upload";
                Grid_My_Report.Columns[12].HeaderText = "Upload";
                Grid_My_Report.Columns[12].DataPropertyName = "Upload";
                Grid_My_Report.Columns[12].Width = 50;

                Grid_My_Report.Columns[13].Name = "Exception";
                Grid_My_Report.Columns[13].HeaderText = "Exception";
                Grid_My_Report.Columns[13].DataPropertyName = "Exception";
                Grid_My_Report.Columns[13].Width = 70;

                Grid_My_Report.Columns[14].Name = "Abstractor";
                Grid_My_Report.Columns[14].HeaderText = "Abstractor";
                Grid_My_Report.Columns[14].DataPropertyName = "Abstractor";
                Grid_My_Report.Columns[14].Width = 70;

                Grid_My_Report.Columns[15].Name = "Vendor";
                Grid_My_Report.Columns[15].HeaderText = "Vendor";
                Grid_My_Report.Columns[15].DataPropertyName = "Vendor";
                Grid_My_Report.Columns[15].Width = 70;



                Grid_My_Report.Columns[16].Name = "Clarification";
                Grid_My_Report.Columns[16].HeaderText = "Clarification";
                Grid_My_Report.Columns[16].DataPropertyName = "Clarification";
                Grid_My_Report.Columns[16].Width = 70;

                Grid_My_Report.Columns[17].Name = "Hold";
                Grid_My_Report.Columns[17].HeaderText = "Hold";
                Grid_My_Report.Columns[17].DataPropertyName = "Hold";
                Grid_My_Report.Columns[17].Width = 50;

                Grid_My_Report.Columns[18].Name = "Cancelled";
                Grid_My_Report.Columns[18].HeaderText = "Cancelled";
                Grid_My_Report.Columns[18].DataPropertyName = "Cancelled";
                Grid_My_Report.Columns[18].Width = 70;



                Grid_My_Report.Columns[19].Name = "WFT";
                Grid_My_Report.Columns[19].HeaderText = "WFT";
                Grid_My_Report.Columns[19].DataPropertyName = "WFT";
                Grid_My_Report.Columns[19].Width = 50;

                Grid_My_Report.Columns[20].Name = "Search_Tax";
                Grid_My_Report.Columns[20].HeaderText = "SEARCH TAX REQ";
                Grid_My_Report.Columns[20].DataPropertyName = "Search_Tax";
                Grid_My_Report.Columns[20].Width = 50;


                Grid_My_Report.Columns[21].Name = "Client_Id";
                Grid_My_Report.Columns[21].HeaderText = "Client_Id";
                Grid_My_Report.Columns[21].DataPropertyName = "Client_Id";
                Grid_My_Report.Columns[21].Visible = false;

                if (ddl_My_Client.SelectedIndex != 0 && ddl_My_Client.SelectedIndex != 0 && ddl_My_Sub_Client.SelectedIndex != 0 && ddl_My_Sub_Client.SelectedIndex != 0)
                {


                    Grid_My_Report.Columns[22].Name = "Subprocess_Id";
                    Grid_My_Report.Columns[22].HeaderText = "Subprocess_Id";
                    Grid_My_Report.Columns[22].DataPropertyName = "Subprocess_Id";
                    Grid_My_Report.Columns[22].Visible = false;

                    Pass_Sub_Process_Id = 1;

                }
                else
                {

                    Pass_Sub_Process_Id = 0;
                }
                Grid_My_Report.Visible = true;
                Grid_My_Report.DataSource = dt_Status;

                Grid_My_Report.Focus();

            }
            else
            {
                Grd_OrderTime.Visible = false;
                Grd_OrderTime.DataSource = null;
                Grd_OrderTime.Rows.Clear();

            }




        }

        private void btn_My_Client_Export_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            // clsLoader.startProgress();
            DataSet dsexport = new DataSet();

            if (ddl_My_Client.SelectedIndex != 0 && ddl_My_Client.SelectedIndex > 0)
            {
                Client = int.Parse(ddl_My_Client.SelectedValue.ToString());
            }

            if (ddl_My_Sub_Client.SelectedIndex > 0)
            {
                SubProcess = int.Parse(ddl_My_Sub_Client.SelectedValue.ToString());

            }
            else
            {

                SubProcess = 0;
            }
            DateTime Fromdate = Convert.ToDateTime(txt_My_From_Date.Text.ToString());
            DateTime Todate = Convert.ToDateTime(txt_My_To_date.Text.ToString());


            DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;
            DateTime seldate = Convert.ToDateTime(txt_My_To_date.Text, usDtfi);

            Hashtable ht_Status1 = new Hashtable();
            System.Data.DataTable dt_Status1 = new System.Data.DataTable();

            if (User_Role_Id == "1")
            {
                if (ddl_Client_Status.Text != "ALL" && ddl_Subprocess_Status.Text == "ALL")
                {
                    ht_Status1.Add("@Trans", "Order_Status_Report__ClientWise");
                }
                else if (ddl_Client_Status.Text != "ALL" && ddl_Subprocess_Status.Text != "ALL")
                {
                    ht_Status1.Add("@Trans", "Order_Status_Report__Client_SubprocessWise");
                }
                else
                {
                    ht_Status1.Add("@Trans", "Order_Status_Report_All_My_ClientWise");
                }
            }


            if (User_Role_Id != "1")
            {

                if (ddl_My_Client.SelectedIndex != 0 && ddl_My_Sub_Client.SelectedIndex == 0)
                {
                    ht_Status1.Add("@Trans", "Order_Status_Report_ClientWise_Employee_User_Role");
                }
                else if (ddl_My_Client.SelectedIndex != 0 && ddl_My_Sub_Client.SelectedIndex != 0 && ddl_My_Client.Text != "" && ddl_My_Sub_Client.Text != "")
                {
                    ht_Status1.Add("@Trans", "Order_Status_Report__Client_SubprocessWise_Employee_User_Role");
                }
                else
                {
                    ht_Status1.Add("@Trans", "Order_Status_Report_All_My_ClientWise_Employe_User_Role");

                    ht_Status1.Add("@My_Clients", My_Client);
                }
            }


            ht_Status1.Add("@Fromdate", Fromdate);
            ht_Status1.Add("@Todate", Todate);
            ht_Status1.Add("@Clint", Client);
            ht_Status1.Add("@Subprocess_Id", SubProcess);
            ht_Status1.Add("@Log_In_Userid", userid);

            dt_Status1 = dataaccess.ExecuteSP("Sp_Order_Status_Report", ht_Status1);
            dtclientReport = dt_Status1;

            Export_MyClient_ProductionData();


        }

        private void ddl_My_Client_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ddl_My_Client.SelectedIndex != 0)
            {
                int clientid = int.Parse(ddl_My_Client.SelectedValue.ToString());

                if (User_Role_Id == "1")
                {
                    dbc.BindSubProcessName_rpt(ddl_My_Sub_Client, clientid);
                }
                else
                {
                    dbc.BindSubProcessNumber(ddl_My_Sub_Client, clientid);

                }
            }
            else
            {
                //dbc.BindSubProcessName_rpt1(ddl_SubProcess);
            }
        }

        private void Grid_My_Report_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            int Totalrowcount = Grid_My_Report.Rows.Count - 1;
            if (e.RowIndex != -1 && e.RowIndex != Totalrowcount)
            {
                load_Progressbar.Start_progres();
                //clsLoader.startProgress();
                int Sub_Process_Id;
                if (e.ColumnIndex == 1)
                {

                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grid_My_Report.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[20].Value.ToString(), "GET_RECIVD_ORDER_DATE_WISE_SUB_CLIENT", "GET_RECIVED_ORDER_DATEWISE_SUB_CLIENT_WISE_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[20].Value.ToString(), "GET_RECIVD_ORDER_DATE_WISE_SUB_CLIENT", "GET_RECIVED_ORDER_DATEWISE_SUB_CLIENT_WISE_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RECIVD_ORDER_DATE_WISE", "GET_RECIVED_ORDER_DATEWISE_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RECIVD_ORDER_DATE_WISE", "GET_RECIVED_ORDER_DATEWISE_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }


                }

                else if (e.ColumnIndex == 2)
                {

                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grid_My_Report.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RECIVD_ORDER_MTD_WISE_SUB_CLIENT_WISE", "GET_RECIVED_MTD_ORDER_MISE_COUNT_SUB_CLIENT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RECIVD_ORDER_MTD_WISE_SUB_CLIENT_WISE", "GET_RECIVED_MTD_ORDER_MISE_COUNT_SUB_CLIENT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RECIVD_ORDER_MTD_WISE", "GET_RECIVED_MTD_ORDER_MISE_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RECIVD_ORDER_MTD_WISE", "GET_RECIVED_MTD_ORDER_MISE_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }


                }
                else if (e.ColumnIndex == 3)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grid_My_Report.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_COMPLETED_ORDER_DATE_SUB_CLIENT_WISE", "GET_COMPLETED_ORDER_DATE_WISE_COUNT_SUB_CLIENT_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_COMPLETED_ORDER_DATE_SUB_CLIENT_WISE", "GET_COMPLETED_ORDER_DATE_WISE_COUNT_SUB_CLIENT_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_COMPLETED_ORDER_DATE_WISE", "GET_COMPLETED_ORDER_DATE_WISE_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_COMPLETED_ORDER_DATE_WISE", "GET_COMPLETED_ORDER_DATE_WISE_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }



                }
                else if (e.ColumnIndex == 4)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grid_My_Report.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_COMPLETED_ORDER_MTD_WISE_SUB_PROCESS_WISE", "GET_COMPLETED_ORDER_MTD_WISE_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_COMPLETED_ORDER_MTD_WISE_SUB_PROCESS_WISE", "GET_COMPLETED_ORDER_MTD_WISE_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_COMPLETED_ORDER_MTD_WISE", "GET_COMPLETED_ORDER_MTD_WISE_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_COMPLETED_ORDER_MTD_WISE", "GET_COMPLETED_ORDER_MTD_WISE_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }



                }

                else if (e.ColumnIndex == 5)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grid_My_Report.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RESEARCH_ORDER_SUB_PROCESS_WISE", "GET_RESEARCH_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RESEARCH_ORDER_SUB_PROCESS_WISE", "GET_RESEARCH_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RESEARCH_ORDER", "REGET_SEARCH_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();


                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_RESEARCH_ORDER", "REGET_SEARCH_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }




                }
                // Tax
                else if (e.ColumnIndex == 6)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grid_My_Report.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TAX_ORDER_SUB_PROCESS_WISE", "GET_TAX_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TAX_ORDER_SUB_PROCESS_WISE", "GET_TAX_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TAX_ORDER", "GET_TAX_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview1 = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TAX_ORDER", "GET_TAX_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview1.Show();
                    }




                }
                else if (e.ColumnIndex == 7)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grid_My_Report.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_SEARCH_ORDER_SUB_PROCESS_WISE", "GET_SEARCH_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();
                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_SEARCH_ORDER_SUB_PROCESS_WISE", "GET_SEARCH_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_SEARCH_ORDER", "GET_SEARCH_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();


                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_SEARCH_ORDER", "GET_SEARCH_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }




                }
                else if (e.ColumnIndex == 8)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grid_My_Report.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_SEARCH_QC_ORDER_SUB_CLIENT_WISE", "GET_SEARCH_QC_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_SEARCH_QC_ORDER_SUB_CLIENT_WISE", "GET_SEARCH_QC_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_SEARCH_QC_ORDER", "GET_SEARCH_QC_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_SEARCH_QC_ORDER", "GET_SEARCH_QC_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }



                }
                else if (e.ColumnIndex == 9)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grid_My_Report.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TYPING_ORDER_SUB_PROCESS_WISE", "GET_TYPING_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TYPING_ORDER_SUB_PROCESS_WISE", "GET_TYPING_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TYPING_ORDER", "GET_TYPING_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TYPING_ORDER", "GET_TYPING_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }



                }
                else if (e.ColumnIndex == 10)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grid_My_Report.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TYPING_QC_ORDER_SUB_PROCESS_WIESE", "GET_TYPING_QC_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TYPING_QC_ORDER_SUB_PROCESS_WIESE", "GET_TYPING_QC_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TYPING_QC_ORDER", "GET_TYPING_QC_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TYPING_QC_ORDER", "GET_TYPING_QC_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }



                }
                else if (e.ColumnIndex == 11)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grid_My_Report.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_FINAL_QC_ORDER_SUB_PROCESS_WIESE", "GET_FINAL_QC_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_FINAL_QC_ORDER_SUB_PROCESS_WIESE", "GET_FINAL_QC_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_FINAL_QC_ORDER", "GET_FINAL_QC_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_FINAL_QC_ORDER", "GET_FINAL_QC_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }



                }
                else if (e.ColumnIndex == 12)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grid_My_Report.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_UPLOAD_ORDER_SUB_PROCESS_WISE", "UPLOAD_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_UPLOAD_ORDER_SUB_PROCESS_WISE", "UPLOAD_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_UPLOAD_ORDER", "UPLOAD_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_UPLOAD_ORDER", "UPLOAD_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();


                    }



                }
                else if (e.ColumnIndex == 13)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grid_My_Report.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_EXCEPTION_ORDER_SUB_PROCESS_WIESE", "GET_EXCEPTION_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_EXCEPTION_ORDER_SUB_PROCESS_WIESE", "GET_EXCEPTION_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_EXCEPTION_ORDER", "GET_EXCEPTION_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_EXCEPTION_ORDER", "GET_EXCEPTION_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();

                    }



                }
                else if (e.ColumnIndex == 14)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grid_My_Report.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_ABSTRACTOR_ORDER_SUB_PROCESS_WISE", "GET_ABSTRATCOR_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_ABSTRACTOR_ORDER_SUB_PROCESS_WISE", "GET_ABSTRATCOR_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();

                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_ABSTRACTOR_ORDER", "GET_ABSTRATCOR_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_ABSTRACTOR_ORDER", "GET_ABSTRATCOR_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();

                    }



                }
                else if (e.ColumnIndex == 15)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grid_My_Report.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_VENDOR_ORDER_SUB_PROCESS_WISE", "GET_VENDOR_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();


                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_VENDOR_ORDER_SUB_PROCESS_WISE", "GET_VENDOR_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();

                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_VENDOR_ORDER", "GET_VENDOR_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_VENDOR_ORDER", "GET_VENDOR_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }



                }

                else if (e.ColumnIndex == 16)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grid_My_Report.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Clarification_ORDER_SUB_PROCESS_WISE ", "GET_CLARIFICATION_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Clarification_ORDER_SUB_PROCESS_WISE ", "GET_CLARIFICATION_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Clarification_ORDER ", "GET_CLARIFICATION_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Clarification_ORDER ", "GET_CLARIFICATION_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }




                }
                else if (e.ColumnIndex == 17)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grid_My_Report.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Hold_ORDER_SUB_PROCESS_WISE", "GET_HOLDER_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Hold_ORDER_SUB_PROCESS_WISE", "GET_HOLDER_ORDER_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Hold_ORDER", "GET_HOLDER_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Hold_ORDER", "GET_HOLDER_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();

                    }


                }
                else if (e.ColumnIndex == 18)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grid_My_Report.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Cancelled_ORDER_SUB_PROCESS_WISE", "GET_CANCEELED_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Cancelled_ORDER_SUB_PROCESS_WISE", "GET_CANCEELED_COUNT_SUB_PROCESS_WISE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();


                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Cancelled_ORDER", "GET_CANCEELED_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Cancelled_ORDER", "GET_CANCEELED_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }



                }
                else if (e.ColumnIndex == 19)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grid_My_Report.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_WFT_ORDER_SUB_PROCESS_WISE", "WFT_ORDER_COUNT_SUB_RPOCESS_WIESE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id,"");
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_Cancelled_ORDER", "GET_CANCEELED_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, "");
                        Orderview.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_WFT_ORDER", "WFT_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id,Production_Date);
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_WFT_ORDER", "WFT_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, Production_Date);
                        Orderview.Show();
                    }



                }
                else if (e.ColumnIndex == 20)
                {
                    if (Pass_Sub_Process_Id != 0)
                    {

                        Sub_Process_Id = int.Parse(Grid_My_Report.Rows[e.RowIndex].Cells[22].Value.ToString());
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TAX_INTERNAL_ORDER_SUB_PROCESS_WISE", "TAX_INTERNAL_ORDER_COUNT_SUB_RPOCESS_WIESE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, Production_Date);
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TAX_INTERNAL_ORDER_SUB_PROCESS_WISE", "TAX_INTERNAL_ORDER_COUNT_SUB_RPOCESS_WIESE", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, Production_Date);
                        Orderview.Show();
                    }
                    else
                    {

                        Sub_Process_Id = 0;
                        //Ordermanagement_01.Order_View OrderEntry = new Ordermanagement_01.Order_View(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TAX_INTERNAL_ORDER", "TAX_INTERNAL_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, Production_Date);
                        //OrderEntry.Show();

                        Ordermanagement_01.Order_View_Details Orderview = new Ordermanagement_01.Order_View_Details(Grid_My_Report.Rows[e.RowIndex].Cells[21].Value.ToString(), "GET_TAX_INTERNAL_ORDER", "TAX_INTERNAL_ORDER_COUNT", txt_My_From_Date.Text, txt_My_To_date.Text, userid, Sub_Process_Id, User_Role_Id, Production_Date);
                        Orderview.Show();
                    }



                }


            }
            Grid_My_Report_DataSourceChanged(sender, e);
            // clsLoader.stopProgress();
        }

        private void btn_Email_Alerts_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Alerts.Email_Alert ea = new Alerts.Email_Alert(userid, User_Role_Id);
            ea.Show();
        }


        //private void ToolStripButton17_MouseEnter(object sender, EventArgs e)
        //{
        //    ToolStripButton17.ForeColor = Color.Black;
        //}

        //private void ToolStripButton17_MouseLeave(object sender, EventArgs e)
        //{
        //    ToolStripButton17.ForeColor = Color.White;
        //}

        //private void ToolStripButton16_MouseEnter(object sender, EventArgs e)
        //{
        //    ToolStripButton16.ForeColor = Color.Black;
        //}

        //private void ToolStripButton16_MouseLeave(object sender, EventArgs e)
        //{
        //    ToolStripButton16.ForeColor = Color.White;
        //}

        //private void toolStripButton2_MouseEnter(object sender, EventArgs e)
        //{
        //    toolStripButton2.ForeColor = Color.Black;
        //}

        //private void toolStripButton2_MouseLeave(object sender, EventArgs e)
        //{
        //    toolStripButton2.ForeColor = Color.White;
        //}

        //private void ToolStripButton15_MouseEnter(object sender, EventArgs e)
        //{
        //    ToolStripButton15.ForeColor = Color.Black;
        //}

        //private void ToolStripButton15_MouseLeave(object sender, EventArgs e)
        //{
        //    ToolStripButton15.ForeColor = Color.White;
        //}

        //private void ToolStripButton14_MouseEnter(object sender, EventArgs e)
        //{
        //    ToolStripButton14.ForeColor = Color.Black;
        //}

        //private void ToolStripButton14_MouseLeave(object sender, EventArgs e)
        //{
        //    ToolStripButton14.ForeColor = Color.White;
        //}

        //private void toolStripButton1_MouseEnter(object sender, EventArgs e)
        //{
        //    toolStripButton1.ForeColor = Color.Black;

        //}

        //private void toolStripButton1_MouseLeave(object sender, EventArgs e)
        //{
        //    toolStripButton1.ForeColor = Color.White;
        //}

        //private void ToolStripButton11_MouseEnter(object sender, EventArgs e)
        //{
        //    ToolStripButton11.ForeColor = Color.Black;
        //}

        //private void ToolStripButton11_MouseLeave(object sender, EventArgs e)
        //{
        //    ToolStripButton11.ForeColor = Color.White;
        //}

        //private void ToolStripButton10_MouseEnter(object sender, EventArgs e)
        //{
        //    ToolStripButton10.ForeColor = Color.Black;
        //}

        //private void ToolStripButton10_MouseLeave(object sender, EventArgs e)
        //{
        //    ToolStripButton10.ForeColor = Color.White;
        //}

        //private void MastersToolStripMenuItem_DropDownOpened(object sender, EventArgs e)
        //{
        //    MastersToolStripMenuItem.ForeColor = Color.Black;
        //}

        //private void MastersToolStripMenuItem_DropDownClosed(object sender, EventArgs e)
        //{
        //    MastersToolStripMenuItem.ForeColor = Color.White;
        //}

        //private void TransactionsToolStripMenuItem_DropDownOpened(object sender, EventArgs e)
        //{
        //    TransactionsToolStripMenuItem.ForeColor = Color.Black;
        //}

        //private void TransactionsToolStripMenuItem_DropDownClosed(object sender, EventArgs e)
        //{
        //    TransactionsToolStripMenuItem.ForeColor = Color.White;
        //}

        //private void ReportsToolStripMenuItem_DropDownOpened(object sender, EventArgs e)
        //{
        //    ReportsToolStripMenuItem.ForeColor = Color.Black;

        //}

        //private void ReportsToolStripMenuItem_DropDownClosed(object sender, EventArgs e)
        //{
        //    ReportsToolStripMenuItem.ForeColor = Color.White;
        //}

        //private void AdminstrationToolStripMenuItem_DropDownOpened(object sender, EventArgs e)
        //{
        //    AdminstrationToolStripMenuItem.ForeColor = Color.Black;

        //}

        //private void AdminstrationToolStripMenuItem_DropDownClosed(object sender, EventArgs e)
        //{
        //    AdminstrationToolStripMenuItem.ForeColor = Color.White;

        //}

        //private void ToolsToolStripMenuItem_DropDownOpened(object sender, EventArgs e)
        //{
        //    ToolsToolStripMenuItem.ForeColor = Color.Black;

        //}

        //private void ToolsToolStripMenuItem_DropDownClosed(object sender, EventArgs e)
        //{
        //    ToolsToolStripMenuItem.ForeColor = Color.White;
        //}

        //private void AboutUsToolStripMenuItem_DropDownOpened(object sender, EventArgs e)
        //{
        //    AboutUsToolStripMenuItem.ForeColor = Color.Black;

        //}

        //private void AboutUsToolStripMenuItem_DropDownClosed(object sender, EventArgs e)
        //{
        //    AboutUsToolStripMenuItem.ForeColor = Color.White;

        //}

        //private void webSearcherToolStripMenuItem1_DropDownOpened(object sender, EventArgs e)
        //{
        //    webSearcherToolStripMenuItem1.ForeColor = Color.Black;
        //}

        //private void webSearcherToolStripMenuItem1_DropDownClosed(object sender, EventArgs e)
        //{
        //    webSearcherToolStripMenuItem1.ForeColor = Color.White;
        //}

        //private void abastractorToolStripMenuItem_DropDownOpened(object sender, EventArgs e)
        //{
        //    abastractorToolStripMenuItem.ForeColor = Color.Black;
        //}

        //private void abastractorToolStripMenuItem_DropDownClosed(object sender, EventArgs e)
        //{
        //    abastractorToolStripMenuItem.ForeColor = Color.White;
        //}

        //private void invoiceToolStripMenuItem_DropDownOpened(object sender, EventArgs e)
        //{
        //    invoiceToolStripMenuItem.ForeColor = Color.Black;
        //}

        //private void invoiceToolStripMenuItem_DropDownClosed(object sender, EventArgs e)
        //{
        //    invoiceToolStripMenuItem.ForeColor = Color.White;
        //}

        ////private void MastersToolStripMenuItem_MouseEnter(object sender, EventArgs e)
        ////{
        ////    MastersToolStripMenuItem.ForeColor = Color.Black;
        ////}

        ////private void MastersToolStripMenuItem_MouseLeave(object sender, EventArgs e)
        ////{
        ////    MastersToolStripMenuItem.ForeColor = Color.White;
        ////}

        //private void TransactionsToolStripMenuItem_MouseEnter(object sender, EventArgs e)
        //{
        //    TransactionsToolStripMenuItem.ForeColor = Color.Black;
        //}

        //private void TransactionsToolStripMenuItem_MouseLeave(object sender, EventArgs e)
        //{
        //    TransactionsToolStripMenuItem.ForeColor = Color.White;
        //}

        //private void ReportsToolStripMenuItem_MouseEnter(object sender, EventArgs e)
        //{
        //    ReportsToolStripMenuItem.ForeColor = Color.Black;
        //}

        //private void ReportsToolStripMenuItem_MouseLeave(object sender, EventArgs e)
        //{
        //    ReportsToolStripMenuItem.ForeColor = Color.White;
        //}

        //private void AdminstrationToolStripMenuItem_MouseEnter(object sender, EventArgs e)
        //{
        //    AdminstrationToolStripMenuItem.ForeColor = Color.Black;
        //}

        //private void AdminstrationToolStripMenuItem_MouseLeave(object sender, EventArgs e)
        //{
        //    AdminstrationToolStripMenuItem.ForeColor = Color.White;
        //}

        //private void ToolsToolStripMenuItem_MouseEnter(object sender, EventArgs e)
        //{
        //    ToolsToolStripMenuItem.ForeColor = Color.Black;
        //}

        //private void ToolsToolStripMenuItem_MouseLeave(object sender, EventArgs e)
        //{
        //    ToolsToolStripMenuItem.ForeColor = Color.White;
        //}

        //private void AboutUsToolStripMenuItem_MouseEnter(object sender, EventArgs e)
        //{
        //    AboutUsToolStripMenuItem.ForeColor = Color.Black;
        //}

        //private void AboutUsToolStripMenuItem_MouseLeave(object sender, EventArgs e)
        //{
        //    AboutUsToolStripMenuItem.ForeColor = Color.White;
        //}

        //private void webSearcherToolStripMenuItem1_MouseEnter(object sender, EventArgs e)
        //{
        //    webSearcherToolStripMenuItem1.ForeColor = Color.Black;
        //}

        //private void webSearcherToolStripMenuItem1_MouseLeave(object sender, EventArgs e)
        //{
        //    webSearcherToolStripMenuItem1.ForeColor = Color.White;

        //}

        //private void abastractorToolStripMenuItem_MouseEnter(object sender, EventArgs e)
        //{
        //    abastractorToolStripMenuItem.ForeColor = Color.Black;
        //}

        //private void abastractorToolStripMenuItem_MouseLeave(object sender, EventArgs e)
        //{
        //    abastractorToolStripMenuItem.ForeColor = Color.White;
        //}

        //private void invoiceToolStripMenuItem_MouseEnter(object sender, EventArgs e)
        //{
        //    invoiceToolStripMenuItem.ForeColor = Color.Black;
        //}

        //private void invoiceToolStripMenuItem_MouseLeave(object sender, EventArgs e)
        //{
        //    invoiceToolStripMenuItem.ForeColor = Color.White;
        //}

        //private void MastersToolStripMenuItem_MouseHover(object sender, EventArgs e)
        //{
        //    MastersToolStripMenuItem.ForeColor = Color.Black;
        //}

        //private void TransactionsToolStripMenuItem_MouseHover(object sender, EventArgs e)
        //{
        //    TransactionsToolStripMenuItem.ForeColor = Color.Black;
        //}

        //private void ReportsToolStripMenuItem_MouseLeave_1(object sender, EventArgs e)
        //{
        //    ReportsToolStripMenuItem.ForeColor = Color.Black;
        //}

        //private void AdminstrationToolStripMenuItem_MouseHover(object sender, EventArgs e)
        //{
        //    AdminstrationToolStripMenuItem.ForeColor = Color.Black;
        //}

        //private void ToolsToolStripMenuItem_MouseHover(object sender, EventArgs e)
        //{
        //    ToolsToolStripMenuItem.ForeColor = Color.Black;
        //}

        //private void AboutUsToolStripMenuItem_MouseHover(object sender, EventArgs e)
        //{
        //    AboutUsToolStripMenuItem.ForeColor = Color.Black;
        //}

        //private void webSearcherToolStripMenuItem1_MouseHover(object sender, EventArgs e)
        //{
        //    webSearcherToolStripMenuItem1.ForeColor = Color.Black;
        //}

        //private void abastractorToolStripMenuItem_MouseHover(object sender, EventArgs e)
        //{
        //    abastractorToolStripMenuItem.ForeColor = Color.Black;
        //}

        //private void invoiceToolStripMenuItem_MouseHover(object sender, EventArgs e)
        //{
        //    invoiceToolStripMenuItem.ForeColor = Color.Black;
        //}

        //private void ToolStripButton12_MouseEnter(object sender, EventArgs e)
        //{
        //    ToolStripButton12.ForeColor = Color.Black;
        //}

        //private void ToolStripButton12_MouseLeave(object sender, EventArgs e)
        //{
        //    ToolStripButton12.ForeColor = Color.White;
        //}



        protected void Bind_Alerts_Count()
        {

            Hashtable htemaialertcount = new Hashtable();
            System.Data.DataTable dtemailalert = new System.Data.DataTable();
            if (User_Role_Id == "2")
            {

                htemaialertcount.Add("@Trans", "COUNT_OF_NON_SENDED_EMAIL_BYUSERID");
            }
            else if (User_Role_Id != "2")
            {

                htemaialertcount.Add("@Trans", "COUNT_OF_NON_SENDED_EMAIL_BYADMIN");
            }

            htemaialertcount.Add("@Sent_By", userid);
            dtemailalert = dataaccess.ExecuteSP("Sp_Order_Email_Notification", htemaialertcount);

            Hashtable htcostcount = new Hashtable();
            System.Data.DataTable dtcostcount = new System.Data.DataTable();
            htcostcount.Add("@Trans", "COUNT_OF_ORDERS_NOT_COST_GENRATED_NOT_SENDED");
            dtcostcount = dataaccess.ExecuteSP("Sp_Order_Cost_Entry", htcostcount);





            if (dtcostcount.Rows.Count > 0)
            {
                Cost_Count = int.Parse(dtcostcount.Rows[0]["count"].ToString());


            }

            int Cost_Eamil_Count = 0;
            Hashtable htcostEamilcount = new Hashtable();
            System.Data.DataTable dtcostEmailcount = new System.Data.DataTable();
            htcostEamilcount.Add("@Trans", "COUNT_OF_EMAIL_NOT_SENT");
            dtcostEmailcount = dataaccess.ExecuteSP("Sp_Order_Cost_Entry", htcostEamilcount);





            if (dtcostEmailcount.Rows.Count > 0)
            {
                Cost_Eamil_Count = int.Parse(dtcostEmailcount.Rows[0]["count"].ToString());


            }
            if (dtemailalert.Rows.Count > 0 || dtcostcount.Rows.Count > 0)
            {
                // divSearc_Order_alocate.Visible = true;
                Email_Count = int.Parse(dtemailalert.Rows[0]["count"].ToString());

                Total_Count = Cost_Count + Email_Count + Cost_Eamil_Count;

                btn_Email_Alerts.Text = "TITLELOGY EMAIL  " + "(" + Email_Count.ToString() + ")";

                btn_Order_Cost_Count.Text = "ORDER COST " + "(" + Cost_Count.ToString() + ")";

                btn_Order_Cost_Eamil.Text = "ORDER COST EMAIL " + "(" + Cost_Eamil_Count.ToString() + ")";

                if (User_Role_Id != "2")
                {
                    tabControl1.TabPages[3].Text = "My Alerts  " + "(" + Total_Count.ToString() + ")";

                }
                else if (User_Role_Id != "2")
                {
                    tabControl1.TabPages[2].Text = "My Alerts  " + "(" + Total_Count.ToString() + ")";

                }
                else if (User_Role_Id == "2")
                {

                    tabControl1.TabPages[1].Text = "My Alerts  " + "(" + Total_Count.ToString() + ")";

                }


            }
            else
            {


                btn_Email_Alerts.Text = "EMAIL " + "(" + "0" + ")";
                btn_Order_Cost_Count.Text = "ORDER COST " + "(" + "0" + ")";
                btn_Order_Cost_Eamil.Text = "ORDER COST EMAIL " + "(" + "0" + ")";

                if (User_Role_Id != "2")
                {

                    tabControl1.TabPages[3].Text = "My Alerts " + "(" + "0" + ")";
                }
                else if (User_Role_Id == "2")
                {

                    tabControl1.TabPages[1].Text = "My Alerts " + "(" + "0" + ")";
                }
            }
        }

        private void timer4_Tick(object sender, EventArgs e)
        {
            //  Bind_Alerts_Count();

            // System.Windows.Forms.Application.DoEvents();
        }



        private void rbt_Emp_Prod_Report_CheckedChanged(object sender, EventArgs e)
        {
            if (rbt_Emp_Prod_Report.Checked == true)
            {
                Employee_Report = "User Production Report";

                grd_My_Emp_Production.Visible = true;
                cr_MyViewer.Visible = false;
            }
        }

        private void rbt_Emp_Prod_Count_CheckedChanged(object sender, EventArgs e)
        {
            if (rbt_Emp_Prod_Count.Checked == true)
            {
                Employee_Report = "User Production Count";
                grd_My_Emp_Production.Visible = false;
                cr_MyViewer.Visible = true;
            }
        }

        private void btn_My_Refresh_Click(object sender, EventArgs e)
        {

            rbt_Emp_Prod_Report_CheckedChanged(sender, e);
            rbt_Emp_Prod_Count_CheckedChanged(sender, e);
            dtuserexport.Clear();
            load_Progressbar.Start_progres();
            //clsLoader.startProgress();
            Load_Grd_My_Employee_Report();
            // clsLoader.stopProgress();
        }

        private void Load_Grd_My_Employee_Report()
        {
            DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;
            DateTime fromdate = Convert.ToDateTime(dtp_Employee_From_Date.Text, usDtfi);
            DateTime Todate = Convert.ToDateTime(dtp_Employee_To_Date.Text, usDtfi);


            if (fromdate <= Todate)
            {
                int orderid = 0;
                int Clientid = 0;
                int SubProcessid = 0;
                int Userid = 0;
                int Status = 0;
                int ProgressId = 0;
                // dbc.BindOrder1(ddl_OrderNumber);
                if (ddl_My_Ordernumber.SelectedIndex != 0 & ddl_My_Ordernumber.SelectedIndex != -1)
                {
                    orderid = int.Parse(ddl_My_Ordernumber.SelectedValue.ToString());
                }
                if (ddl_My_ClientName.SelectedIndex != 0)
                {
                    Clientid = int.Parse(ddl_My_ClientName.SelectedValue.ToString());
                }
                if (ddl_My_Subprocess.SelectedIndex != -1)
                {
                    SubProcessid = int.Parse(ddl_My_Subprocess.SelectedValue.ToString());
                }
                if (ddl_My_Username.SelectedIndex != 0 && ddl_My_Username.SelectedIndex > 0)
                {
                    Userid = int.Parse(ddl_My_Username.SelectedValue.ToString());
                }
                if (ddl_My_Status.SelectedIndex != 0)
                {
                    ProgressId = int.Parse(ddl_My_Status.SelectedValue.ToString());
                }
                if (ddl_My_Task.SelectedIndex != 0)
                {
                    Status = int.Parse(ddl_My_Task.SelectedValue.ToString());
                }

                ht.Clear();
                dt.Clear();
                dtuserexport.Clear();

                if (Employee_Report == "User Production Report")
                {
                    grd_My_Emp_Production.Visible = true;
                    cr_MyViewer.Visible = false;

                }
                else if (Employee_Report == "User Production Count")
                {

                    grd_My_Emp_Production.Visible = false;
                    cr_MyViewer.Visible = true;
                }

                if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                {

                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "All_MyClient");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);

                    }
                    else if (Employee_Report == "User Production Count")
                    {

                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        //rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "All_MyClient");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", 0);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }





                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {

                        ht.Add("@Trans", "User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {

                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        //rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "SELECT_USER_WISE");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }

                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_Progress_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {


                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_Progress_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Progress_ID_And_Used_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Progress_ID_And_Used_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }

                }

                else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_Status_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_Status_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }

                else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Status_ID_and_User_Id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Status_ID_and_User_Id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_Status_ID_and_Progress_Id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_Status_ID_and_Progress_Id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }

                else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Status_ID_and_Progress_Id_And_UserID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Status_ID_and_Progress_Id_And_UserID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_SubProcess_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_SubProcess_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "SubProcess_ID_And_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_SubProcess_ID_And_Progress_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_SubProcess_ID_And_Progress_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "SubProcess_ID_And_Progress_ID_And_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Progress_ID_And_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_SubProcess_ID_And_Status_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                        dt = dataaccess.ExecuteSP("Sp_Rpt_User_Order_TimeManagement", ht);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_SubProcess_ID_And_Status_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "SubProcess_ID_And_Status_ID_And_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID_And_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_SubProcess_ID_And_Status_ID_And_Progress_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_SubProcess_ID_And_Status_ID_And_Progress_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID_and_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID_and_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                {

                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_Client_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_Client_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_Client_ID_And_Progress_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_Client_ID_And_Progress_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_Progress_ID_and_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_Progress_ID_and_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_Client_ID_And_Status_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_Client_ID_And_Status_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_Status_ID_and_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID_and_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_Client_ID_And_Status_ID_and_Progress_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_Client_ID_And_Status_ID_and_Progress_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_Status_ID_and_Progress_ID_and_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID_and_Progress_ID_and_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_Client_ID_And_Subprocess_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_Client_ID_And_Subprocess_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_Client_ID_And_Subprocess_ID_and_Progress_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_Client_ID_And_Subprocess_ID_and_Progress_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID_and_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID_and_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_Client_ID_And_Subprocess_ID_and_Status_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_Client_ID_And_Subprocess_ID_and_Status_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID_And_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID_And_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_Order_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_Order_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_User_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_User_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_Order_ID_And_Progress_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_Order_ID_And_Progress_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_Progress_ID_And_User_Id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_Progress_ID_And_User_Id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_Order_ID_And_Status_ID");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_Order_ID_And_Status_ID");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_Status_ID_And_User_Id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID_And_User_Id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_Order_ID_And_Status_ID_And_Progress_Id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_Order_ID_And_Status_ID_And_Progress_Id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_Status_ID_And_Progress_Id_and_User_Id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID_And_Progress_Id_and_User_Id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }



                else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_Order_ID_And_Client_id_And_Subrpocess_id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_Order_ID_And_Client_id_And_Subrpocess_id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_User_id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_User_id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id_and_User_id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id_and_User_id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_User_id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_User_id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "My_Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "My_Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }
                else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                {
                    if (Employee_Report == "User Production Report")
                    {
                        ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id_and_user_id");
                        ht.Add("@Order_Id", orderid);
                        ht.Add("@Client_Id", Clientid);
                        ht.Add("@Subprocess_Id", SubProcessid);
                        ht.Add("@Order_Progress_Id", ProgressId);
                        ht.Add("@Order_Status_Id", Status);
                        ht.Add("@From_date", fromdate);
                        ht.Add("@To_date", Todate);
                        ht.Add("@User_Id", Userid);
                    }
                    else if (Employee_Report == "User Production Count")
                    {
                        rptDoc = new Reports.CrystalReport.User_Production_Count();
                        Logon_To_Crystal();
                        rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id_and_user_id");
                        rptDoc.SetParameterValue("@From_date", fromdate);
                        rptDoc.SetParameterValue("@To_date", Todate);
                        rptDoc.SetParameterValue("@Order_Id", orderid);
                        rptDoc.SetParameterValue("@Client_Id", Clientid);
                        rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                        rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                        rptDoc.SetParameterValue("@Order_Status_Id", Status);
                        rptDoc.SetParameterValue("@User_Id", Userid);
                        rptDoc.SetParameterValue("@Log_In_Userid", userid);
                    }
                }

                if (Employee_Report == "User Production Report")
                {

                    dt = dataaccess.ExecuteSP("Sp_Rpt_User_Order_TimeManagement", ht);
                    dtuserexport = dt;
                    if (dt.Rows.Count > 0)
                    {


                        grd_My_Emp_Production.DataSource = null;
                        grd_My_Emp_Production.AutoGenerateColumns = false;

                        grd_My_Emp_Production.ColumnCount = 25;
                        grd_My_Reports.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Ebrima", 7.75F, FontStyle.Bold);
                        grd_My_Reports.ColumnHeadersHeight = 40;


                        //Grd_OrderTime.Rows.Add();

                        grd_My_Emp_Production.Columns[0].Name = "SLNo";
                        grd_My_Emp_Production.Columns[0].HeaderText = "SL.NO";
                        grd_My_Emp_Production.Columns[0].Width = 50;



                        grd_My_Emp_Production.Columns[1].Name = "ProductionDate";
                        grd_My_Emp_Production.Columns[1].HeaderText = "PRODUCTION DATE";
                        grd_My_Emp_Production.Columns[1].DataPropertyName = "Production_Date";
                        grd_My_Emp_Production.Columns[1].Width = 140;

                        //grd_My_Emp_Production.Columns[2].Name = "UserName";
                        //grd_My_Emp_Production.Columns[2].HeaderText = "USER NAME";
                        //grd_My_Emp_Production.Columns[2].DataPropertyName = "User_Name";
                        //grd_My_Emp_Production.Columns[2].Width = 125;

                        grd_My_Emp_Production.Columns[2].Name = "User_Name";
                        grd_My_Emp_Production.Columns[2].HeaderText = "Employee Name";
                        grd_My_Emp_Production.Columns[2].DataPropertyName = "User_Name";
                        grd_My_Emp_Production.Columns[2].Width = 125;


                        grd_My_Emp_Production.Columns[3].Name = "empcode";
                        grd_My_Emp_Production.Columns[3].HeaderText = "EMP CODE";
                        grd_My_Emp_Production.Columns[3].DataPropertyName = "DRN_Emp_Code";
                        grd_My_Emp_Production.Columns[3].Width = 80;


                        grd_My_Emp_Production.Columns[4].Name = "empjobrole";
                        grd_My_Emp_Production.Columns[4].HeaderText = "JOB ROLE";
                        grd_My_Emp_Production.Columns[4].DataPropertyName = "Emp_Job_Role";
                        grd_My_Emp_Production.Columns[4].Width = 90;


                        grd_My_Emp_Production.Columns[5].Name = "shift";
                        grd_My_Emp_Production.Columns[5].HeaderText = "SHIFT";
                        grd_My_Emp_Production.Columns[5].DataPropertyName = "Shift_Type_Name";
                        grd_My_Emp_Production.Columns[5].Width = 90;


                        grd_My_Emp_Production.Columns[6].Name = "Reportingto1";
                        grd_My_Emp_Production.Columns[6].HeaderText = "REPORTING TO LEVEL 1";
                        grd_My_Emp_Production.Columns[6].DataPropertyName = "Reporting_To_1";
                        grd_My_Emp_Production.Columns[6].Width = 135;


                        grd_My_Emp_Production.Columns[7].Name = "Reportingto2";
                        grd_My_Emp_Production.Columns[7].HeaderText = "REPORTING TO LEVEL 2";
                        grd_My_Emp_Production.Columns[7].DataPropertyName = "Reporting_To_2";
                        grd_My_Emp_Production.Columns[7].Width = 135;

                        //grd_My_Emp_Production.Columns[8].Name = "Client_Order_Number";
                        //grd_My_Emp_Production.Columns[8].HeaderText = "ORDERNUMBER";
                        //grd_My_Emp_Production.Columns[8].DataPropertyName = "Client_Order_Number";
                        //grd_My_Emp_Production.Columns[8].Width = 100;
                        //grd_My_Emp_Production.Columns[8].Visible = false;

                        DataGridViewLinkColumn link = new DataGridViewLinkColumn();
                        grd_My_Emp_Production.Columns.Add(link);
                        link.Name = "OrderNumber";
                        link.HeaderText = "ORDER NUMBER";
                        link.DataPropertyName = "Client_Order_Number";
                        link.Width = 195;
                        link.DisplayIndex = 8;

                        grd_My_Emp_Production.Columns[8].Name = "Client_Order_Ref";
                        grd_My_Emp_Production.Columns[8].HeaderText = "Order Refernce Number";
                        grd_My_Emp_Production.Columns[8].DataPropertyName = "Client_Order_Ref";
                        grd_My_Emp_Production.Columns[8].Width = 125;


                        if (User_Role_Id == "1")
                        {
                            grd_My_Emp_Production.Columns[9].Name = "Client";
                            grd_My_Emp_Production.Columns[9].HeaderText = "CLIENT NAME";
                            grd_My_Emp_Production.Columns[9].DataPropertyName = "Client_Name";
                            grd_My_Emp_Production.Columns[9].Width = 125;

                            grd_My_Emp_Production.Columns[10].Name = "SubProcess";
                            grd_My_Emp_Production.Columns[10].HeaderText = "SUB PROCESS";
                            grd_My_Emp_Production.Columns[10].DataPropertyName = "Sub_ProcessName";
                            grd_My_Emp_Production.Columns[10].Width = 250;
                        }
                        else
                        {
                            grd_My_Emp_Production.Columns[9].Name = "Client_Number";
                            grd_My_Emp_Production.Columns[9].HeaderText = "CLIENT NAME";
                            grd_My_Emp_Production.Columns[9].DataPropertyName = "Client_Number";
                            grd_My_Emp_Production.Columns[9].Width = 125;

                            grd_My_Emp_Production.Columns[10].Name = "Subprocess_Number";
                            grd_My_Emp_Production.Columns[10].HeaderText = "SUB PROCESS";
                            grd_My_Emp_Production.Columns[10].DataPropertyName = "Subprocess_Number";
                            grd_My_Emp_Production.Columns[10].Width = 250;

                        }

                        grd_My_Emp_Production.Columns[11].Name = "OrderType";
                        grd_My_Emp_Production.Columns[11].HeaderText = "ORDER TYPE";
                        grd_My_Emp_Production.Columns[11].DataPropertyName = "Order_Type";
                        grd_My_Emp_Production.Columns[11].Width = 180;


                        grd_My_Emp_Production.Columns[12].Name = "OrderTypeAbs";
                        grd_My_Emp_Production.Columns[12].HeaderText = "ORDER TYPE ABS";
                        grd_My_Emp_Production.Columns[12].DataPropertyName = "Order_Type_Abrivation";
                        grd_My_Emp_Production.Columns[12].Width = 180;


                        grd_My_Emp_Production.Columns[13].Name = "OrderStatus";
                        grd_My_Emp_Production.Columns[13].HeaderText = "ORDER STATUS";
                        grd_My_Emp_Production.Columns[13].DataPropertyName = "Task";
                        grd_My_Emp_Production.Columns[13].Width = 150;

                        grd_My_Emp_Production.Columns[14].Name = "State";
                        grd_My_Emp_Production.Columns[14].HeaderText = "STATE";
                        grd_My_Emp_Production.Columns[14].DataPropertyName = "State";
                        grd_My_Emp_Production.Columns[14].Width = 150;

                        grd_My_Emp_Production.Columns[15].Name = "County";
                        grd_My_Emp_Production.Columns[15].HeaderText = "COUNTY";
                        grd_My_Emp_Production.Columns[15].DataPropertyName = "County";
                        grd_My_Emp_Production.Columns[15].Width = 150;

                        grd_My_Emp_Production.Columns[16].Name = "Borrower_Name";
                        grd_My_Emp_Production.Columns[16].HeaderText = "BORROWER NAME";
                        grd_My_Emp_Production.Columns[16].DataPropertyName = "Borrower_Name";
                        grd_My_Emp_Production.Columns[16].Width = 150;


                        grd_My_Emp_Production.Columns[17].Name = "Status";
                        grd_My_Emp_Production.Columns[17].HeaderText = "PROGRESS STATUS";
                        grd_My_Emp_Production.Columns[17].DataPropertyName = "Order_Status";
                        grd_My_Emp_Production.Columns[17].Width = 150;

                        grd_My_Emp_Production.Columns[18].Name = "StartTime";
                        grd_My_Emp_Production.Columns[18].HeaderText = "START TIME";
                        grd_My_Emp_Production.Columns[18].DataPropertyName = "Start_Time";
                        grd_My_Emp_Production.Columns[18].Width = 120;

                        grd_My_Emp_Production.Columns[19].Name = "EndTime";
                        grd_My_Emp_Production.Columns[19].HeaderText = "END TIME";
                        grd_My_Emp_Production.Columns[19].DataPropertyName = "End_Time";
                        grd_My_Emp_Production.Columns[19].Width = 120;

                        grd_My_Emp_Production.Columns[20].Name = "TotalTime";
                        grd_My_Emp_Production.Columns[20].HeaderText = "TOTAL TIME";
                        grd_My_Emp_Production.Columns[20].DataPropertyName = "Total_Time";
                        grd_My_Emp_Production.Columns[20].Width = 100;

                        grd_My_Emp_Production.Columns[21].Name = "Issue_Type";
                        grd_My_Emp_Production.Columns[21].HeaderText = "ISSUE TYPE";
                        grd_My_Emp_Production.Columns[21].DataPropertyName = "Issue_Type";
                        grd_My_Emp_Production.Columns[21].Width = 100;

                        grd_My_Emp_Production.Columns[22].Name = "Reason";
                        grd_My_Emp_Production.Columns[22].HeaderText = "REASON";
                        grd_My_Emp_Production.Columns[22].DataPropertyName = "Reason";
                        grd_My_Emp_Production.Columns[22].Width = 100;


                        grd_My_Emp_Production.Columns[23].Name = "Order_ID";
                        grd_My_Emp_Production.Columns[23].HeaderText = "ORDER ID";
                        grd_My_Emp_Production.Columns[23].DataPropertyName = "Order_ID";
                        grd_My_Emp_Production.Columns[23].Visible = false;

                        grd_My_Emp_Production.Columns[24].Name = "Branch Name";
                        grd_My_Emp_Production.Columns[24].HeaderText = "Branch Name";
                        grd_My_Emp_Production.Columns[24].DataPropertyName = "Branch_Name";




                        grd_My_Emp_Production.DataSource = dt;
                        //  }


                    }
                    else
                    {
                        grd_My_Emp_Production.Visible = true;
                        grd_My_Emp_Production.DataSource = null;
                        grd_My_Emp_Production.Rows.Clear();

                        //Grd_OrderTime.EmptyDataText = "No Orders Added";
                        //Grd_OrderTime.DataBind();

                    }
                }
                else if (Employee_Report == "User Production Count")
                {



                    cr_MyViewer.ReportSource = rptDoc;


                }
                //Grd_OrderTime.ColumnHeadersDefaultCellStyle.BackColor = System.Drawing.Color.DarkSlateGray;
                //Grd_OrderTime.EnableHeadersVisualStyles = false;
                //Grd_OrderTime.ColumnHeadersDefaultCellStyle.ForeColor = System.Drawing.Color.WhiteSmoke;

                //    dt_Chart = dataaccess.ExecuteSP("Sp_Rpt_User_Order_TimeManagement_Chart", ht);
                //   DataSet ds = new DataSet("table");
                //   ds.Tables.Add(dt_Chart);
                //if (dt_Chart.Rows.Count > 1)
                //{

                //    Chart1.DataSource = dt_Chart;
                //    Chart1.ChartAreas[0].AxisX.Title = "Order_Status";
                //    Chart1.ChartAreas[0].AxisY.Title = "Order_Count";
                //    Chart1.ChartAreas["ChartArea1"].AxisX.IsLabelAutoFit = true;

                //    Chart1.ChartAreas["ChartArea1"].AxisX.Interval = 1;
                //    Chart1.ChartAreas["ChartArea1"].AxisY.IsLabelAutoFit = true;

                //    Chart1.ChartAreas["ChartArea1"].AxisY.Interval = 1;
                //    Chart1.ChartAreas[0].AxisX.LabelStyle.Format = "Order_Status";
                //    Chart1.ChartAreas[0].AxisY.LabelStyle.Format = "Order_Count";
                //    Chart1.ChartAreas[0].AxisX.IntervalOffset = 1;
                //    Chart1.ChartAreas[0].AxisY.IntervalOffset = 1;
                //    //Chart1.ChartAreas[0].AxisX.IsMarginVisible = false;
                //    //Chart1.ChartAreas[0].AxisY.IsMarginVisible = false;
                //}

            }
            else
            {
                // ScriptManager.RegisterStartupScript(Page, Page.GetType(), "Msg", "<script> alert('Enter date Properly')</script>", false);
            }
            for (int i = 0; i < grd_My_Emp_Production.Rows.Count; i++)
            {
                grd_My_Emp_Production.Rows[i].Cells[0].Value = i + 1;
            }

        }



        private void btn_My_Export_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            //clsLoader.startProgress();
            //DataSet dsexport = new DataSet();

            //dsexport.Clear();
            //dsexport.Tables.Add(dtuserexport);
            //ds = dsexport;
            //if (dsexport.Tables[0].Rows.Count > 0)
            //{
            //    Convert_Dataset_to_Excel();
            //}
            //ds.Clear();
            //dsexport.Clear();
            //dtuserexport.Clear();

            Export_MyClient_Wise_Employee_Production_ReportData();

            // clsLoader.stopProgress();
        }

        private void ddl_My_ClientName_SelectedIndexChanged(object sender, EventArgs e)
        {

            if (ddl_My_ClientName.SelectedIndex > 0)
            {
                int clientid = int.Parse(ddl_My_ClientName.SelectedValue.ToString());
                if (User_Role_Id == "1")
                {
                    dbc.BindSubProcessName_rpt(ddl_My_Subprocess, clientid);
                }
                else
                {

                    dbc.BindSubProcessNumber(ddl_My_Subprocess, clientid);
                }
                ddl_My_Subprocess.Focus();
            }
            else if (ddl_My_ClientName.SelectedIndex == 0)
            {
                if (User_Role_Id == "1")
                {
                    dbc.BindSubProcessName_rpt(ddl_My_Subprocess, 0);
                }
                else
                {

                    dbc.BindSubProcessNumber(ddl_My_Subprocess, 0);
                }
            }
        }

        private void Grd_OrderTime_AutoSizeColumnModeChanged(object sender, DataGridViewAutoSizeColumnModeEventArgs e)
        {

        }

        private void button3_Click(object sender, EventArgs e)
        {

            Export_Data();
        }

        private void Export_MyClient_ProductionData()
        {



            System.Data.DataTable dt = new System.Data.DataTable();
            System.Data.DataTable dt1 = new System.Data.DataTable();
            DateTime Todate = Convert.ToDateTime(txt_My_To_date.Text.ToString());
            //Adding the Columns
            foreach (DataGridViewColumn column in Grid_My_Report.Columns)
            {
                if (column.HeaderText != "")
                {
                    if (column.ValueType == null)
                    {

                        dt.Columns.Add(column.HeaderText, typeof(string));

                    }
                    else
                    {
                        if (column.ValueType == typeof(int))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(int));

                        }
                        else if (column.ValueType == typeof(decimal))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(decimal));

                        }
                        else if (column.ValueType == typeof(DateTime))
                        {

                            dt.Columns.Add(column.HeaderText, typeof(string));
                        }
                        else
                        {
                            dt.Columns.Add(column.HeaderText, column.ValueType);
                        }
                    }
                }

            }

            //Adding the Rows
            foreach (DataGridViewRow row in Grid_My_Report.Rows)
            {
                dt.Rows.Add();
                foreach (DataGridViewCell cell in row.Cells)
                {
                    //string Value1 = cell.Value.ToString();
                    //string m = Value1.Trim().ToString();


                    if (cell.Value != null && cell.Value.ToString() != "")
                    {

                        dt.Rows[dt.Rows.Count - 1][cell.ColumnIndex] = cell.Value.ToString();
                    }
                }
            }



            if (dtclientReport.Rows.Count > 0)
            {







                grd_My_Client.DataSource = dtclientReport;



            }
            else
            {

                grd_My_Client.DataSource = null;

            }







            foreach (DataGridViewColumn column in grd_My_Client.Columns)
            {

                if (column.HeaderText != "")
                {
                    if (column.ValueType == null)
                    {

                        dt1.Columns.Add(column.HeaderText, typeof(string));

                    }
                    else
                    {
                        if (column.ValueType == typeof(int))
                        {
                            dt1.Columns.Add(column.HeaderText, typeof(int));

                        }
                        else if (column.ValueType == typeof(decimal))
                        {
                            dt1.Columns.Add(column.HeaderText, typeof(decimal));

                        }
                        else if (column.ValueType == typeof(DateTime))
                        {

                            dt1.Columns.Add(column.HeaderText, typeof(string));
                        }
                        else
                        {
                            dt1.Columns.Add(column.HeaderText, column.ValueType);
                        }
                    }
                }
            }

            //Adding the Rows
            foreach (DataGridViewRow row in grd_My_Client.Rows)
            {
                dt1.Rows.Add();
                foreach (DataGridViewCell cell in row.Cells)
                {
                    if (cell.Value != null && cell.Value.ToString() != "")
                    {
                        dt1.Rows[dt1.Rows.Count - 1][cell.ColumnIndex] = cell.Value.ToString();
                    }
                }
            }

            string Export_Title_Name = "Client_Production";
            //Exporting to Excel
            string folderPath = "C:\\Temp\\";
            Path1 = folderPath + DateTime.Now.ToString("dd-MM-yyyy-hh-mm-ss") + "-" + Export_Title_Name + ".xlsx";
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);


            }

            using (XLWorkbook wb = new XLWorkbook())
            {
                wb.Worksheets.Add(dt, "count");
                wb.Worksheets.Add(dt1, "Report");

                try
                {

                    wb.SaveAs(Path1);

                }
                catch (Exception ex)
                {

                    MessageBox.Show("File is Opened, Please Close and Export it");
                }



            }

            System.Diagnostics.Process.Start(Path1);
        }

        private void Export_ReportClient_ProductionData()
        {



            System.Data.DataTable dt = new System.Data.DataTable();
            System.Data.DataTable dt1 = new System.Data.DataTable();
            DateTime Todate = Convert.ToDateTime(txt_Todate.Text.ToString());
            //Adding the Columns
            foreach (DataGridViewColumn column in Grd_OrderTime.Columns)
            {
                if (column.HeaderText != "")
                {
                    if (column.ValueType == null)
                    {

                        dt.Columns.Add(column.HeaderText, typeof(string));

                    }
                    else
                    {
                        if (column.ValueType == typeof(int))
                        {
                            //  dt.Columns.Add(column.HeaderText, typeof(int));

                            dt.Columns.Add(column.HeaderText, typeof(string));
                        }
                        else if (column.ValueType == typeof(decimal))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(decimal));

                        }
                        else if (column.ValueType == typeof(DateTime))
                        {

                            dt.Columns.Add(column.HeaderText, typeof(string));
                        }
                        else
                        {
                            dt.Columns.Add(column.HeaderText, column.ValueType);
                        }
                    }
                }

            }

            //Adding the Rows
            foreach (DataGridViewRow row in Grd_OrderTime.Rows)
            {
                dt.Rows.Add();
                foreach (DataGridViewCell cell in row.Cells)
                {
                    //string Value1 = cell.Value.ToString();
                    //string m = Value1.Trim().ToString();


                    if (cell.Value != null && cell.Value.ToString() != "")
                    {

                        dt.Rows[dt.Rows.Count - 1][cell.ColumnIndex] = cell.Value.ToString();
                    }
                }
            }



            if (dtclientReport.Rows.Count > 0)
            {



                gridclient.DataSource = dtclientReport;

                gridclient.AutoGenerateColumns = true;


                gridclient.DataSource = dtclientReport;



            }
            else
            {

                gridclient.DataSource = null;

            }







            foreach (DataGridViewColumn column in gridclient.Columns)
            {

                if (column.HeaderText != "")
                {
                    if (column.ValueType == null)
                    {

                        dt1.Columns.Add(column.HeaderText, typeof(string));

                    }
                    else
                    {
                        if (column.ValueType == typeof(int))
                        {
                            dt1.Columns.Add(column.HeaderText, typeof(int));

                        }
                        else if (column.ValueType == typeof(decimal))
                        {
                            dt1.Columns.Add(column.HeaderText, typeof(decimal));

                        }
                        else if (column.ValueType == typeof(DateTime))
                        {

                            dt1.Columns.Add(column.HeaderText, typeof(string));
                        }
                        else
                        {
                            dt1.Columns.Add(column.HeaderText, column.ValueType);
                        }
                    }
                }
            }

            //Adding the Rows
            foreach (DataGridViewRow row in gridclient.Rows)
            {
                dt1.Rows.Add();
                foreach (DataGridViewCell cell in row.Cells)
                {
                    if (cell.Value != null && cell.Value.ToString() != "")
                    {
                        dt1.Rows[dt1.Rows.Count - 1][cell.ColumnIndex] = cell.Value.ToString();
                    }
                }
            }

            string Export_Title_Name = "Client_Production";
            //Exporting to Excel
            string folderPath = "C:\\Temp\\";
            Path1 = folderPath + DateTime.Now.ToString("dd-MM-yyyy-hh-mm-ss") + "-" + Export_Title_Name + ".xlsx";
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);


            }

            using (XLWorkbook wb = new XLWorkbook())
            {
                wb.Worksheets.Add(dt, "count");
                wb.Worksheets.Add(dt1, "Report");

                try
                {

                    wb.SaveAs(Path1);

                }
                catch (Exception ex)
                {

                    MessageBox.Show("File is Opened, Please Close and Export it");
                }



            }

            System.Diagnostics.Process.Start(Path1);
        }

        private void grid_User_Production_Report_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            load_Progressbar.Start_progres();
            //clsLoader.startProgress();
            if (e.ColumnIndex == 23)
            {
                Ordermanagement_01.Order_Entry orderentry = new Ordermanagement_01.Order_Entry(int.Parse(grid_User_Production_Report.Rows[e.RowIndex].Cells[22].Value.ToString()), userid, User_Role_Id, Production_Date);
                orderentry.Show();
            }
            //clsLoader.stopProgress();

        }

        private void grd_My_Emp_Production_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            load_Progressbar.Start_progres();
            //clsLoader.startProgress();
            if (e.ColumnIndex == 23)
            {
                Ordermanagement_01.Order_Entry orderentry = new Ordermanagement_01.Order_Entry(int.Parse(grd_My_Emp_Production.Rows[e.RowIndex].Cells[22].Value.ToString()), userid, User_Role_Id, Production_Date);
                orderentry.Show();
            }
            //clsLoader.stopProgress();
        }
        private void AddParent()
        {

            string sKeyTemp = "";
            tvwRightSide.Nodes.Clear();

            ht.Clear();
            dt.Clear();

            sKeyTemp = "Reports";

            tvwRightSide.Nodes.Add(sKeyTemp, sKeyTemp);
            AddChilds(sKeyTemp);

        }

        private void AddChilds(string sKey)
        {
            ht.Clear();
            dt.Clear();


            tvwRightSide.Nodes[0].Nodes.Add("User Production Summary");
            //tvwRightSide.Nodes[0].Nodes.Add("Productivity Report");
            tvwRightSide.Nodes[0].Nodes.Add("Billing Report");

            tvwRightSide.Nodes[0].Nodes.Add("Orders Document List Report");
            tvwRightSide.Nodes[0].Nodes.Add("Orders Check List Report");
            tvwRightSide.Nodes[0].Nodes.Add("Orders Error Info Report");
            tvwRightSide.ExpandAll();
        }

        private void AddParent_Rework_All_report()
        {

            string sKeyTemp = "";
            trw_Rework_Report.Nodes.Clear();

            ht.Clear();
            dt.Clear();

            sKeyTemp = "Reports";

            trw_Rework_Report.Nodes.Add(sKeyTemp, sKeyTemp);
            AddChilds_Rework_All_report(sKeyTemp);

        }

        private void AddChilds_Rework_All_report(string sKey)
        {
            ht.Clear();
            dt.Clear();


            trw_Rework_Report.Nodes[0].Nodes.Add("User Production Report");
            trw_Rework_Report.Nodes[0].Nodes.Add("User Production Count");

            trw_Rework_Report.Nodes[0].Nodes.Add("Orders Document List Report");
            trw_Rework_Report.Nodes[0].Nodes.Add("Orders Check List Report");
            trw_Rework_Report.Nodes[0].Nodes.Add("Orders Error Info Report");
            trw_Rework_Report.ExpandAll();
        }

        private void AddParent_Rework_report()
        {

            string sKeyTemp = "";
            trw_Rework_Myreport.Nodes.Clear();

            ht.Clear();
            dt.Clear();

            sKeyTemp = "Reports";

            trw_Rework_Myreport.Nodes.Add(sKeyTemp, sKeyTemp);
            AddChilds_Rework_report(sKeyTemp);

        }

        private void AddChilds_Rework_report(string sKey)
        {
            ht.Clear();
            dt.Clear();


            trw_Rework_Myreport.Nodes[0].Nodes.Add("User Production Report");
            trw_Rework_Myreport.Nodes[0].Nodes.Add("User Production Count");

            trw_Rework_Myreport.Nodes[0].Nodes.Add("Orders Document List Report");
            trw_Rework_Myreport.Nodes[0].Nodes.Add("Orders Check List Report");
            trw_Rework_Myreport.Nodes[0].Nodes.Add("Orders Error Info Report");
            trw_Rework_Myreport.ExpandAll();
        }

        private void AddParent_Superqc_All_report()
        {

            string sKeyTemp = "";
            trw_All_SuperQc.Nodes.Clear();

            ht.Clear();
            dt.Clear();

            sKeyTemp = "Reports";

            trw_All_SuperQc.Nodes.Add(sKeyTemp, sKeyTemp);
            AddChilds_Superqc_All_report(sKeyTemp);

        }

        private void AddChilds_Superqc_All_report(string sKey)
        {
            ht.Clear();
            dt.Clear();


            trw_All_SuperQc.Nodes[0].Nodes.Add("User Production Report");
            trw_All_SuperQc.Nodes[0].Nodes.Add("User Production Count");

            trw_All_SuperQc.Nodes[0].Nodes.Add("Orders Document List Report");
            trw_All_SuperQc.Nodes[0].Nodes.Add("Orders Check List Report");
            trw_All_SuperQc.Nodes[0].Nodes.Add("Orders Error Info Report");
            trw_All_SuperQc.ExpandAll();
        }

        private void AddParent_Superqc_My_report()
        {

            string sKeyTemp = "";
            trw_All_SuperQc.Nodes.Clear();

            ht.Clear();
            dt.Clear();

            sKeyTemp = "Reports";

            trw_My_SuperQc.Nodes.Add(sKeyTemp, sKeyTemp);
            AddChilds_Superqc_My_report(sKeyTemp);

        }

        private void AddChilds_Superqc_My_report(string sKey)
        {
            ht.Clear();
            dt.Clear();


            trw_My_SuperQc.Nodes[0].Nodes.Add("User Production Report");
            trw_My_SuperQc.Nodes[0].Nodes.Add("User Production Count");

            trw_My_SuperQc.Nodes[0].Nodes.Add("Orders Document List Report");
            trw_My_SuperQc.Nodes[0].Nodes.Add("Orders Check List Report");
            trw_My_SuperQc.Nodes[0].Nodes.Add("Orders Error Info Report");
            trw_My_SuperQc.ExpandAll();
        }


        private void User_Production_Summary_design()
        {

            lbl_Subprocess.Visible = true;
            ddl_Subprocess_name.Visible = true;
            lbl_From_date.Visible = true;
            dtp_From_date.Visible = true;
            lbl_Todate.Visible = true;
            dtp_To_Date.Visible = true;
            lbl_ClientName.Visible = true;
            ddl_Client_name.Visible = true;
            lbl_Task.Visible = false;
            ddl_Order_task.Visible = false;

            lbl_Fromdate.X = 467; lbl_Fromdate.Y = 41;
            Fromdate.X = 568; Fromdate.Y = 40;

            Todate_1.X = 765; Todate_1.Y = 43;
            Todate.X = 883; Todate.Y = 40;

            lbl_client.X = 465; lbl_client.Y = 82;
            client.X = 566; client.Y = 82;

            lbl_subprocess.X = 767; lbl_subprocess.Y = 88;
            subprocess.X = 892; subprocess.Y = 84;

            lbl_From_date.Location = lbl_Fromdate;
            dtp_From_date.Location = Fromdate;
            lbl_Todate.Location = Todate_1;
            dtp_To_Date.Location = Todate;
            lbl_ClientName.Location = lbl_client;
            ddl_Client_name.Location = client;
            lbl_Subprocess.Location = lbl_subprocess;
            ddl_Subprocess_name.Location = subprocess;

        }

        private void User_Production_Summary_Rework_Design()
        {
            lbl_Rework_Fromdate.Visible = true;
            dtp_MyFromdate.Visible = true;
            lbl_Rework_Todate.Visible = true;
            dtp_MyTodate.Visible = true;

            lbl_Rework_Myclient.Visible = true;
            ddl_MyClient.Visible = true;

            lbl_Rework_Mysubpro.Visible = true;
            ddl_MySubprocess.Visible = true;

            lbl_Rework_MyTask.Visible = false;
            ddl_MyTask.Visible = false;

            lbl_Rework_MyUser.Visible = false;
            ddl_Rework_MyUsername.Visible = false;

            lbl_Rework_MyStatus.Visible = false;
            ddl_Rework_MyStatus.Visible = false;

            lbl_Rework_MyOrderno.Visible = false;
            ddl_Rework_Orderno.Visible = false;

            lbl_Record_notfound.Visible = false;





        }

        private void First_report_Rework_Design()
        {
            lbl_Rework_Myclient.Visible = true;
            ddl_MyClient.Visible = true;

            lbl_Rework_Mysubpro.Visible = true;
            ddl_MySubprocess.Visible = true;

            lbl_Rework_MyTask.Visible = true;
            ddl_MyTask.Visible = true;

            lbl_Rework_MyUser.Visible = true;
            ddl_Rework_MyUsername.Visible = true;

            lbl_Rework_MyStatus.Visible = true;
            ddl_Rework_MyStatus.Visible = true;

            lbl_Rework_MyOrderno.Visible = true;
            ddl_Rework_Orderno.Visible = true;

            lbl_Record_notfound.Visible = false;
            lbl_Rework_Myerrror.Visible = false;

            if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
            {
                grd_Rework_MyReport.Visible = true;
                cr_Rework_ReportsViewer.Visible = false;
            }
            else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
            {
                grd_Rework_MyReport.Visible = false;
                cr_Rework_ReportsViewer.Visible = true;
            }
        }

        private void Order_Document_list_design()
        {

            lbl_From_date.Visible = true;
            dtp_From_date.Visible = true;
            lbl_Todate.Visible = true;
            dtp_To_Date.Visible = true;
            lbl_ClientName.Visible = true;
            ddl_Client_name.Visible = true;
            lbl_Subprocess.Visible = false;
            ddl_Subprocess_name.Visible = false;
            lbl_Task.Visible = false;
            ddl_Order_task.Visible = false;


            lbl_Fromdate.X = 467; lbl_Fromdate.Y = 41;
            Fromdate.X = 568; Fromdate.Y = 40;

            Todate_1.X = 765; Todate_1.Y = 43;
            Todate.X = 883; Todate.Y = 40;

            lbl_client.X = 465; lbl_client.Y = 82;
            client.X = 566; client.Y = 82;
            lbl_From_date.Location = lbl_Fromdate;
            dtp_From_date.Location = Fromdate;
            lbl_Todate.Location = Todate_1;
            dtp_To_Date.Location = Todate;
            lbl_ClientName.Location = lbl_client;
            ddl_Client_name.Location = client;

        }

        private void Order_Document_list_Rework_design()
        {
            lbl_Rework_Myclient.Visible = true;
            ddl_MyClient.Visible = true;

            lbl_Rework_Mysubpro.Visible = false;
            ddl_MySubprocess.Visible = false;

            lbl_Rework_MyTask.Visible = false;
            ddl_MyTask.Visible = false;

            lbl_Rework_MyUser.Visible = false;
            ddl_Rework_MyUsername.Visible = false;

            lbl_Rework_MyStatus.Visible = false;
            ddl_Rework_MyStatus.Visible = false;

            lbl_Rework_MyOrderno.Visible = false;
            ddl_Rework_Orderno.Visible = false;

            lbl_Record_notfound.Visible = false;
            lbl_Rework_Myerrror.Visible = false;


            grd_Rework_MyReport.Visible = true;
            cr_Rework_ReportsViewer.Visible = false;

        }

        private void Order_Chklist_Design()
        {
            lbl_From_date.Visible = true;
            dtp_From_date.Visible = true;
            lbl_Todate.Visible = true;
            dtp_To_Date.Visible = true;
            lbl_ClientName.Visible = true;
            ddl_Client_name.Visible = true;
            lbl_Subprocess.Visible = true;
            ddl_Subprocess_name.Visible = true;
            lbl_Task.Visible = true;
            ddl_Order_task.Visible = true;



            lbl_Fromdate.X = 329; lbl_Fromdate.Y = 40;
            Fromdate.X = 430; Fromdate.Y = 40;

            Todate_1.X = 631; Todate_1.Y = 45;
            Todate.X = 755; Todate.Y = 41;

            lbl_client.X = 329; lbl_client.Y = 82;
            client.X = 430; client.Y = 82;

            lbl_subprocess.X = 631; lbl_subprocess.Y = 88;
            subprocess.X = 756; subprocess.Y = 84;

            username.X = 941; username.Y = 44;
            username1.X = 1033; username1.Y = 43;

            lbl_From_date.Location = lbl_Fromdate;
            dtp_From_date.Location = Fromdate;
            lbl_Todate.Location = Todate_1;
            dtp_To_Date.Location = Todate;
            lbl_ClientName.Location = lbl_client;
            ddl_Client_name.Location = client;
            lbl_Subprocess.Location = lbl_subprocess;
            ddl_Subprocess_name.Location = subprocess;
            lbl_Task.Location = username;
            ddl_Order_task.Location = username1;

        }


        private void Order_All_Chklist_Design()
        {



            lbl_AllFromDate.Visible = true;
            dtp_Rework_Fromdate.Visible = true;
            lbl_AllTodate.Visible = true;
            dtp_Rework_Todate.Visible = true;

            lbl_All_Rework_client.Visible = true;
            ddl_Rework_client.Visible = true;

            lbl_All_Rework_Subpro.Visible = true;
            ddl_Rework_Subprocess.Visible = true;

            lbl_All_Rework_Task.Visible = true;
            ddl_Rework_Task.Visible = true;

            lbl_All_Rework_user.Visible = false;
            ddl_Rework_Alluser.Visible = false;

            lbl_All_Rework_Status.Visible = false;
            ddl_Rework_AllStatus.Visible = false;

            lbl_All_rework_orderno.Visible = false;
            ddl_Rework_AllOrderno.Visible = false;

            lbl_All_report_notfound.Visible = false;



        }

        private void Order_Chklist_Rework_Design()
        {
            lbl_Rework_Myclient.Visible = true;
            ddl_MyClient.Visible = true;

            lbl_Rework_Mysubpro.Visible = true;
            ddl_MySubprocess.Visible = true;

            lbl_Rework_MyTask.Visible = false;
            ddl_MyTask.Visible = false;

            lbl_Rework_MyUser.Visible = false;
            ddl_Rework_MyUsername.Visible = false;

            lbl_Rework_MyStatus.Visible = false;
            ddl_Rework_MyStatus.Visible = false;

            lbl_Rework_MyOrderno.Visible = false;
            ddl_Rework_Orderno.Visible = false;

            lbl_Record_notfound.Visible = false;
            lbl_Rework_Myerrror.Visible = false;


            grd_Rework_MyReport.Visible = false;
            cr_Rework_ReportsViewer.Visible = true;



        }

        private void OrderError_Rework_Design()
        {
            lbl_Rework_Myclient.Visible = true;
            ddl_MyClient.Visible = true;

            lbl_Rework_Mysubpro.Visible = true;
            ddl_MySubprocess.Visible = true;

            lbl_Rework_MyTask.Visible = false;
            ddl_MyTask.Visible = false;

            lbl_Rework_MyUser.Visible = false;
            ddl_Rework_MyUsername.Visible = false;

            lbl_Rework_MyStatus.Visible = false;
            ddl_Rework_MyStatus.Visible = false;

            lbl_Rework_MyOrderno.Visible = false;
            ddl_Rework_Orderno.Visible = false;

            lbl_Record_notfound.Visible = false;
            lbl_Rework_Myerrror.Visible = false;


            grd_Rework_MyReport.Visible = true;
            cr_Rework_ReportsViewer.Visible = false;

        }

        private void tvwRightSide_AfterSelect(object sender, TreeViewEventArgs e)
        {
            Lbl_Title.Text = tvwRightSide.SelectedNode.Text;

            grd_My_Reports.DataSource = null;

            grd_My_Reports.Refresh();

            lbl_User_summary.Visible = false;

            ddl_Client_name_SelectedIndexChanged(sender, e);
            if (ddl_Client_name.Text == "")
            {
                lbl_User_summary.Visible = true;
            }
            if (tvwRightSide.SelectedNode.Text == "User Production Summary")
            {

                User_Production_Summary_design();
                grd_My_Reports.Rows.Clear();
                grd_My_Reports.Visible = true;
                cr_ReportsViewer.Visible = false;
                grd_My_Reports.Columns.Clear();

            }
            else if (tvwRightSide.SelectedNode.Text == "Productivity Report")
            {
                User_Production_Summary_design();
                grd_My_Reports.Rows.Clear();
                grd_My_Reports.Visible = true;
                cr_ReportsViewer.Visible = false;
            }
            else if (tvwRightSide.SelectedNode.Text == "Billing Report")
            {
                Order_Document_list_design();

                grd_My_Reports.Rows.Clear();
                grd_My_Reports.Visible = true;
                cr_ReportsViewer.Visible = false;
                grd_My_Reports.Columns.Clear();
                // grid_Count.Visible = true;
                // button1.Visible = true;
            }
            else if (tvwRightSide.SelectedNode.Text == "Orders Document List Report")
            {
                Order_Document_list_design();
                grd_My_Reports.Rows.Clear();
                cr_ReportsViewer.Visible = false;
                grd_My_Reports.Visible = true;
                grd_My_Reports.Columns.Clear();
            }
            else if (tvwRightSide.SelectedNode.Text == "Orders Check List Report")
            {
                Order_Chklist_Design();
                cr_ReportsViewer.Visible = true;
                grd_My_Reports.Visible = false;
                grd_My_Reports.Rows.Clear();
                grd_My_Reports.Columns.Clear();
            }
            else if (tvwRightSide.SelectedNode.Text == "Orders Error Info Report")
            {
                User_Production_Summary_design();
                grd_My_Reports.Visible = true;
                cr_ReportsViewer.Visible = false;
                grd_My_Reports.Rows.Clear();
                grd_My_Reports.Columns.Clear();
            }


        }

        public bool Validation_Myreport()
        {
            if (dtp_MyFromdate.Text == "")
            {
                lbl_Error.Visible = true;
                lbl_Error.Text = "Select Proper fields in the above filters";
                return false;
            }
            else if (dtp_MyTodate.Text == "")
            {
                lbl_Error.Visible = true;
                lbl_Error.Text = "Select Proper fields in the above filters";
                return false;
            }

            return true;

        }

        public bool Validation_All_Rework_report()
        {
            if (dtp_Rework_Fromdate.Text == "")
            {
                lbl_Error.Visible = true;
                lbl_Error.Text = "Select Proper fields in the above filters";
                return false;
            }
            else if (dtp_Rework_Todate.Text == "")
            {
                lbl_Error.Visible = true;
                lbl_Error.Text = "Select Proper fields in the above filters";
                return false;
            }

            return true;

        }

        public bool Validation_All_Superqc_report()
        {
            if (dtp_All_SuperqcFromdate.Text == "")
            {
                lbl_Error.Visible = true;
                lbl_Error.Text = "Select Proper fields in the above filters";
                return false;
            }
            else if (dtp_All_SuperqcTodate.Text == "")
            {
                lbl_Error.Visible = true;
                lbl_Error.Text = "Select Proper fields in the above filters";
                return false;
            }

            return true;

        }


        public bool Validation()
        {
            if (dtp_From_date.Text == "")
            {
                lbl_Error.Visible = true;
                lbl_Error.Text = "Select Proper fields in the above filters";
                return false;
            }
            else if (dtp_To_Date.Text == "")
            {
                lbl_Error.Visible = true;
                lbl_Error.Text = "Select Proper fields in the above filters";
                return false;
            }


            else if (ddl_Order_task.Visible == true)
            {
                if (ddl_Order_task.Text == "")
                {
                    lbl_Error.Visible = true;
                    lbl_Error.Text = "Select Proper fields in the above filters";
                    return false;
                }
            }
            return true;

        }

        public void Load_User_Production_Summary_Rework_Report()
        {
            if (Validation_Myreport() != false)
            {
                DateTime Fromdate = Convert.ToDateTime(dtp_MyFromdate.Text.ToString());
                DateTime Todate = Convert.ToDateTime(dtp_MyTodate.Text.ToString());


                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;


                Hashtable ht_Status = new Hashtable();
                System.Data.DataTable dt_Status = new System.Data.DataTable();

                dt_Status.Rows.Clear();
                string From_Date = Fromdate.ToString("MM/dd/yyyy");
                string To_Date = Todate.ToString("MM/dd/yyyy");

                ht_Status.Clear();
                dt_Status.Clear();
                string Client, SubProcess;

                if (ddl_My_Client.SelectedIndex > 0)
                {

                    Client = ddl_My_Client.SelectedValue.ToString();
                }
                else
                {

                    Client = "ALL";
                }

                if (ddl_My_Subprocess.SelectedIndex > 0)
                {

                    SubProcess = ddl_My_Subprocess.SelectedValue.ToString();
                }
                else
                {

                    SubProcess = "ALL";
                }


                if (Client == "ALL")
                {
                    ht_Status.Add("@Trans", "SELECT_DATE_RANGE");
                }
                else if (Client != "ALL" && SubProcess == "ALL")
                {
                    ht_Status.Add("@Trans", "CLIENT_WISE");
                }
                else if (Client != "ALL" && SubProcess != "ALL")
                {
                    ht_Status.Add("@Trans", "CLIENT_SUB_PROCESS_WISE");
                }


                ht_Status.Add("@Production_From_Date", From_Date);
                ht_Status.Add("@Production_To_Date", To_Date);
                ht_Status.Add("@Client", Client);
                ht_Status.Add("@Sub_Client", SubProcess);
                ht_Status.Add("@Log_In_Userid", Loged_In_User_Id);
                dt_Status = dataaccess.ExecuteSP("Sp_User_Production_Summary_Report", ht_Status);
                dtuserexport.Clear();
                dtuserexport = dt_Status;
                if (dt_Status.Rows.Count > 0)
                {






                    grd_Rework_MyReport.Rows.Clear();

                    grd_Rework_MyReport.Visible = true;

                    grd_Rework_MyReport.DataSource = null;
                    grd_Rework_MyReport.AutoGenerateColumns = false;

                    grd_Rework_MyReport.ColumnCount = 42;
                    //Grd_OrderTime.Rows.Add();

                    //Grd_OrderTime.Columns[0].Name = "SNo";
                    //Grd_OrderTime.Columns[0].HeaderText = "S. No";
                    //Grd_OrderTime.Columns[0].Width = 50;
                    //Grd_OrderTime.Columns[0].Visible = false;

                    grd_Rework_MyReport.Columns[0].Name = "OrderId";
                    grd_Rework_MyReport.Columns[0].HeaderText = "Order Id";
                    grd_Rework_MyReport.Columns[0].DataPropertyName = "Order_ID";
                    grd_Rework_MyReport.Columns[0].Width = 50;
                    grd_Rework_MyReport.Columns[0].Visible = false;



                    //grd_Rework_MyReport.Columns[1].Name = "Client_Order_Number";
                    //grd_Rework_MyReport.Columns[1].HeaderText = "Order_Number";
                    //grd_Rework_MyReport.Columns[1].DataPropertyName = "Client_Order_Number";
                    //grd_Rework_MyReport.Columns[1].Width = 140;
                    //grd_Rework_MyReport.Columns[1].Visible = false;

                    DataGridViewLinkColumn link = new DataGridViewLinkColumn();
                    grd_Rework_MyReport.Columns.Add(link);
                    link.HeaderText = "Order Number";
                    link.DataPropertyName = "Client_Order_Number";
                    link.Width = 140;
                    link.DisplayIndex = 1;

                    grd_Rework_MyReport.Columns[1].Name = "Recived_Date";
                    grd_Rework_MyReport.Columns[1].HeaderText = "Recived_Date";
                    grd_Rework_MyReport.Columns[1].DataPropertyName = "Recived_Date";
                    grd_Rework_MyReport.Columns[1].Width = 140;

                    grd_Rework_MyReport.Columns[2].Name = "Client_Name";
                    grd_Rework_MyReport.Columns[2].HeaderText = "Client_Name";
                    grd_Rework_MyReport.Columns[2].DataPropertyName = "Client_Name";
                    grd_Rework_MyReport.Columns[2].Width = 140;



                    grd_Rework_MyReport.Columns[3].Name = "Sub_ProcessName";
                    grd_Rework_MyReport.Columns[3].HeaderText = "Sub_ProcessName";
                    grd_Rework_MyReport.Columns[3].DataPropertyName = "Sub_ProcessName";
                    grd_Rework_MyReport.Columns[3].Width = 140;


                    grd_Rework_MyReport.Columns[4].Name = "Order_Type";
                    grd_Rework_MyReport.Columns[4].HeaderText = "Order_Type";
                    grd_Rework_MyReport.Columns[4].DataPropertyName = "Order_Type";
                    grd_Rework_MyReport.Columns[4].Width = 140;

                    grd_Rework_MyReport.Columns[5].Name = "Borrower_Name";
                    grd_Rework_MyReport.Columns[5].HeaderText = "Borrower_Name";
                    grd_Rework_MyReport.Columns[5].DataPropertyName = "Borrower_Name";
                    grd_Rework_MyReport.Columns[5].Width = 140;

                    grd_Rework_MyReport.Columns[6].Name = "Address";
                    grd_Rework_MyReport.Columns[6].HeaderText = "Address";
                    grd_Rework_MyReport.Columns[6].DataPropertyName = "Address";
                    grd_Rework_MyReport.Columns[6].Width = 140;


                    grd_Rework_MyReport.Columns[7].Name = "Search_UserName";
                    grd_Rework_MyReport.Columns[7].HeaderText = "SEARCH_USERNAME";
                    grd_Rework_MyReport.Columns[7].DataPropertyName = "SEARCH_USERNAME";
                    grd_Rework_MyReport.Columns[7].Width = 125;

                    grd_Rework_MyReport.Columns[8].Name = "SEARCH_STATUS";
                    grd_Rework_MyReport.Columns[8].HeaderText = "SEARCH_STATUS";
                    grd_Rework_MyReport.Columns[8].DataPropertyName = "SEARCH_STATUS";
                    grd_Rework_MyReport.Columns[8].Width = 195;

                    grd_Rework_MyReport.Columns[9].Name = "SEARCH_PRODUCTION_DATE";
                    grd_Rework_MyReport.Columns[9].HeaderText = "SEARCH_PRODUCTION_DATE";
                    grd_Rework_MyReport.Columns[9].DataPropertyName = "SEARCH_PRODUCTION_DATE";
                    grd_Rework_MyReport.Columns[9].Width = 125;

                    grd_Rework_MyReport.Columns[10].Name = "SEARCH_START_TIME";
                    grd_Rework_MyReport.Columns[10].HeaderText = "SEARCH_START_TIME";
                    grd_Rework_MyReport.Columns[10].DataPropertyName = "SEARCH_START_TIME";
                    grd_Rework_MyReport.Columns[10].Width = 250;
                    //grd_Rework_MyReport.Columns[11].ValueType=string;

                    grd_Rework_MyReport.Columns[11].Name = "SEARCH_END_TIME";
                    grd_Rework_MyReport.Columns[11].HeaderText = "SEARCH_END_TIME";
                    grd_Rework_MyReport.Columns[11].DataPropertyName = "SEARCH_END_TIME";
                    grd_Rework_MyReport.Columns[11].Width = 180;

                    grd_Rework_MyReport.Columns[12].Name = "TOTAL_SEARCH_TIME";
                    grd_Rework_MyReport.Columns[12].HeaderText = "TOTAL_SEARCH_TIME";
                    grd_Rework_MyReport.Columns[12].DataPropertyName = "TOTAL_SEARCH_TIME";
                    grd_Rework_MyReport.Columns[12].Width = 150;

                    grd_Rework_MyReport.Columns[13].Name = "SEARCH_QC_USERNAME";
                    grd_Rework_MyReport.Columns[13].HeaderText = "SEARCH_QC_USERNAME";
                    grd_Rework_MyReport.Columns[13].DataPropertyName = "SEARCH_QC_USERNAME";
                    grd_Rework_MyReport.Columns[13].Width = 150;

                    grd_Rework_MyReport.Columns[14].Name = "SEARCH_QC_STATUS";
                    grd_Rework_MyReport.Columns[14].HeaderText = "SEARCH_QC_STATUS";
                    grd_Rework_MyReport.Columns[14].DataPropertyName = "SEARCH_QC_STATUS";
                    grd_Rework_MyReport.Columns[14].Width = 120;

                    grd_Rework_MyReport.Columns[15].Name = "SEARCH_QC_PRODUCTION_DATE";
                    grd_Rework_MyReport.Columns[15].HeaderText = "SEARCH_QC_PRODUCTION_DATE";
                    grd_Rework_MyReport.Columns[15].DataPropertyName = "SEARCH_QC_PRODUCTION_DATE";
                    grd_Rework_MyReport.Columns[15].Width = 120;

                    grd_Rework_MyReport.Columns[16].Name = "SEARCH_QC_START_TIME";
                    grd_Rework_MyReport.Columns[16].HeaderText = "SEARCH_QC_START_TIME";
                    grd_Rework_MyReport.Columns[16].DataPropertyName = "SEARCH_QC_START_TIME";
                    grd_Rework_MyReport.Columns[16].Width = 100;

                    grd_Rework_MyReport.Columns[17].Name = "SEARCH_QC_END_TIME";
                    grd_Rework_MyReport.Columns[17].HeaderText = "SEARCH_QC_END_TIME";
                    grd_Rework_MyReport.Columns[17].DataPropertyName = "SEARCH_QC_END_TIME";
                    grd_Rework_MyReport.Columns[17].Width = 100;

                    grd_Rework_MyReport.Columns[18].Name = "TOTAL_SEARCH_QC_TIME";
                    grd_Rework_MyReport.Columns[18].HeaderText = "TOTAL_SEARCH_QC_TIME";
                    grd_Rework_MyReport.Columns[18].DataPropertyName = "TOTAL_SEARCH_QC_TIME";
                    grd_Rework_MyReport.Columns[18].Width = 100;

                    grd_Rework_MyReport.Columns[19].Name = "TYPING_USERNAME";
                    grd_Rework_MyReport.Columns[19].HeaderText = "TYPING_USERNAME";
                    grd_Rework_MyReport.Columns[19].DataPropertyName = "TYPING_USERNAME";
                    grd_Rework_MyReport.Columns[19].Width = 100;

                    grd_Rework_MyReport.Columns[20].Name = "TYPING_STATUS";
                    grd_Rework_MyReport.Columns[20].HeaderText = "TYPING_STATUS";
                    grd_Rework_MyReport.Columns[20].DataPropertyName = "TYPING_STATUS";
                    grd_Rework_MyReport.Columns[20].Width = 100;

                    grd_Rework_MyReport.Columns[21].Name = "TYPING_PRODUCTION_DATE";
                    grd_Rework_MyReport.Columns[21].HeaderText = "TYPING_PRODUCTION_DATE";
                    grd_Rework_MyReport.Columns[21].DataPropertyName = "TYPING_PRODUCTION_DATE";
                    grd_Rework_MyReport.Columns[21].Width = 100;

                    grd_Rework_MyReport.Columns[22].Name = "TYPING_START_TIME";
                    grd_Rework_MyReport.Columns[22].HeaderText = "TYPING_START_TIME";
                    grd_Rework_MyReport.Columns[22].DataPropertyName = "TYPING_START_TIME";
                    grd_Rework_MyReport.Columns[22].Width = 100;

                    grd_Rework_MyReport.Columns[23].Name = "TYPING_END_TIME";
                    grd_Rework_MyReport.Columns[23].HeaderText = "TYPING_END_TIME";
                    grd_Rework_MyReport.Columns[23].DataPropertyName = "TYPING_END_TIME";
                    grd_Rework_MyReport.Columns[23].Width = 100;

                    grd_Rework_MyReport.Columns[24].Name = "TYPING_TOTAL_TIME";
                    grd_Rework_MyReport.Columns[24].HeaderText = "TYPING_TOTAL_TIME";
                    grd_Rework_MyReport.Columns[24].DataPropertyName = "TYPING_TOTAL_TIME";
                    grd_Rework_MyReport.Columns[24].Width = 100;

                    grd_Rework_MyReport.Columns[25].Name = "TYPIG_QC_USERNAME";
                    grd_Rework_MyReport.Columns[25].HeaderText = "TYPIG_QC_USERNAME";
                    grd_Rework_MyReport.Columns[25].DataPropertyName = "TYPIG_QC_USERNAME";
                    grd_Rework_MyReport.Columns[25].Width = 100;

                    grd_Rework_MyReport.Columns[26].Name = "TYPING_QC_STATUS";
                    grd_Rework_MyReport.Columns[26].HeaderText = "TYPING_QC_STATUS";
                    grd_Rework_MyReport.Columns[26].DataPropertyName = "TYPING_QC_STATUS";
                    grd_Rework_MyReport.Columns[26].Width = 100;

                    grd_Rework_MyReport.Columns[27].Name = "TYPING_QC_PRODUCTION_DATE";
                    grd_Rework_MyReport.Columns[27].HeaderText = "TYPING_QC_PRODUCTION_DATE";
                    grd_Rework_MyReport.Columns[27].DataPropertyName = "TYPING_QC_PRODUCTION_DATE";
                    grd_Rework_MyReport.Columns[27].Width = 100;


                    grd_Rework_MyReport.Columns[28].Name = "TYPING_QC_START_TIME";
                    grd_Rework_MyReport.Columns[28].HeaderText = "TYPING_QC_START_TIME";
                    grd_Rework_MyReport.Columns[28].DataPropertyName = "TYPING_QC_START_TIME";
                    grd_Rework_MyReport.Columns[28].Width = 100;

                    grd_Rework_MyReport.Columns[29].Name = "TYPING_QC_END_TIME";
                    grd_Rework_MyReport.Columns[29].HeaderText = "TYPING_QC_END_TIME";
                    grd_Rework_MyReport.Columns[29].DataPropertyName = "TYPING_QC_END_TIME";
                    grd_Rework_MyReport.Columns[29].Width = 100;

                    grd_Rework_MyReport.Columns[30].Name = "TYPING_QC_TOTAL_TIME";
                    grd_Rework_MyReport.Columns[30].HeaderText = "TYPING_QC_TOTAL_TIME";
                    grd_Rework_MyReport.Columns[30].DataPropertyName = "TYPING_QC_TOTAL_TIME";
                    grd_Rework_MyReport.Columns[30].Width = 100;

                    grd_Rework_MyReport.Columns[31].Name = "UPLOAD_USERNAME";
                    grd_Rework_MyReport.Columns[31].HeaderText = "UPLOAD_USERNAME";
                    grd_Rework_MyReport.Columns[31].DataPropertyName = "UPLOAD_USERNAME";
                    grd_Rework_MyReport.Columns[31].Width = 100;

                    grd_Rework_MyReport.Columns[32].Name = "UPLOAD_STATUS";
                    grd_Rework_MyReport.Columns[32].HeaderText = "UPLOAD_STATUS";
                    grd_Rework_MyReport.Columns[32].DataPropertyName = "UPLOAD_STATUS";
                    grd_Rework_MyReport.Columns[32].Width = 100;

                    grd_Rework_MyReport.Columns[33].Name = "UPLOAD_PRODUCTION_DATE";
                    grd_Rework_MyReport.Columns[33].HeaderText = "UPLOAD_PRODUCTION_DATE";
                    grd_Rework_MyReport.Columns[33].DataPropertyName = "UPLOAD_PRODUCTION_DATE";
                    grd_Rework_MyReport.Columns[33].Width = 100;

                    grd_Rework_MyReport.Columns[34].Name = "UPLOAD_START_TIME";
                    grd_Rework_MyReport.Columns[34].HeaderText = "UPLOAD_START_TIME";
                    grd_Rework_MyReport.Columns[34].DataPropertyName = "UPLOAD_START_TIME";
                    grd_Rework_MyReport.Columns[34].Width = 100;

                    grd_Rework_MyReport.Columns[35].Name = "UPLOAD_END_TIME";
                    grd_Rework_MyReport.Columns[35].HeaderText = "UPLOAD_END_TIME";
                    grd_Rework_MyReport.Columns[35].DataPropertyName = "UPLOAD_END_TIME";
                    grd_Rework_MyReport.Columns[35].Width = 100;

                    grd_Rework_MyReport.Columns[36].Name = "TOTAL_UPLAODING_TIME";
                    grd_Rework_MyReport.Columns[36].HeaderText = "TOTAL_UPLAODING_TIME";
                    grd_Rework_MyReport.Columns[36].DataPropertyName = "TOTAL_UPLAODING_TIME";
                    grd_Rework_MyReport.Columns[36].Width = 100;

                    grd_Rework_MyReport.Columns[37].Name = "Search";
                    grd_Rework_MyReport.Columns[37].HeaderText = "Search Cooments";
                    grd_Rework_MyReport.Columns[37].DataPropertyName = "Search";
                    grd_Rework_MyReport.Columns[37].Width = 100;


                    grd_Rework_MyReport.Columns[38].Name = "Search_Qc";
                    grd_Rework_MyReport.Columns[38].HeaderText = "Search_Qc_Comments";
                    grd_Rework_MyReport.Columns[38].DataPropertyName = "Search_Qc";
                    grd_Rework_MyReport.Columns[38].Width = 100;


                    grd_Rework_MyReport.Columns[39].Name = "Typing";
                    grd_Rework_MyReport.Columns[39].HeaderText = "Typing_Comments";
                    grd_Rework_MyReport.Columns[39].DataPropertyName = "Typing";
                    grd_Rework_MyReport.Columns[39].Width = 100;




                    grd_Rework_MyReport.Columns[40].Name = "Typing_Qc";
                    grd_Rework_MyReport.Columns[40].HeaderText = "Typing_Qc_Comments";
                    grd_Rework_MyReport.Columns[40].DataPropertyName = "Typing_Qc";
                    grd_Rework_MyReport.Columns[40].Width = 100;



                    grd_Rework_MyReport.Columns[41].Name = "Upload";
                    grd_Rework_MyReport.Columns[41].HeaderText = "Upload_Comments";
                    grd_Rework_MyReport.Columns[41].DataPropertyName = "Upload";
                    grd_Rework_MyReport.Columns[41].Width = 100;




                    grd_Rework_MyReport.DataSource = dt_Status;





                }
                else
                {
                    grd_Rework_MyReport.Visible = false;
                    grd_Rework_MyReport.DataSource = null;
                    //Grd_OrderTime.EmptyDataText = "No Orders Added";
                    //Grd_OrderTime.DataBind();

                }
            }
        }

        public void Load_User_Production_Summary_Report()
        {

            DateTime Fromdate = Convert.ToDateTime(dtp_From_date.Text.ToString());
            DateTime Todate = Convert.ToDateTime(dtp_To_Date.Text.ToString());


            DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;


            Hashtable ht_Status = new Hashtable();
            System.Data.DataTable dt_Status = new System.Data.DataTable();

            dt_Status.Rows.Clear();
            string From_Date = Fromdate.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture);
            string To_Date = Todate.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture);

            ht_Status.Clear();
            dt_Status.Clear();
            string Client, SubProcess;

            if (ddl_Client_Status.SelectedIndex > 0)
            {

                Client = ddl_Client_Status.SelectedValue.ToString();
            }
            else
            {

                Client = "ALL";
            }

            if (ddl_Subprocess_Status.SelectedIndex > 0)
            {

                SubProcess = ddl_SubProcess.SelectedValue.ToString();
            }
            else
            {

                SubProcess = "ALL";
            }


            if (Client == "ALL")
            {
                ht_Status.Add("@Trans", "SELECT_DATE_RANGE");
            }
            else if (Client != "ALL" && SubProcess == "ALL")
            {
                ht_Status.Add("@Trans", "CLIENT_WISE");
            }
            else if (Client != "ALL" && SubProcess != "ALL")
            {
                ht_Status.Add("@Trans", "CLIENT_SUB_PROCESS_WISE");
            }


            ht_Status.Add("@Production_From_Date", From_Date);
            ht_Status.Add("@Production_To_Date", To_Date);
            ht_Status.Add("@Client", Client);
            ht_Status.Add("@Sub_Client", SubProcess);
            ht_Status.Add("@Log_In_Userid", Loged_In_User_Id);
            dt_Status = dataaccess.ExecuteSP("Sp_User_Production_Summary_Report", ht_Status);
            dtuserexport.Clear();
            dtuserexport = dt_Status;
            grd_My_Reports.Rows.Clear();

            if (dt_Status.Rows.Count > 0)
            {

                grd_My_Reports.Rows.Clear();

                grd_My_Reports.Visible = true;

                grd_My_Reports.DataSource = null;
                grd_My_Reports.AutoGenerateColumns = false;

                grd_My_Reports.ColumnCount = 93;
                grd_My_Reports.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Ebrima", 7.75F, FontStyle.Bold);
                grd_My_Reports.ColumnHeadersHeight = 40;
                //grd_My_Reports.ColumnHeadersDefaultCellStyle.ForeColor = Color.White;
                //grd_My_Reports.ColumnHeadersDefaultCellStyle.BackColor = Color.Black;



                grd_My_Reports.Columns[0].Name = "OrderId";
                grd_My_Reports.Columns[0].HeaderText = "ORDER ID";
                grd_My_Reports.Columns[0].DataPropertyName = "Order_ID";
                grd_My_Reports.Columns[0].Width = 50;
                grd_My_Reports.Columns[0].Visible = false;



                grd_My_Reports.Columns[1].Name = "Client_Order_Number";
                grd_My_Reports.Columns[1].HeaderText = "ORDER NUMBER";
                grd_My_Reports.Columns[1].DataPropertyName = "Client_Order_Number";
                grd_My_Reports.Columns[1].Width = 140;


                grd_My_Reports.Columns[2].Name = "Recived_Date";
                grd_My_Reports.Columns[2].HeaderText = "RECIVED DATE";
                grd_My_Reports.Columns[2].DataPropertyName = "Recived_Date";
                grd_My_Reports.Columns[2].Width = 100;


                if (User_Role_Id == "1")
                {

                    grd_My_Reports.Columns[3].Name = "Client_Name";
                    grd_My_Reports.Columns[3].HeaderText = "CLIENT NAME";
                    grd_My_Reports.Columns[3].DataPropertyName = "Client_Name";
                    grd_My_Reports.Columns[3].Width = 130;



                    grd_My_Reports.Columns[4].Name = "Sub_ProcessName";
                    grd_My_Reports.Columns[4].HeaderText = "SUB CLIENT NAME";
                    grd_My_Reports.Columns[4].DataPropertyName = "Sub_ProcessName";
                    grd_My_Reports.Columns[4].Width = 130;
                }
                else
                {


                    grd_My_Reports.Columns[3].Name = "Client_Number";
                    grd_My_Reports.Columns[3].HeaderText = "CLIENT NAME";
                    grd_My_Reports.Columns[3].DataPropertyName = "Client_Number";
                    grd_My_Reports.Columns[3].Width = 130;



                    grd_My_Reports.Columns[4].Name = "Subprocess_Numbers";
                    grd_My_Reports.Columns[4].HeaderText = "SUB CLIENT NAME";
                    grd_My_Reports.Columns[4].DataPropertyName = "Subprocess_Number";
                    grd_My_Reports.Columns[4].Width = 130;
                }


                grd_My_Reports.Columns[5].Name = "Order_Type";
                grd_My_Reports.Columns[5].HeaderText = "ORDER TYPE";
                grd_My_Reports.Columns[5].DataPropertyName = "Order_Type";
                grd_My_Reports.Columns[5].Width = 120;

                grd_My_Reports.Columns[6].Name = "Borrower_Name";
                grd_My_Reports.Columns[6].HeaderText = "BORROWER NAME";
                grd_My_Reports.Columns[6].DataPropertyName = "Borrower_Name";
                grd_My_Reports.Columns[6].Width = 130;

                grd_My_Reports.Columns[7].Name = "Current_Task";
                grd_My_Reports.Columns[7].HeaderText = "CURRENT TASK";
                grd_My_Reports.Columns[7].DataPropertyName = "Current_Task";
                grd_My_Reports.Columns[7].Width = 100;

                grd_My_Reports.Columns[8].Name = "Current_Status";
                grd_My_Reports.Columns[8].HeaderText = "CURRENT STATUS";
                grd_My_Reports.Columns[8].DataPropertyName = "Current_Status";
                grd_My_Reports.Columns[8].Width = 100;

                grd_My_Reports.Columns[9].Name = "Address";
                grd_My_Reports.Columns[9].HeaderText = "ADDRESS";
                grd_My_Reports.Columns[9].DataPropertyName = "Address";
                grd_My_Reports.Columns[9].Width = 140;

                grd_My_Reports.Columns[10].Name = "Search_UserName";
                grd_My_Reports.Columns[10].HeaderText = "SEARCH USERNAME";
                grd_My_Reports.Columns[10].DataPropertyName = "SEARCH_USERNAME";
                grd_My_Reports.Columns[10].Width = 120;

                grd_My_Reports.Columns[11].Name = "Searchempcode";
                grd_My_Reports.Columns[11].HeaderText = "SEARCH USER EMPCODE";
                grd_My_Reports.Columns[11].DataPropertyName = "Search_User_EmpCode";
                grd_My_Reports.Columns[11].Width = 90;

                grd_My_Reports.Columns[12].Name = "Searchjobrole";
                grd_My_Reports.Columns[12].HeaderText = "SEARCH USER JOB ROLE";
                grd_My_Reports.Columns[12].DataPropertyName = "Search_User_Job_Role";
                grd_My_Reports.Columns[12].Width = 80;


                grd_My_Reports.Columns[13].Name = "Searchshift";
                grd_My_Reports.Columns[13].HeaderText = "SEARCH USER SHIFT";
                grd_My_Reports.Columns[13].DataPropertyName = "Search_User_Shift";
                grd_My_Reports.Columns[13].Width = 80;


                grd_My_Reports.Columns[14].Name = "Searcreporting_to_1";
                grd_My_Reports.Columns[14].HeaderText = "SEARCH USER REPORTING TO 1";
                grd_My_Reports.Columns[14].DataPropertyName = "Search_User_Reporting_To_1";
                grd_My_Reports.Columns[14].Width = 140;

                grd_My_Reports.Columns[15].Name = "Searcreporting_to_2";
                grd_My_Reports.Columns[15].HeaderText = "SEARCH USER REPORTING TO 2";
                grd_My_Reports.Columns[15].DataPropertyName = "Search_User_Reporting_To_2";
                grd_My_Reports.Columns[15].Width = 140;



                grd_My_Reports.Columns[16].Name = "SEARCH_STATUS";
                grd_My_Reports.Columns[16].HeaderText = "SEARCH STATUS";
                grd_My_Reports.Columns[16].DataPropertyName = "SEARCH_STATUS";
                grd_My_Reports.Columns[16].Width = 100;

                grd_My_Reports.Columns[17].Name = "SEARCH_PRODUCTION_DATE";
                grd_My_Reports.Columns[17].HeaderText = "SEARCH PRODUCTION DATE";
                grd_My_Reports.Columns[17].DataPropertyName = "SEARCH_PRODUCTION_DATE";
                grd_My_Reports.Columns[17].Width = 120;

                grd_My_Reports.Columns[18].Name = "SEARCH_START_TIME";
                grd_My_Reports.Columns[18].HeaderText = "SEARCH START TIME";
                grd_My_Reports.Columns[18].DataPropertyName = "SEARCH_START_TIME";
                grd_My_Reports.Columns[18].Width = 120;

                grd_My_Reports.Columns[19].Name = "SEARCH_END_TIME";
                grd_My_Reports.Columns[19].HeaderText = "SEARCH END TIME";
                grd_My_Reports.Columns[19].DataPropertyName = "SEARCH_END_TIME";
                grd_My_Reports.Columns[19].Width = 120;

                grd_My_Reports.Columns[20].Name = "TOTAL_SEARCH_TIME";
                grd_My_Reports.Columns[20].HeaderText = "TOTAL SEARCH TIME";
                grd_My_Reports.Columns[20].DataPropertyName = "TOTAL_SEARCH_TIME";
                grd_My_Reports.Columns[20].Width = 120;

                grd_My_Reports.Columns[21].Name = "SEARCH_QC_USERNAME";
                grd_My_Reports.Columns[21].HeaderText = "SEARCH QC USERNAME";
                grd_My_Reports.Columns[21].DataPropertyName = "SEARCH_QC_USERNAME";
                grd_My_Reports.Columns[21].Width = 120;


                grd_My_Reports.Columns[22].Name = "SearchQCempcode";
                grd_My_Reports.Columns[22].HeaderText = "SEARCH_QC USER EMPCODE";
                grd_My_Reports.Columns[22].DataPropertyName = "SEARCH_QC_USER_EMP_CODE";
                grd_My_Reports.Columns[22].Width = 100;

                grd_My_Reports.Columns[23].Name = "SearchQCjobrole";
                grd_My_Reports.Columns[23].HeaderText = "SEARCH_QC USER JOB ROLE";
                grd_My_Reports.Columns[23].DataPropertyName = "SEARCH_QC_USER_JOB_ROLE";
                grd_My_Reports.Columns[23].Width = 140;


                grd_My_Reports.Columns[24].Name = "SearchQCshift";
                grd_My_Reports.Columns[24].HeaderText = "SEARCH_QC USER SHIFT";
                grd_My_Reports.Columns[24].DataPropertyName = "SEARCH_QC_USER_SHIFT";
                grd_My_Reports.Columns[24].Width = 100;


                grd_My_Reports.Columns[25].Name = "SearcQCreporting_to_1";
                grd_My_Reports.Columns[25].HeaderText = "SEARCH_QC USER REPORTING TO 1";
                grd_My_Reports.Columns[25].DataPropertyName = "Search_QC_User_Reporting_To_1";
                grd_My_Reports.Columns[25].Width = 140;

                grd_My_Reports.Columns[26].Name = "Searcreporting_to_2";
                grd_My_Reports.Columns[26].HeaderText = "SEARCH_QC USER REPORTING TO 2";
                grd_My_Reports.Columns[26].DataPropertyName = "Search_QC_User_Reporting_To_2";
                grd_My_Reports.Columns[26].Width = 140;

                grd_My_Reports.Columns[27].Name = "SEARCH_QC_STATUS";
                grd_My_Reports.Columns[27].HeaderText = "SEARCH_QC STATUS";
                grd_My_Reports.Columns[27].DataPropertyName = "SEARCH_QC_STATUS";
                grd_My_Reports.Columns[27].Width = 120;

                grd_My_Reports.Columns[28].Name = "SEARCH_QC_PRODUCTION_DATE";
                grd_My_Reports.Columns[28].HeaderText = "SEARCH_QC PRODUCTION DATE";
                grd_My_Reports.Columns[28].DataPropertyName = "SEARCH_QC_PRODUCTION_DATE";
                grd_My_Reports.Columns[28].Width = 130;

                grd_My_Reports.Columns[29].Name = "SEARCH_QC_START_TIME";
                grd_My_Reports.Columns[29].HeaderText = "SEARCH_QC START_TIME";
                grd_My_Reports.Columns[29].DataPropertyName = "SEARCH_QC_START_TIME";
                grd_My_Reports.Columns[29].Width = 130;

                grd_My_Reports.Columns[30].Name = "SEARCH_QC_END_TIME";
                grd_My_Reports.Columns[30].HeaderText = "SEARCH_QC END_TIME";
                grd_My_Reports.Columns[30].DataPropertyName = "SEARCH_QC_END_TIME";
                grd_My_Reports.Columns[30].Width = 130;

                grd_My_Reports.Columns[31].Name = "TOTAL_SEARCH_QC_TIME";
                grd_My_Reports.Columns[31].HeaderText = "TOTAL SEARCH_QC TIME";
                grd_My_Reports.Columns[31].DataPropertyName = "TOTAL_SEARCH_QC_TIME";
                grd_My_Reports.Columns[31].Width = 130;






                grd_My_Reports.Columns[32].Name = "TYPING_USERNAME";
                grd_My_Reports.Columns[32].HeaderText = "TYPING USERNAME";
                grd_My_Reports.Columns[32].DataPropertyName = "TYPING_USERNAME";
                grd_My_Reports.Columns[32].Width = 120;


                grd_My_Reports.Columns[33].Name = "typinguserempcode";
                grd_My_Reports.Columns[33].HeaderText = "TYPING USER EMPCODE";
                grd_My_Reports.Columns[33].DataPropertyName = "Typing_User_Emp_Code";
                grd_My_Reports.Columns[33].Width = 100;


                grd_My_Reports.Columns[34].Name = "typinguserempjobrole";
                grd_My_Reports.Columns[34].HeaderText = "TYPING USER JOB ROLE";
                grd_My_Reports.Columns[34].DataPropertyName = "Typing_User_Job_Role";
                grd_My_Reports.Columns[34].Width = 100;

                grd_My_Reports.Columns[35].Name = "typingusereshift";
                grd_My_Reports.Columns[35].HeaderText = "TYPING USER SHIFT";
                grd_My_Reports.Columns[35].DataPropertyName = "Typing_User_Shift";
                grd_My_Reports.Columns[35].Width = 100;


                grd_My_Reports.Columns[36].Name = "typinguserereportingto_1";
                grd_My_Reports.Columns[36].HeaderText = "TYPING USER REPORTING TO 1";
                grd_My_Reports.Columns[36].DataPropertyName = "Typing_User_Reporting_To_1";
                grd_My_Reports.Columns[36].Width = 140;

                grd_My_Reports.Columns[37].Name = "typinguserereportingto_2";
                grd_My_Reports.Columns[37].HeaderText = "TYPING USER REPORTING TO 2";
                grd_My_Reports.Columns[37].DataPropertyName = "Typing_User_Reporting_To_2";
                grd_My_Reports.Columns[37].Width = 140;


                grd_My_Reports.Columns[38].Name = "TYPING_STATUS";
                grd_My_Reports.Columns[38].HeaderText = "TYPING STATUS";
                grd_My_Reports.Columns[38].DataPropertyName = "TYPING_STATUS";
                grd_My_Reports.Columns[38].Width = 100;

                grd_My_Reports.Columns[39].Name = "TYPING_PRODUCTION_DATE";
                grd_My_Reports.Columns[39].HeaderText = "TYPING PRODUCTION DATE";
                grd_My_Reports.Columns[39].DataPropertyName = "TYPING_PRODUCTION_DATE";
                grd_My_Reports.Columns[39].Width = 120;


                grd_My_Reports.Columns[40].Name = "TYPING_START_TIME";
                grd_My_Reports.Columns[40].HeaderText = "TYPING START_TIME";
                grd_My_Reports.Columns[40].DataPropertyName = "TYPING_START_TIME";
                grd_My_Reports.Columns[40].Width = 100;

                grd_My_Reports.Columns[41].Name = "TYPING_END_TIME";
                grd_My_Reports.Columns[41].HeaderText = "TYPING END_TIME";
                grd_My_Reports.Columns[41].DataPropertyName = "TYPING_END_TIME";
                grd_My_Reports.Columns[41].Width = 100;

                grd_My_Reports.Columns[42].Name = "TYPING_TOTAL_TIME";
                grd_My_Reports.Columns[42].HeaderText = "TYPING TOTAL_TIME";
                grd_My_Reports.Columns[42].DataPropertyName = "TYPING_TOTAL_TIME";
                grd_My_Reports.Columns[42].Width = 100;

                grd_My_Reports.Columns[43].Name = "TYPIG_QC_USERNAME";
                grd_My_Reports.Columns[43].HeaderText = "TYPIG_QC USERNAME";
                grd_My_Reports.Columns[43].DataPropertyName = "TYPIG_QC_USERNAME";
                grd_My_Reports.Columns[43].Width = 100;

                grd_My_Reports.Columns[44].Name = "typingqcempcode";
                grd_My_Reports.Columns[44].HeaderText = "TYPIG_QC EMPCODE";
                grd_My_Reports.Columns[44].DataPropertyName = "TYPING_QC_EMP_CODE";
                grd_My_Reports.Columns[44].Width = 100;

                grd_My_Reports.Columns[45].Name = "typingqcjobrole";
                grd_My_Reports.Columns[45].HeaderText = "TYPIG_QC JOBROLE";
                grd_My_Reports.Columns[45].DataPropertyName = "TYPING_QC_JOB_ROLE";
                grd_My_Reports.Columns[45].Width = 100;

                grd_My_Reports.Columns[46].Name = "typingqcshift";
                grd_My_Reports.Columns[46].HeaderText = "TYPIG_QC SHIFT";
                grd_My_Reports.Columns[46].DataPropertyName = "TYPING_QC_SHIFT";
                grd_My_Reports.Columns[46].Width = 100;

                grd_My_Reports.Columns[47].Name = "typingqcreportingto1";
                grd_My_Reports.Columns[47].HeaderText = "TYPING_QC USER REPORTING TO 1";
                grd_My_Reports.Columns[47].DataPropertyName = "TYPING_QC_User_Reporting_To_1";
                grd_My_Reports.Columns[47].Width = 140;


                grd_My_Reports.Columns[48].Name = "typingqcreportingto2";
                grd_My_Reports.Columns[48].HeaderText = "TYPING_QC USER REPORTING TO 2";
                grd_My_Reports.Columns[48].DataPropertyName = "TYPING_QC_User_Reporting_To_2";
                grd_My_Reports.Columns[48].Width = 140;


                grd_My_Reports.Columns[49].Name = "TYPING_QC_STATUS";
                grd_My_Reports.Columns[49].HeaderText = "TYPING_QC STATUS";
                grd_My_Reports.Columns[49].DataPropertyName = "TYPING_QC_STATUS";
                grd_My_Reports.Columns[49].Width = 100;

                grd_My_Reports.Columns[50].Name = "TYPING_QC_PRODUCTION_DATE";
                grd_My_Reports.Columns[50].HeaderText = "TYPING_QC PRODUCTION_DATE";
                grd_My_Reports.Columns[50].DataPropertyName = "TYPING_QC_PRODUCTION_DATE";
                grd_My_Reports.Columns[50].Width = 120;


                grd_My_Reports.Columns[51].Name = "TYPING_QC_START_TIME";
                grd_My_Reports.Columns[51].HeaderText = "TYPING_QC START_TIME";
                grd_My_Reports.Columns[51].DataPropertyName = "TYPING_QC_START_TIME";
                grd_My_Reports.Columns[51].Width = 120;

                grd_My_Reports.Columns[52].Name = "TYPING_QC_END_TIME";
                grd_My_Reports.Columns[52].HeaderText = "TYPING_QC END_TIME";
                grd_My_Reports.Columns[52].DataPropertyName = "TYPING_QC_END_TIME";
                grd_My_Reports.Columns[52].Width = 120;

                grd_My_Reports.Columns[53].Name = "TYPING_QC_TOTAL_TIME";
                grd_My_Reports.Columns[53].HeaderText = "TYPING_QC TOTAL_TIME";
                grd_My_Reports.Columns[53].DataPropertyName = "TYPING_QC_TOTAL_TIME";
                grd_My_Reports.Columns[53].Width = 120;

                grd_My_Reports.Columns[54].Name = "UPLOAD_USERNAME";
                grd_My_Reports.Columns[54].HeaderText = "UPLOAD_USERNAME";
                grd_My_Reports.Columns[54].DataPropertyName = "UPLOAD_USERNAME";
                grd_My_Reports.Columns[54].Width = 100;


                grd_My_Reports.Columns[55].Name = "uploaduserempcode";
                grd_My_Reports.Columns[55].HeaderText = "UPLOAD_USER EMPCODE";
                grd_My_Reports.Columns[55].DataPropertyName = "UPLOAD_USER_EMP_CODE";
                grd_My_Reports.Columns[55].Width = 100;

                grd_My_Reports.Columns[56].Name = "uploadjobrole";
                grd_My_Reports.Columns[56].HeaderText = "UPLOAD_USER JOB ROLE";
                grd_My_Reports.Columns[56].DataPropertyName = "UPLOAD_USER_JOB_ROLE";
                grd_My_Reports.Columns[56].Width = 120;

                grd_My_Reports.Columns[57].Name = "uploadusershift";
                grd_My_Reports.Columns[57].HeaderText = "UPLOAD_USER SHIFT";
                grd_My_Reports.Columns[57].DataPropertyName = "UPLOAD_USER_SHIFT";
                grd_My_Reports.Columns[57].Width = 100;

                grd_My_Reports.Columns[58].Name = "uploaduserReportingto1";
                grd_My_Reports.Columns[58].HeaderText = "UPLOAD_USER REPORTING TO 1";
                grd_My_Reports.Columns[58].DataPropertyName = "UPLOAD_USER_REPORTING_TO_1";
                grd_My_Reports.Columns[58].Width = 140;

                grd_My_Reports.Columns[59].Name = "uploaduserReportingto2";
                grd_My_Reports.Columns[59].HeaderText = "UPLOAD_USER REPORTING TO 2";
                grd_My_Reports.Columns[59].DataPropertyName = "UPLOAD_USER_REPORTING_TO_2";
                grd_My_Reports.Columns[59].Width = 140;


                grd_My_Reports.Columns[60].Name = "UPLOAD_STATUS";
                grd_My_Reports.Columns[60].HeaderText = "UPLOAD STATUS";
                grd_My_Reports.Columns[60].DataPropertyName = "UPLOAD_STATUS";
                grd_My_Reports.Columns[60].Width = 120;

                grd_My_Reports.Columns[61].Name = "UPLOAD_PRODUCTION_DATE";
                grd_My_Reports.Columns[61].HeaderText = "UPLOAD PRODUCTION_DATE";
                grd_My_Reports.Columns[61].DataPropertyName = "UPLOAD_PRODUCTION_DATE";
                grd_My_Reports.Columns[61].Width = 120;

                grd_My_Reports.Columns[62].Name = "UPLOAD_START_TIME";
                grd_My_Reports.Columns[62].HeaderText = "UPLOAD START_TIME";
                grd_My_Reports.Columns[62].DataPropertyName = "UPLOAD_START_TIME";
                grd_My_Reports.Columns[62].Width = 120;

                grd_My_Reports.Columns[63].Name = "UPLOAD_END_TIME";
                grd_My_Reports.Columns[63].HeaderText = "UPLOAD END_TIME";
                grd_My_Reports.Columns[63].DataPropertyName = "UPLOAD_END_TIME";
                grd_My_Reports.Columns[63].Width = 120;

                grd_My_Reports.Columns[64].Name = "TOTAL_UPLAODING_TIME";
                grd_My_Reports.Columns[64].HeaderText = "TOTAL UPLAODING_TIME";
                grd_My_Reports.Columns[64].DataPropertyName = "TOTAL_UPLAODING_TIME";
                grd_My_Reports.Columns[64].Width = 120;

                grd_My_Reports.Columns[65].Name = "Search";
                grd_My_Reports.Columns[65].HeaderText = "SEARCH COMMENTS";
                grd_My_Reports.Columns[65].DataPropertyName = "Search";
                grd_My_Reports.Columns[65].Width = 100;


                grd_My_Reports.Columns[66].Name = "Search_Qc";
                grd_My_Reports.Columns[66].HeaderText = "SEARCH_QC COMMENTS";
                grd_My_Reports.Columns[66].DataPropertyName = "Search_Qc";
                grd_My_Reports.Columns[66].Width = 100;


                grd_My_Reports.Columns[67].Name = "Typing";
                grd_My_Reports.Columns[67].HeaderText = "TYPING COMMENTS";
                grd_My_Reports.Columns[67].DataPropertyName = "Typing";
                grd_My_Reports.Columns[67].Width = 100;


                grd_My_Reports.Columns[68].Name = "Typing_Qc";
                grd_My_Reports.Columns[68].HeaderText = "TYPING_QC COMMENTS";
                grd_My_Reports.Columns[68].DataPropertyName = "Typing_Qc";
                grd_My_Reports.Columns[68].Width = 100;


                grd_My_Reports.Columns[69].Name = "Upload";
                grd_My_Reports.Columns[69].HeaderText = "UPLOAD COMMENTS";
                grd_My_Reports.Columns[69].DataPropertyName = "Upload";
                grd_My_Reports.Columns[69].Width = 100;


                grd_My_Reports.Columns[70].Name = "Exception_Progress";
                grd_My_Reports.Columns[70].HeaderText = "EXCEPTION PROGRESS";
                grd_My_Reports.Columns[70].DataPropertyName = "Exception_Progress";
                grd_My_Reports.Columns[70].Width = 100;

                grd_My_Reports.Columns[71].Name = "Exception_Production_Date";
                grd_My_Reports.Columns[71].HeaderText = "EXCEPTION PRODUCTION DATE";
                grd_My_Reports.Columns[71].DataPropertyName = "Exception_Production_Date";
                grd_My_Reports.Columns[71].Width = 120;

                grd_My_Reports.Columns[72].Name = "Exception_Start_Time";
                grd_My_Reports.Columns[72].HeaderText = "EXCEPTION START_TIME";
                grd_My_Reports.Columns[72].DataPropertyName = "Exception_Start_Time";
                grd_My_Reports.Columns[72].Width = 120;

                grd_My_Reports.Columns[73].Name = "Exception_End_Time";
                grd_My_Reports.Columns[73].HeaderText = "EXCEPTION END_TIME";
                grd_My_Reports.Columns[73].DataPropertyName = "Exception_End_Time";
                grd_My_Reports.Columns[73].Width = 120;

                grd_My_Reports.Columns[74].Name = "TOTAL_EXCEPTION_TIME";
                grd_My_Reports.Columns[74].HeaderText = "TOTAL EXCEPTION_TIME";
                grd_My_Reports.Columns[74].DataPropertyName = "TOTAL_EXCEPTION_TIME";
                grd_My_Reports.Columns[74].Width = 120;


                grd_My_Reports.Columns[75].Name = "Exception_UserName";
                grd_My_Reports.Columns[75].HeaderText = "EXCEPTION USER NAME";
                grd_My_Reports.Columns[75].DataPropertyName = "Exception_UserName";
                grd_My_Reports.Columns[75].Width = 100;


                grd_My_Reports.Columns[76].Name = "Exception_User_Emp_Code";
                grd_My_Reports.Columns[76].HeaderText = "EXCEPTION USER EMP CODE";
                grd_My_Reports.Columns[76].DataPropertyName = "Exception_User_Emp_Code";
                grd_My_Reports.Columns[76].Width = 100;

                grd_My_Reports.Columns[77].Name = "Exception_User_Job_Role";
                grd_My_Reports.Columns[77].HeaderText = "EXCEPTION USER JOB ROLE";
                grd_My_Reports.Columns[77].DataPropertyName = "Exception_User_Job_Role";
                grd_My_Reports.Columns[77].Width = 100;

                grd_My_Reports.Columns[78].Name = "Exception_User_Shift";
                grd_My_Reports.Columns[78].HeaderText = "EXCEPTION USER SHIFT";
                grd_My_Reports.Columns[78].DataPropertyName = "Exception_User_Shift";
                grd_My_Reports.Columns[78].Width = 100;

                grd_My_Reports.Columns[79].Name = "EXception_User_Reporting_To_1";
                grd_My_Reports.Columns[79].HeaderText = "EXCEPTION USER REPORTING TO 1";
                grd_My_Reports.Columns[79].DataPropertyName = "EXception_User_Reporting_To_1";
                grd_My_Reports.Columns[79].Width = 140;

                grd_My_Reports.Columns[80].Name = "EXception_User_Reporting_To_2";
                grd_My_Reports.Columns[80].HeaderText = "EXCEPTION USER REPORTING TO 2";
                grd_My_Reports.Columns[80].DataPropertyName = "EXception_User_Reporting_To_2";
                grd_My_Reports.Columns[80].Width = 140;


                //
                grd_My_Reports.Columns[81].Name = "Final_Qc_Progress";
                grd_My_Reports.Columns[81].HeaderText = "FINAL_QC PROGRESS";
                grd_My_Reports.Columns[81].DataPropertyName = "Final_Qc_Progress";
                grd_My_Reports.Columns[81].Width = 100;

                grd_My_Reports.Columns[82].Name = "Final_Qc_UserName";
                grd_My_Reports.Columns[82].HeaderText = "FINAL_QC USER NAME";
                grd_My_Reports.Columns[82].DataPropertyName = "Final_Qc_UserName";
                grd_My_Reports.Columns[82].Width = 100;

                grd_My_Reports.Columns[83].Name = "FINAL_QC_EMP_CODE";
                grd_My_Reports.Columns[83].HeaderText = "FINAL_QC EMP_CODE";
                grd_My_Reports.Columns[83].DataPropertyName = "FINAL_QC_EMP_CODE";
                grd_My_Reports.Columns[83].Width = 100;

                grd_My_Reports.Columns[84].Name = "FINAL_QC_JOB_ROLE";
                grd_My_Reports.Columns[84].HeaderText = "FINAL_QC JOB_ROLE";
                grd_My_Reports.Columns[84].DataPropertyName = "FINAL_QC_JOB_ROLE";
                grd_My_Reports.Columns[84].Width = 100;

                grd_My_Reports.Columns[85].Name = "FINAL_QC_USER_SHIFT";
                grd_My_Reports.Columns[85].HeaderText = "FINAL_QC USER_SHIFT";
                grd_My_Reports.Columns[85].DataPropertyName = "FINAL_QC_USER_SHIFT";
                grd_My_Reports.Columns[85].Width = 100;


                grd_My_Reports.Columns[86].Name = "FINAL_QC_USER_REPORTING_TO_1";
                grd_My_Reports.Columns[86].HeaderText = "FINAL_QC USER REPORTING TO 1";
                grd_My_Reports.Columns[86].DataPropertyName = "FINAL_QC_USER_REPORTING_TO_1";
                grd_My_Reports.Columns[86].Width = 140;


                grd_My_Reports.Columns[87].Name = "FINAL_QC_REPORTING_TO_2";
                grd_My_Reports.Columns[87].HeaderText = "FINAL_QC REPORTING TO 2";
                grd_My_Reports.Columns[87].DataPropertyName = "FINAL_QC_REPORTING_TO_2";
                grd_My_Reports.Columns[87].Width = 140;

                grd_My_Reports.Columns[88].Name = "Final_Qc_Production_Date";
                grd_My_Reports.Columns[88].HeaderText = "FINAL_QC PRODUCTION DATE";
                grd_My_Reports.Columns[88].DataPropertyName = "Final_Qc_Production_Date";
                grd_My_Reports.Columns[88].Width = 100;

                grd_My_Reports.Columns[89].Name = "Final_Qc_Start_Time";
                grd_My_Reports.Columns[89].HeaderText = "FINAL_QC STRAT TIME";
                grd_My_Reports.Columns[89].DataPropertyName = "Final_Qc_Start_Time";
                grd_My_Reports.Columns[89].Width = 100;

                grd_My_Reports.Columns[90].Name = "Final_Qc_End_Time";
                grd_My_Reports.Columns[90].HeaderText = "FINAL_QC END TIME";
                grd_My_Reports.Columns[90].DataPropertyName = "Final_Qc_End_Time";
                grd_My_Reports.Columns[90].Width = 100;

                grd_My_Reports.Columns[91].Name = "TOTAL_FINAL_QC_TIME";
                grd_My_Reports.Columns[91].HeaderText = "TOTAL_FINAL QC_TIME";
                grd_My_Reports.Columns[91].DataPropertyName = "TOTAL FINAL_QC_TIME";
                grd_My_Reports.Columns[91].Width = 100;


                grd_My_Reports.DataSource = dt_Status;

            }
            else
            {
                grd_My_Reports.Visible = false;
                grd_My_Reports.DataSource = null;
                grd_My_Reports.Rows.Clear();

            }
        }

        protected void Productivity_Calculation()
        {
            if (Validation() != false)
            {
                int count_Date = 0;
                DateTime From_date = Convert.ToDateTime(dtp_From_date.Text.ToString());
                DateTime To_date = Convert.ToDateTime(dtp_To_Date.Text.ToString());
                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;
                DateTime fromdate = Convert.ToDateTime(dtp_From_date.Text, usDtfi);
                DateTime Todate = Convert.ToDateTime(dtp_To_Date.Text, usDtfi);
                Hashtable ht_Produ = new Hashtable();
                System.Data.DataTable dt_Produ = new System.Data.DataTable();
                Hashtable ht_Produ1 = new Hashtable();
                System.Data.DataTable dt_Produ1 = new System.Data.DataTable();
                Hashtable ht_Count = new Hashtable();
                System.Data.DataTable dt_Count = new System.Data.DataTable();

                ht_Count.Add("@Trans", "Count_Production_date_All");
                ht_Count.Add("@From_date", fromdate);
                ht_Count.Add("@To_date", Todate);
                dt_Count = dataaccess.ExecuteSP("Sp_Productivity_Report", ht_Count);
                if (dt_Count.Rows.Count > 0)
                {
                    count_Date = dt_Count.Rows.Count;
                }


                ht_Produ.Add("@From_date", fromdate);
                ht_Produ.Add("@To_date", Todate);
                dt_Produ = dataaccess.ExecuteSP("Sp_Productivity_Calc_Table", ht_Produ);
                dt_Produ = dataaccess.ExecuteSP("Sp_Rpt_Prodctivity_Calc", ht_Produ);
                ht_Produ1.Add("@Count_Date", Convert.ToString(count_Date));
                dt_Produ1 = dataaccess.ExecuteSP("Sp_Rpt_Productivity_Pivot", ht_Produ1);
                if (dt_Produ1.Rows.Count > 0)
                {
                    grd_My_Reports.Visible = true;
                    grd_My_Reports.DataSource = dt_Produ1;
                    // Grd_OrderTime.DataBind();


                }
                else
                {
                    grd_My_Reports.Visible = false;
                    grd_My_Reports.DataSource = null;
                    //Grd_OrderTime.EmptyDataText = "No Orders Added";
                    //Grd_OrderTime.DataBind();

                }
            }
        }

        public void Load_Billing_Report()
        {
            if (Validation() != false)
            {
                if (ddl_Client_name.SelectedIndex > 0)
                {
                    Client = int.Parse(ddl_Client_name.SelectedValue.ToString());
                }

                DateTime Fromdate = Convert.ToDateTime(dtp_From_date.Text.ToString());
                DateTime Todate = Convert.ToDateTime(dtp_To_Date.Text.ToString());


                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;


                Hashtable ht_Status = new Hashtable();
                System.Data.DataTable dt_Status = new System.Data.DataTable();

                dt_Status.Rows.Clear();

                if (ddl_Client_name.Text != "ALL" && ddl_Client_name.Text != "")
                {
                    ht_Status.Add("@Trans", "Client");
                }
                else
                {
                    ht_Status.Add("@Trans", "ALL");
                }
                ht_Status.Add("@From_Date", Fromdate.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture));
                ht_Status.Add("@To_Date", Todate.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture));
                ht_Status.Add("@Client_Id", Client);
                ht_Status.Add("@Log_In_Userid", Loged_In_User_Id);
                dt_Status = dataaccess.ExecuteSP("Sp_Billing_Report", ht_Status);

                if (dt_Status.Rows.Count > 0)
                {
                    grd_My_Reports.Visible = true;

                    grd_My_Reports.DataSource = null;
                    grd_My_Reports.AutoGenerateColumns = false;

                    grd_My_Reports.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Ebrima", 7.75F, FontStyle.Bold);
                    grd_My_Reports.ColumnHeadersHeight = 40;

                    grd_My_Reports.ColumnCount = 30;
                    //grd_My_Reports.Rows.Add();
                    grd_My_Reports.Columns[0].Name = "Order_ID";
                    grd_My_Reports.Columns[0].HeaderText = "ORDER ID";
                    grd_My_Reports.Columns[0].DataPropertyName = "Order_ID";
                    grd_My_Reports.Columns[0].Width = 50;
                    grd_My_Reports.Columns[0].Visible = false;

                    //grd_My_Reports.Columns[1].Name = "Order_Number";
                    //grd_My_Reports.Columns[1].HeaderText = "Order_Number";
                    //grd_My_Reports.Columns[1].DataPropertyName = "Client_Order_Number";
                    //grd_My_Reports.Columns[1].Width = 140;
                    //grd_My_Reports.Columns[1].Visible = false;

                    DataGridViewLinkColumn client_order = new DataGridViewLinkColumn();
                    grd_My_Reports.Columns.Add(client_order);
                    client_order.DisplayIndex = 1;
                    client_order.Name = "Order_Number";
                    client_order.HeaderText = "ORDER NUMBER";
                    client_order.DataPropertyName = "Client_Order_Number";
                    client_order.Width = 140;




                    grd_My_Reports.Columns[1].Name = "Ref_number";
                    grd_My_Reports.Columns[1].HeaderText = "REF NUMBER";
                    grd_My_Reports.Columns[1].DataPropertyName = "Client_Order_Ref";
                    grd_My_Reports.Columns[1].Width = 125;

                    grd_My_Reports.Columns[2].Name = "Date";
                    grd_My_Reports.Columns[2].HeaderText = "RECIVED DATE";
                    grd_My_Reports.Columns[2].DataPropertyName = "Received_Date";
                    grd_My_Reports.Columns[2].Width = 195;

                    if (User_Role_Id == "1")
                    {
                        grd_My_Reports.Columns[3].Name = "Client_name";
                        grd_My_Reports.Columns[3].HeaderText = "CLIENT NAME";
                        grd_My_Reports.Columns[3].DataPropertyName = "Client_name";
                        grd_My_Reports.Columns[3].Width = 125;

                        grd_My_Reports.Columns[4].Name = "Sub_client";
                        grd_My_Reports.Columns[4].HeaderText = "SUB PROCESS";
                        grd_My_Reports.Columns[4].DataPropertyName = "Sub_ProcessName";
                        grd_My_Reports.Columns[4].Width = 250;

                    }
                    else
                    {

                        grd_My_Reports.Columns[3].Name = "Client_Number";
                        grd_My_Reports.Columns[3].HeaderText = "CLIENT NAME";
                        grd_My_Reports.Columns[3].DataPropertyName = "Client_Number";
                        grd_My_Reports.Columns[3].Width = 125;

                        grd_My_Reports.Columns[4].Name = "Subprocess_Number";
                        grd_My_Reports.Columns[4].HeaderText = "SUB PROCESS";
                        grd_My_Reports.Columns[4].DataPropertyName = "Subprocess_Number";
                        grd_My_Reports.Columns[4].Width = 250;

                    }

                    grd_My_Reports.Columns[5].Name = "Order_type";
                    grd_My_Reports.Columns[5].HeaderText = "ORDER TYPE";
                    grd_My_Reports.Columns[5].DataPropertyName = "Order_Type";
                    grd_My_Reports.Columns[5].Width = 180;

                    grd_My_Reports.Columns[6].Name = "Borrower_Name";
                    grd_My_Reports.Columns[6].HeaderText = "BORROWER NAME";
                    grd_My_Reports.Columns[6].DataPropertyName = "Borrower_Name";
                    grd_My_Reports.Columns[6].Width = 150;

                    grd_My_Reports.Columns[7].Name = "Address";
                    grd_My_Reports.Columns[7].HeaderText = "BORROWER ADDRESS";
                    grd_My_Reports.Columns[7].DataPropertyName = "Address";
                    grd_My_Reports.Columns[7].Width = 150;

                    grd_My_Reports.Columns[8].Name = "Abbreviation";
                    grd_My_Reports.Columns[8].HeaderText = "STATE";
                    grd_My_Reports.Columns[8].DataPropertyName = "Abbreviation";
                    grd_My_Reports.Columns[8].Width = 120;

                    grd_My_Reports.Columns[9].Name = "County";
                    grd_My_Reports.Columns[9].HeaderText = "COUNTY";
                    grd_My_Reports.Columns[9].DataPropertyName = "County";
                    grd_My_Reports.Columns[9].Width = 120;

                    grd_My_Reports.Columns[10].Name = "Current_Task";
                    grd_My_Reports.Columns[10].HeaderText = "CURRRENT TASK";
                    grd_My_Reports.Columns[10].DataPropertyName = "Current_Task";
                    grd_My_Reports.Columns[10].Width = 100;

                    grd_My_Reports.Columns[11].Name = "Order_Status";
                    grd_My_Reports.Columns[11].HeaderText = "ORDER STATUS";
                    grd_My_Reports.Columns[11].DataPropertyName = "Order_Status";
                    grd_My_Reports.Columns[11].Width = 100;

                    grd_My_Reports.Columns[12].Name = "Completed_Date";
                    grd_My_Reports.Columns[12].HeaderText = "COMPLETED DATE";
                    grd_My_Reports.Columns[12].DataPropertyName = "Completed_Date";
                    grd_My_Reports.Columns[12].Width = 100;

                    grd_My_Reports.Columns[13].Name = "County_type";
                    grd_My_Reports.Columns[13].HeaderText = "COUNTY TYPE";
                    grd_My_Reports.Columns[13].DataPropertyName = "County_Type";
                    grd_My_Reports.Columns[13].Width = 100;

                    grd_My_Reports.Columns[14].Name = "Source";
                    grd_My_Reports.Columns[14].HeaderText = "SOURCE";
                    grd_My_Reports.Columns[14].DataPropertyName = "Source";
                    grd_My_Reports.Columns[14].Width = 100;

                    grd_My_Reports.Columns[15].Name = "Order_Cost";
                    grd_My_Reports.Columns[15].HeaderText = "ORDER COST";
                    grd_My_Reports.Columns[15].DataPropertyName = "Order_Cost";
                    grd_My_Reports.Columns[15].Width = 100;

                    grd_My_Reports.Columns[16].Name = "Search_Cost";
                    grd_My_Reports.Columns[16].HeaderText = "SEARCH COST";
                    grd_My_Reports.Columns[16].DataPropertyName = "Search_Cost";
                    grd_My_Reports.Columns[16].Width = 100;

                    grd_My_Reports.Columns[17].Name = "Copy_Cost";
                    grd_My_Reports.Columns[17].HeaderText = "COPY COST";
                    grd_My_Reports.Columns[17].DataPropertyName = "Copy_Cost";
                    grd_My_Reports.Columns[17].Width = 100;

                    grd_My_Reports.Columns[18].Name = "Abstractor Cost";
                    grd_My_Reports.Columns[18].HeaderText = "ABSTRACTOR COST";
                    grd_My_Reports.Columns[18].DataPropertyName = "Abstractor_Cost";
                    grd_My_Reports.Columns[18].Width = 100;

                    grd_My_Reports.Columns[19].Name = "No_Of_pages";
                    grd_My_Reports.Columns[19].HeaderText = "NO OF PAGES";
                    grd_My_Reports.Columns[19].DataPropertyName = "No_Of_pages";
                    grd_My_Reports.Columns[19].Width = 100;

                    grd_My_Reports.Columns[20].Name = "No_of_Hits";
                    grd_My_Reports.Columns[20].HeaderText = "NO OF HITS";
                    grd_My_Reports.Columns[20].DataPropertyName = "No_of_Hits";
                    grd_My_Reports.Columns[20].Width = 100;

                    grd_My_Reports.Columns[21].Name = "No_Of_Documents";
                    grd_My_Reports.Columns[21].HeaderText = "NO OF DOCUMENTS";
                    grd_My_Reports.Columns[21].DataPropertyName = "No_Of_Documents";
                    grd_My_Reports.Columns[21].Width = 100;

                    grd_My_Reports.Columns[22].Name = "Website_Name";
                    grd_My_Reports.Columns[22].HeaderText = "WEBSITE NAME";
                    grd_My_Reports.Columns[22].DataPropertyName = "Website_Name";
                    grd_My_Reports.Columns[22].Width = 100;

                    grd_My_Reports.Columns[23].Name = "Effectivedate";
                    grd_My_Reports.Columns[23].HeaderText = "EFFECTIVE DATE";
                    grd_My_Reports.Columns[23].DataPropertyName = "Effective_date";
                    grd_My_Reports.Columns[23].Width = 100;

                    grd_My_Reports.Columns[24].Name = "UserName";
                    grd_My_Reports.Columns[24].HeaderText = "USER NAME";
                    grd_My_Reports.Columns[24].DataPropertyName = "User_Name";
                    grd_My_Reports.Columns[24].Width = 100;

                    grd_My_Reports.Columns[25].Name = "DRN_Emp_Code";
                    grd_My_Reports.Columns[25].HeaderText = "EMP CODE";
                    grd_My_Reports.Columns[25].DataPropertyName = "DRN_Emp_Code";
                    grd_My_Reports.Columns[25].Width = 100;

                    grd_My_Reports.Columns[26].Name = "Emp_Job_Role";
                    grd_My_Reports.Columns[26].HeaderText = "JOB ROLE";
                    grd_My_Reports.Columns[26].DataPropertyName = "Emp_Job_Role";
                    grd_My_Reports.Columns[26].Width = 100;

                    grd_My_Reports.Columns[27].Name = "Shift_Type_Name";
                    grd_My_Reports.Columns[27].HeaderText = "SHIFT";
                    grd_My_Reports.Columns[27].DataPropertyName = "Shift_Type_Name";
                    grd_My_Reports.Columns[27].Width = 100;

                    grd_My_Reports.Columns[28].Name = "Reporting_To_1";
                    grd_My_Reports.Columns[28].HeaderText = "REPORTING TO LEVEL 1";
                    grd_My_Reports.Columns[28].DataPropertyName = "Reporting_To_1";
                    grd_My_Reports.Columns[28].Width = 100;

                    grd_My_Reports.Columns[29].Name = "Reporting_To_2";
                    grd_My_Reports.Columns[29].HeaderText = "REPORTING TO LEVEL 2";
                    grd_My_Reports.Columns[29].DataPropertyName = "Reporting_To_2";
                    grd_My_Reports.Columns[29].Width = 100;


                    grd_My_Reports.Visible = true;
                    grd_My_Reports.DataSource = dt_Status;



                }
                else
                {
                    grd_My_Reports.Visible = false;
                    grd_My_Reports.DataSource = null;

                }

            }
        }

        public void Load_Order_Document_List_Report()
        {

            if (Validation() != false)
            {
                DateTime Fromdate = Convert.ToDateTime(dtp_From_date.Text.ToString());
                DateTime Todate = Convert.ToDateTime(dtp_To_Date.Text.ToString());


                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;


                Hashtable ht_Status = new Hashtable();
                System.Data.DataTable dt_Status = new System.Data.DataTable();

                dt_Status.Rows.Clear();
                string From_Date = Fromdate.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture);
                string To_Date = Todate.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture);
                if (ddl_Client_name.Text == "ALL" || ddl_Client_name.Text == "")
                {
                    ht_Status.Add("@Trans", "SELECT");
                }
                else
                {
                    ht_Status.Add("@Trans", "SELECT_CLIENT_WISE");
                    ht_Status.Add("@Client_id", int.Parse(ddl_Client_name.SelectedValue.ToString()));
                }
                ht_Status.Add("@From_date", From_Date);
                ht_Status.Add("@To_Date", To_Date);
                ht_Status.Add("@Work_Type_Id", 1);
                ht_Status.Add("@Log_In_Userid", Loged_In_User_Id);

                dt_Status = dataaccess.ExecuteSP("Sp_rpt_Document_List", ht_Status);
                dtuserexport = dt_Status;
                if (dt_Status.Rows.Count > 0)
                {
                    grd_My_Reports.Visible = true;
                    grd_My_Reports.Rows.Clear();
                    grd_My_Reports.Columns.Clear();
                    grd_My_Reports.DataSource = null;
                    grd_My_Reports.AutoGenerateColumns = true;
                    grd_My_Reports.Refresh();

                    grd_My_Reports.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Ebrima", 7.75F, FontStyle.Bold);
                    grd_My_Reports.ColumnHeadersHeight = 40;
                    grd_My_Reports.ColumnCount = 22;
                    //grd_My_Reports.Rows.Add();
                    grd_My_Reports.Columns[0].Name = "Order_ID";
                    grd_My_Reports.Columns[0].HeaderText = "ORDER ID";
                    grd_My_Reports.Columns[0].DataPropertyName = "Order_ID";
                    grd_My_Reports.Columns[0].Width = 50;
                    grd_My_Reports.Columns[0].Visible = false;

                    grd_My_Reports.Columns[1].Name = "Order_Number";
                    grd_My_Reports.Columns[1].HeaderText = "ORDER NUMBER";
                    grd_My_Reports.Columns[1].DataPropertyName = "Client_Order_Number";
                    grd_My_Reports.Columns[1].Width = 140;


                    //grd_My_Reports.Columns[1].Visible = false;

                    //DataGridViewLinkColumn client_order = new DataGridViewLinkColumn();
                    //grd_My_Reports.Columns.Add(client_order);
                    //client_order.DisplayIndex = 1;
                    //client_order.Name = "Order_Number";
                    //client_order.HeaderText = "Order Number";
                    //client_order.DataPropertyName = "Client_Order_Number";
                    //client_order.Width = 140;


                    grd_My_Reports.Columns[2].Name = "Ref_number";
                    grd_My_Reports.Columns[2].HeaderText = "REF NUMBER";
                    grd_My_Reports.Columns[2].DataPropertyName = "Client_Order_Ref";
                    grd_My_Reports.Columns[2].Width = 125;

                    grd_My_Reports.Columns[3].Name = "Date";
                    grd_My_Reports.Columns[3].HeaderText = "RECIVED DATE";
                    grd_My_Reports.Columns[3].DataPropertyName = "Recived_Date";
                    grd_My_Reports.Columns[3].Width = 120;

                    if (User_Role_Id == "1")
                    {

                        grd_My_Reports.Columns[4].Name = "Client_name";
                        grd_My_Reports.Columns[4].HeaderText = "CLIENT NAME";
                        grd_My_Reports.Columns[4].DataPropertyName = "Client_Name";
                        grd_My_Reports.Columns[4].Width = 130;

                        grd_My_Reports.Columns[5].Name = "Sub_client";
                        grd_My_Reports.Columns[5].HeaderText = "SUB PROCESS";
                        grd_My_Reports.Columns[5].DataPropertyName = "Sub_ProcessName";
                        grd_My_Reports.Columns[5].Width = 130;

                    }
                    else
                    {
                        grd_My_Reports.Columns[4].Name = "Client_Number";
                        grd_My_Reports.Columns[4].HeaderText = "CLIENT NAME";
                        grd_My_Reports.Columns[4].DataPropertyName = "Client_Number";
                        grd_My_Reports.Columns[4].Width = 130;

                        grd_My_Reports.Columns[5].Name = "Subprocess_Number";
                        grd_My_Reports.Columns[5].HeaderText = "SUB PROCESS";
                        grd_My_Reports.Columns[5].DataPropertyName = "Subprocess_Number";
                        grd_My_Reports.Columns[5].Width = 130;

                    }

                    grd_My_Reports.Columns[6].Name = "Order_type";
                    grd_My_Reports.Columns[6].HeaderText = "ORDER TYPE";
                    grd_My_Reports.Columns[6].DataPropertyName = "Order_Type";
                    grd_My_Reports.Columns[6].Width = 130;

                    grd_My_Reports.Columns[7].Name = "Borrower_Name";
                    grd_My_Reports.Columns[7].HeaderText = "BORROWER NAME";
                    grd_My_Reports.Columns[7].DataPropertyName = "Borrower_Name";
                    grd_My_Reports.Columns[7].Width = 130;

                    grd_My_Reports.Columns[8].Name = "Address";
                    grd_My_Reports.Columns[8].HeaderText = "BORROWER ADDRESS";
                    grd_My_Reports.Columns[8].DataPropertyName = "Address";
                    grd_My_Reports.Columns[8].Width = 150;

                    grd_My_Reports.Columns[9].Name = "Abbreviation";
                    grd_My_Reports.Columns[9].HeaderText = "ABBREVIATION";
                    grd_My_Reports.Columns[9].DataPropertyName = "Abbreviation";
                    grd_My_Reports.Columns[9].Width = 100;

                    grd_My_Reports.Columns[10].Name = "County";
                    grd_My_Reports.Columns[10].HeaderText = "COUNTY";
                    grd_My_Reports.Columns[10].DataPropertyName = "County";
                    grd_My_Reports.Columns[10].Width = 100;

                    grd_My_Reports.Columns[11].Name = "City";
                    grd_My_Reports.Columns[11].HeaderText = "CITY";
                    grd_My_Reports.Columns[11].DataPropertyName = "City";
                    grd_My_Reports.Columns[11].Width = 100;

                    grd_My_Reports.Columns[12].Name = "Order_Status";
                    grd_My_Reports.Columns[12].HeaderText = "ORDER STATUS";
                    grd_My_Reports.Columns[12].DataPropertyName = "Order_Status";
                    grd_My_Reports.Columns[12].Width = 100;

                    grd_My_Reports.Columns[13].Name = "Completed_Date";
                    grd_My_Reports.Columns[13].HeaderText = "COMPLETED DATE";
                    grd_My_Reports.Columns[13].DataPropertyName = "Completed_Date";
                    grd_My_Reports.Columns[13].Width = 120;

                    grd_My_Reports.Columns[14].Name = "User Name";
                    grd_My_Reports.Columns[14].HeaderText = "USER NAME";
                    grd_My_Reports.Columns[14].DataPropertyName = "User_Name";
                    grd_My_Reports.Columns[14].Width = 120;

                    grd_My_Reports.Columns[15].Name = "empcode";
                    grd_My_Reports.Columns[15].HeaderText = "EMP CODE";
                    grd_My_Reports.Columns[15].DataPropertyName = "DRN_Emp_Code";
                    grd_My_Reports.Columns[15].Width = 100;

                    grd_My_Reports.Columns[16].Name = "jobrole";
                    grd_My_Reports.Columns[16].HeaderText = "JOB ROLE";
                    grd_My_Reports.Columns[16].DataPropertyName = "Emp_Job_Role";
                    grd_My_Reports.Columns[16].Width = 120;

                    grd_My_Reports.Columns[17].Name = "shift";
                    grd_My_Reports.Columns[17].HeaderText = "SHIFT";
                    grd_My_Reports.Columns[17].DataPropertyName = "Shift_Type_Name";
                    grd_My_Reports.Columns[17].Width = 100;


                    grd_My_Reports.Columns[18].Name = "ReportingTo1";
                    grd_My_Reports.Columns[18].HeaderText = "REPORTING TO LEVEL 1";
                    grd_My_Reports.Columns[18].DataPropertyName = "Reporting_To_1";
                    grd_My_Reports.Columns[18].Width = 120;

                    grd_My_Reports.Columns[19].Name = "ReportingTo2";
                    grd_My_Reports.Columns[19].HeaderText = "REPORTING TO LEVEL 2";
                    grd_My_Reports.Columns[19].DataPropertyName = "Reporting_To_2";
                    grd_My_Reports.Columns[19].Width = 120;

                    grd_My_Reports.Columns[20].Name = "Production Date";
                    grd_My_Reports.Columns[20].HeaderText = "PRODUCTION DATE";
                    grd_My_Reports.Columns[20].DataPropertyName = "Order_Production_Date";
                    grd_My_Reports.Columns[20].Width = 120;

                    grd_My_Reports.Columns[21].Name = "Document List Name";
                    grd_My_Reports.Columns[21].HeaderText = "DOCUMENT LIST NAME";
                    grd_My_Reports.Columns[21].DataPropertyName = "Document_List_Name";
                    grd_My_Reports.Columns[21].Width = 120;

                    grd_My_Reports.Visible = true;
                    grd_My_Reports.DataSource = dt_Status;



                }
                else
                {
                    grd_My_Reports.Visible = false;
                    grd_My_Reports.DataSource = null;

                }

            }
        }

        public void Load_Order_Document_List_Rework_Report()
        {
            //kk
            if (Validation_Myreport() != false)
            {
                DateTime Fromdate = Convert.ToDateTime(dtp_MyFromdate.Text.ToString());
                DateTime Todate = Convert.ToDateTime(dtp_MyTodate.Text.ToString());


                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;


                Hashtable ht_Status = new Hashtable();
                System.Data.DataTable dt_Status = new System.Data.DataTable();

                dt_Status.Rows.Clear();
                string From_Date = Fromdate.ToString("MM/dd/yyyy");
                string To_Date = Todate.ToString("MM/dd/yyyy");
                if (ddl_MyClient.Text == "ALL")
                {
                    ht_Status.Add("@Trans", "SELECT");
                }
                else
                {
                    ht_Status.Add("@Trans", "SELECT_CLIENT_WISE");
                    ht_Status.Add("@Client_id", int.Parse(ddl_MyClient.SelectedValue.ToString()));
                }
                ht_Status.Add("@From_date", From_Date);
                ht_Status.Add("@To_Date", To_Date);
                ht_Status.Add("@Work_Type_Id", 2);
                ht_Status.Add("@Log_In_Userid", Loged_In_User_Id);

                dt_Status = dataaccess.ExecuteSP("Sp_Rework_rpt_Document_List", ht_Status);
                dtuserexport = dt_Status;
                if (dt_Status.Rows.Count > 0)
                {
                    grd_Rework_MyReport.Visible = true;
                    grd_Rework_MyReport.Rows.Clear();
                    grd_Rework_MyReport.Columns.Clear();
                    grd_Rework_MyReport.DataSource = null;
                    grd_Rework_MyReport.AutoGenerateColumns = true;
                    grd_Rework_MyReport.Refresh();

                    grd_Rework_MyReport.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Ebrima", 7.75F, FontStyle.Bold);
                    grd_Rework_MyReport.ColumnHeadersHeight = 40;

                    grd_Rework_MyReport.ColumnCount = 20;
                    //grd_My_Reports.Rows.Add();
                    grd_Rework_MyReport.Columns[0].Name = "Order_ID";
                    grd_Rework_MyReport.Columns[0].HeaderText = "ORDER ID";
                    grd_Rework_MyReport.Columns[0].DataPropertyName = "Order_ID";
                    grd_Rework_MyReport.Columns[0].Width = 50;
                    grd_Rework_MyReport.Columns[0].Visible = false;

                    grd_Rework_MyReport.Columns[1].Name = "Order_Number";
                    grd_Rework_MyReport.Columns[1].HeaderText = "ORDER NUMBER";
                    grd_Rework_MyReport.Columns[1].DataPropertyName = "Client_Order_Number";
                    grd_Rework_MyReport.Columns[1].Width = 140;
                    //grd_My_Reports.Columns[1].Visible = false;

                    //DataGridViewLinkColumn client_order = new DataGridViewLinkColumn();
                    //grd_My_Reports.Columns.Add(client_order);
                    //client_order.DisplayIndex = 1;
                    //client_order.Name = "Order_Number";
                    //client_order.HeaderText = "Order Number";
                    //client_order.DataPropertyName = "Client_Order_Number";
                    //client_order.Width = 140;


                    grd_Rework_MyReport.Columns[2].Name = "Ref_number";
                    grd_Rework_MyReport.Columns[2].HeaderText = "REF NUMBER";
                    grd_Rework_MyReport.Columns[2].DataPropertyName = "Client_Order_Ref";
                    grd_Rework_MyReport.Columns[2].Width = 125;

                    grd_Rework_MyReport.Columns[3].Name = "Date";
                    grd_Rework_MyReport.Columns[3].HeaderText = "RECIVED DATE";
                    grd_Rework_MyReport.Columns[3].DataPropertyName = "Recived_Date";
                    grd_Rework_MyReport.Columns[3].Width = 195;

                    if (User_Role_Id == "1")
                    {
                        grd_Rework_MyReport.Columns[4].Name = "Client_name";
                        grd_Rework_MyReport.Columns[4].HeaderText = "CLIENT NAME";
                        grd_Rework_MyReport.Columns[4].DataPropertyName = "Client_Name";
                        grd_Rework_MyReport.Columns[4].Width = 125;

                        grd_Rework_MyReport.Columns[5].Name = "Sub_client";
                        grd_Rework_MyReport.Columns[5].HeaderText = "SUB PROCESS";
                        grd_Rework_MyReport.Columns[5].DataPropertyName = "Sub_ProcessName";
                        grd_Rework_MyReport.Columns[5].Width = 250;

                    }
                    else
                    {

                        grd_Rework_MyReport.Columns[4].Name = "Client_Number";
                        grd_Rework_MyReport.Columns[4].HeaderText = "CLIENT NAME";
                        grd_Rework_MyReport.Columns[4].DataPropertyName = "Client_Number";
                        grd_Rework_MyReport.Columns[4].Width = 125;

                        grd_Rework_MyReport.Columns[5].Name = "Subprocess_Number";
                        grd_Rework_MyReport.Columns[5].HeaderText = "SUB PROCESS";
                        grd_Rework_MyReport.Columns[5].DataPropertyName = "Subprocess_Number";
                        grd_Rework_MyReport.Columns[5].Width = 250;
                    }



                    grd_Rework_MyReport.Columns[6].Name = "Order_type";
                    grd_Rework_MyReport.Columns[6].HeaderText = "ORDER TYPE";
                    grd_Rework_MyReport.Columns[6].DataPropertyName = "Order_Type";
                    grd_Rework_MyReport.Columns[6].Width = 180;

                    grd_Rework_MyReport.Columns[7].Name = "Borrower_Name";
                    grd_Rework_MyReport.Columns[7].HeaderText = "BORROWER NAME";
                    grd_Rework_MyReport.Columns[7].DataPropertyName = "Borrower_Name";
                    grd_Rework_MyReport.Columns[7].Width = 150;

                    grd_Rework_MyReport.Columns[8].Name = "Address";
                    grd_Rework_MyReport.Columns[8].HeaderText = "BORROWER ADDRESS";
                    grd_Rework_MyReport.Columns[8].DataPropertyName = "Address";
                    grd_Rework_MyReport.Columns[8].Width = 150;

                    grd_Rework_MyReport.Columns[9].Name = "Abbreviation";
                    grd_Rework_MyReport.Columns[9].HeaderText = "ABBREVATION";
                    grd_Rework_MyReport.Columns[9].DataPropertyName = "Abbreviation";
                    grd_Rework_MyReport.Columns[9].Width = 120;

                    grd_Rework_MyReport.Columns[10].Name = "County";
                    grd_Rework_MyReport.Columns[10].HeaderText = "COUNTY";
                    grd_Rework_MyReport.Columns[10].DataPropertyName = "County";
                    grd_Rework_MyReport.Columns[10].Width = 120;

                    //grd_Rework_MyReport.Columns[11].Name = "City";
                    //grd_Rework_MyReport.Columns[11].HeaderText = "City";
                    //grd_Rework_MyReport.Columns[11].DataPropertyName = "City";
                    //grd_Rework_MyReport.Columns[11].Width = 100;

                    grd_Rework_MyReport.Columns[11].Name = "Order_Status";
                    grd_Rework_MyReport.Columns[11].HeaderText = "ORDER STATUS";
                    grd_Rework_MyReport.Columns[11].DataPropertyName = "Order_Status";
                    grd_Rework_MyReport.Columns[11].Width = 100;

                    //grd_Rework_MyReport.Columns[13].Name = "Completed_Date";
                    //grd_Rework_MyReport.Columns[13].HeaderText = "Completed Date";
                    //grd_Rework_MyReport.Columns[13].DataPropertyName = "Completed_Date";
                    //grd_Rework_MyReport.Columns[13].Width = 100;

                    grd_Rework_MyReport.Columns[12].Name = "username";
                    grd_Rework_MyReport.Columns[12].HeaderText = "USER NAME";
                    grd_Rework_MyReport.Columns[12].DataPropertyName = "User_Name";
                    grd_Rework_MyReport.Columns[12].Width = 100;

                    grd_Rework_MyReport.Columns[13].Name = "drnempcode";
                    grd_Rework_MyReport.Columns[13].HeaderText = "EMP CODE";
                    grd_Rework_MyReport.Columns[13].DataPropertyName = "DRN_Emp_Code";
                    grd_Rework_MyReport.Columns[13].Width = 100;

                    grd_Rework_MyReport.Columns[14].Name = "empjobrole";
                    grd_Rework_MyReport.Columns[14].HeaderText = "JOB ROLE";
                    grd_Rework_MyReport.Columns[14].DataPropertyName = "Emp_Job_Role";
                    grd_Rework_MyReport.Columns[14].Width = 100;

                    grd_Rework_MyReport.Columns[15].Name = "Sshifttypename";
                    grd_Rework_MyReport.Columns[15].HeaderText = "SHIFT";
                    grd_Rework_MyReport.Columns[15].DataPropertyName = "Shift_Type_Name";
                    grd_Rework_MyReport.Columns[15].Width = 100;

                    grd_Rework_MyReport.Columns[16].Name = "reportingto1";
                    grd_Rework_MyReport.Columns[16].HeaderText = "REPORTING TO 1";
                    grd_Rework_MyReport.Columns[16].DataPropertyName = "Reporting_To_1";
                    grd_Rework_MyReport.Columns[16].Width = 100;

                    grd_Rework_MyReport.Columns[17].Name = "reportingto2";
                    grd_Rework_MyReport.Columns[17].HeaderText = "REPORTING TO 2";
                    grd_Rework_MyReport.Columns[17].DataPropertyName = "Reporting_To_2";
                    grd_Rework_MyReport.Columns[17].Width = 100;


                    grd_Rework_MyReport.Columns[18].Name = "Production Date";
                    grd_Rework_MyReport.Columns[18].HeaderText = "PRODUCTION DATE";
                    grd_Rework_MyReport.Columns[18].DataPropertyName = "Order_Production_Date";
                    grd_Rework_MyReport.Columns[18].Width = 100;

                    grd_Rework_MyReport.Columns[19].Name = "Document List Name";
                    grd_Rework_MyReport.Columns[19].HeaderText = "DOC LIST NAME";
                    grd_Rework_MyReport.Columns[19].DataPropertyName = "Document_List_Name";
                    grd_Rework_MyReport.Columns[19].Width = 100;

                    grd_Rework_MyReport.Visible = true;
                    grd_Rework_MyReport.DataSource = dt_Status;



                }
                else
                {
                    lbl_Record_notfound.Visible = true;
                    grd_Rework_MyReport.Visible = false;
                    grd_Rework_MyReport.DataSource = null;

                }

            }
        }

        public void Load_Order_Document_List_Rework_All_Report()
        {
            //k1
            if (Validation_All_Rework_report() != false)
            {
                DateTime Fromdate = Convert.ToDateTime(dtp_Rework_Fromdate.Text.ToString());
                DateTime Todate = Convert.ToDateTime(dtp_Rework_Todate.Text.ToString());


                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;


                Hashtable ht_Status = new Hashtable();
                System.Data.DataTable dt_Status = new System.Data.DataTable();

                dt_Status.Rows.Clear();
                string From_Date = Fromdate.ToString("MM/dd/yyyy");
                string To_Date = Todate.ToString("MM/dd/yyyy");
                if (ddl_Rework_client.Text == "ALL")
                {
                    ht_Status.Add("@Trans", "SELECT_All");
                }
                else
                {
                    ht_Status.Add("@Trans", "SELECT_CLIENT_WISE");
                    ht_Status.Add("@Client_id", int.Parse(ddl_Rework_client.SelectedValue.ToString()));
                }
                ht_Status.Add("@From_date", From_Date);
                ht_Status.Add("@To_Date", To_Date);
                ht_Status.Add("@Work_Type_Id", 2);
                // ht_Status.Add("@Log_In_Userid", Loged_In_User_Id);

                dt_Status = dataaccess.ExecuteSP("Sp_Rework_rpt_Document_List", ht_Status);
                dtuserexport = dt_Status;
                if (dt_Status.Rows.Count > 0)
                {
                    grd_Rework_Reports.Visible = true;

                    grd_Rework_Reports.Columns.Clear();
                    grd_Rework_Reports.DataSource = null;
                    grd_Rework_Reports.AutoGenerateColumns = true;
                    grd_Rework_Reports.Refresh();


                    grd_Rework_Reports.ColumnCount = 19;
                    grd_Rework_Reports.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Ebrima", 7.75F, FontStyle.Bold);
                    grd_Rework_Reports.ColumnHeadersHeight = 40;


                    //grd_My_Reports.Rows.Add();
                    grd_Rework_Reports.Columns[0].Name = "Order_ID";
                    grd_Rework_Reports.Columns[0].HeaderText = "ORDER ID";
                    grd_Rework_Reports.Columns[0].DataPropertyName = "Order_ID";
                    grd_Rework_Reports.Columns[0].Width = 50;
                    grd_Rework_Reports.Columns[0].Visible = false;

                    grd_Rework_Reports.Columns[1].Name = "Order_Number";
                    grd_Rework_Reports.Columns[1].HeaderText = "ORDER NUMBER";
                    grd_Rework_Reports.Columns[1].DataPropertyName = "Client_Order_Number";
                    grd_Rework_Reports.Columns[1].Width = 140;
                    //grd_My_Reports.Columns[1].Visible = false;

                    //DataGridViewLinkColumn client_order = new DataGridViewLinkColumn();
                    //grd_My_Reports.Columns.Add(client_order);
                    //client_order.DisplayIndex = 1;
                    //client_order.Name = "Order_Number";
                    //client_order.HeaderText = "Order Number";
                    //client_order.DataPropertyName = "Client_Order_Number";
                    //client_order.Width = 140;


                    grd_Rework_Reports.Columns[2].Name = "Ref_number";
                    grd_Rework_Reports.Columns[2].HeaderText = "REF NUMBER";
                    grd_Rework_Reports.Columns[2].DataPropertyName = "Client_Order_Ref";
                    grd_Rework_Reports.Columns[2].Width = 125;

                    grd_Rework_Reports.Columns[3].Name = "Date";
                    grd_Rework_Reports.Columns[3].HeaderText = "RECIVED DATE";
                    grd_Rework_Reports.Columns[3].DataPropertyName = "Recived_Date";
                    grd_Rework_Reports.Columns[3].Width = 195;

                    if (User_Role_Id == "1")
                    {
                        grd_Rework_Reports.Columns[4].Name = "Client_name";
                        grd_Rework_Reports.Columns[4].HeaderText = "CLIENT NAME";
                        grd_Rework_Reports.Columns[4].DataPropertyName = "Client_Name";
                        grd_Rework_Reports.Columns[4].Width = 125;

                        grd_Rework_Reports.Columns[5].Name = "Sub_client";
                        grd_Rework_Reports.Columns[5].HeaderText = "SUB PROCESS";
                        grd_Rework_Reports.Columns[5].DataPropertyName = "Sub_ProcessName";
                        grd_Rework_Reports.Columns[5].Width = 250;
                    }
                    else
                    {
                        grd_Rework_Reports.Columns[4].Name = "Client_Number";
                        grd_Rework_Reports.Columns[4].HeaderText = "CLIENT NAME";
                        grd_Rework_Reports.Columns[4].DataPropertyName = "Client_Number";
                        grd_Rework_Reports.Columns[4].Width = 125;

                        grd_Rework_Reports.Columns[5].Name = "Subprocess_Number";
                        grd_Rework_Reports.Columns[5].HeaderText = "SUB PROCESS";
                        grd_Rework_Reports.Columns[5].DataPropertyName = "Subprocess_Number";
                        grd_Rework_Reports.Columns[5].Width = 250;
                    }


                    grd_Rework_Reports.Columns[6].Name = "Order_type";
                    grd_Rework_Reports.Columns[6].HeaderText = "ORDER TYPE";
                    grd_Rework_Reports.Columns[6].DataPropertyName = "Order_Type";
                    grd_Rework_Reports.Columns[6].Width = 180;

                    grd_Rework_Reports.Columns[7].Name = "Borrower_Name";
                    grd_Rework_Reports.Columns[7].HeaderText = "BORROWER NAME";
                    grd_Rework_Reports.Columns[7].DataPropertyName = "Borrower_Name";
                    grd_Rework_Reports.Columns[7].Width = 150;

                    grd_Rework_Reports.Columns[8].Name = "Address";
                    grd_Rework_Reports.Columns[8].HeaderText = "BORROWER ADDRESS";
                    grd_Rework_Reports.Columns[8].DataPropertyName = "Address";
                    grd_Rework_Reports.Columns[8].Width = 150;

                    grd_Rework_Reports.Columns[9].Name = "Abbreviation";
                    grd_Rework_Reports.Columns[9].HeaderText = "ABBREVATION";
                    grd_Rework_Reports.Columns[9].DataPropertyName = "Abbreviation";
                    grd_Rework_Reports.Columns[9].Width = 120;

                    grd_Rework_Reports.Columns[10].Name = "County";
                    grd_Rework_Reports.Columns[10].HeaderText = "COUNTY";
                    grd_Rework_Reports.Columns[10].DataPropertyName = "County";
                    grd_Rework_Reports.Columns[10].Width = 120;

                    //grd_Rework_Reports.Columns[11].Name = "City";
                    //grd_Rework_Reports.Columns[11].HeaderText = "City";
                    //grd_Rework_Reports.Columns[11].DataPropertyName = "City";
                    //grd_Rework_Reports.Columns[11].Width = 100;

                    grd_Rework_Reports.Columns[11].Name = "Order_Status";
                    grd_Rework_Reports.Columns[11].HeaderText = "ORDER STATUS";
                    grd_Rework_Reports.Columns[11].DataPropertyName = "Order_Status";
                    grd_Rework_Reports.Columns[11].Width = 100;

                    //grd_Rework_Reports.Columns[13].Name = "Completed_Date";
                    //grd_Rework_Reports.Columns[13].HeaderText = "Completed Date";
                    //grd_Rework_Reports.Columns[13].DataPropertyName = "Completed_Date";
                    //grd_Rework_Reports.Columns[13].Width = 100;

                    grd_Rework_Reports.Columns[12].Name = "User Name";
                    grd_Rework_Reports.Columns[12].HeaderText = "USER NAME";
                    grd_Rework_Reports.Columns[12].DataPropertyName = "User_Name";
                    grd_Rework_Reports.Columns[12].Width = 100;


                    grd_Rework_Reports.Columns[13].Name = "empcode";
                    grd_Rework_Reports.Columns[13].HeaderText = "EMP CODE";
                    grd_Rework_Reports.Columns[13].DataPropertyName = "DRN_EMP_CODE";
                    grd_Rework_Reports.Columns[13].Width = 100;

                    grd_Rework_Reports.Columns[14].Name = "jobrole";
                    grd_Rework_Reports.Columns[14].HeaderText = "JOB ROLE";
                    grd_Rework_Reports.Columns[14].DataPropertyName = "Emp_Job_Role";
                    grd_Rework_Reports.Columns[14].Width = 100;

                    grd_Rework_Reports.Columns[15].Name = "shift";
                    grd_Rework_Reports.Columns[15].HeaderText = "SHIFT";
                    grd_Rework_Reports.Columns[15].DataPropertyName = "Shift_Type_Name";
                    grd_Rework_Reports.Columns[15].Width = 100;

                    grd_Rework_Reports.Columns[16].Name = "reporting_to1";
                    grd_Rework_Reports.Columns[16].HeaderText = "REPORTING TO 1";
                    grd_Rework_Reports.Columns[16].DataPropertyName = "Reporting_To_1";
                    grd_Rework_Reports.Columns[16].Width = 100;

                    grd_Rework_Reports.Columns[17].Name = "reportingto2";
                    grd_Rework_Reports.Columns[17].HeaderText = "REPORTING To 2";
                    grd_Rework_Reports.Columns[17].DataPropertyName = "Reporting_To_2";
                    grd_Rework_Reports.Columns[17].Width = 100;

                    grd_Rework_Reports.Columns[18].Name = "Production Date";
                    grd_Rework_Reports.Columns[18].HeaderText = "PRODUCTION DATE";
                    grd_Rework_Reports.Columns[18].DataPropertyName = "Order_Production_Date";
                    grd_Rework_Reports.Columns[18].Width = 100;

                    //grd_Rework_Reports.Columns[16].Name = "Document List Name";
                    //grd_Rework_Reports.Columns[16].HeaderText = "Document List Name";
                    //grd_Rework_Reports.Columns[16].DataPropertyName = "Document_List_Name";
                    //grd_Rework_Reports.Columns[16].Width = 100;

                    grd_Rework_Reports.Visible = true;
                    grd_Rework_Reports.DataSource = dt_Status;



                }
                else
                {
                    grd_Rework_Reports.Visible = false;
                    grd_Rework_Reports.DataSource = null;

                }

            }
        }

        public void Load_Order_Document_List_Superqc_All_Report()
        {
            if (Validation_All_Superqc_report() != false)
            {
                DateTime Fromdate = Convert.ToDateTime(dtp_All_SuperqcFromdate.Text.ToString());
                DateTime Todate = Convert.ToDateTime(dtp_All_SuperqcTodate.Text.ToString());


                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;


                Hashtable ht_Status = new Hashtable();
                System.Data.DataTable dt_Status = new System.Data.DataTable();

                dt_Status.Rows.Clear();
                string From_Date = Fromdate.ToString("MM/dd/yyyy");
                string To_Date = Todate.ToString("MM/dd/yyyy");
                if (ddl_Superqc_client.Text == "ALL")
                {
                    ht_Status.Add("@Trans", "SELECT_All");
                }
                else
                {
                    ht_Status.Add("@Trans", "SELECT_CLIENT_WISE");
                    ht_Status.Add("@Client_id", int.Parse(ddl_Superqc_client.SelectedValue.ToString()));
                }
                ht_Status.Add("@From_date", From_Date);
                ht_Status.Add("@To_Date", To_Date);
                ht_Status.Add("@Work_Type_Id", 3);
                // ht_Status.Add("@Log_In_Userid", Loged_In_User_Id);

                dt_Status = dataaccess.ExecuteSP("Sp_Superqc_rpt_Document_List", ht_Status);
                dtuserexport = dt_Status;
                if (dt_Status.Rows.Count > 0)
                {
                    grd_All_SuperQc_Report.Visible = true;

                    grd_All_SuperQc_Report.Columns.Clear();
                    grd_All_SuperQc_Report.DataSource = null;
                    grd_All_SuperQc_Report.AutoGenerateColumns = true;
                    grd_All_SuperQc_Report.Refresh();


                    grd_All_SuperQc_Report.ColumnCount = 21;

                    grd_All_SuperQc_Report.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Ebrima", 7.75F, FontStyle.Bold);
                    grd_All_SuperQc_Report.ColumnHeadersHeight = 40;

                    //grd_My_Reports.Rows.Add();
                    grd_All_SuperQc_Report.Columns[0].Name = "Order_ID";
                    grd_All_SuperQc_Report.Columns[0].HeaderText = "Order_ID";
                    grd_All_SuperQc_Report.Columns[0].DataPropertyName = "Order_ID";
                    grd_All_SuperQc_Report.Columns[0].Width = 50;
                    grd_All_SuperQc_Report.Columns[0].Visible = false;

                    grd_All_SuperQc_Report.Columns[1].Name = "Order_Number";
                    grd_All_SuperQc_Report.Columns[1].HeaderText = "Order_Number";
                    grd_All_SuperQc_Report.Columns[1].DataPropertyName = "Client_Order_Number";
                    grd_All_SuperQc_Report.Columns[1].Width = 140;
                    //grd_My_Reports.Columns[1].Visible = false;

                    //DataGridViewLinkColumn client_order = new DataGridViewLinkColumn();
                    //grd_My_Reports.Columns.Add(client_order);
                    //client_order.DisplayIndex = 1;
                    //client_order.Name = "Order_Number";
                    //client_order.HeaderText = "Order Number";
                    //client_order.DataPropertyName = "Client_Order_Number";
                    //client_order.Width = 140;


                    grd_All_SuperQc_Report.Columns[2].Name = "Ref_number";
                    grd_All_SuperQc_Report.Columns[2].HeaderText = "Ref number";
                    grd_All_SuperQc_Report.Columns[2].DataPropertyName = "Client_Order_Ref";
                    grd_All_SuperQc_Report.Columns[2].Width = 125;

                    grd_All_SuperQc_Report.Columns[3].Name = "Date";
                    grd_All_SuperQc_Report.Columns[3].HeaderText = "Recived Date";
                    grd_All_SuperQc_Report.Columns[3].DataPropertyName = "Recived_Date";
                    grd_All_SuperQc_Report.Columns[3].Width = 195;

                    if (User_Role_Id == "1")
                    {
                        grd_All_SuperQc_Report.Columns[4].Name = "Client_name";
                        grd_All_SuperQc_Report.Columns[4].HeaderText = "CLIENT NAME";
                        grd_All_SuperQc_Report.Columns[4].DataPropertyName = "Client_Name";
                        grd_All_SuperQc_Report.Columns[4].Width = 125;

                        grd_All_SuperQc_Report.Columns[5].Name = "Sub_client";
                        grd_All_SuperQc_Report.Columns[5].HeaderText = "SUB PROCESS";
                        grd_All_SuperQc_Report.Columns[5].DataPropertyName = "Sub_ProcessName";
                        grd_All_SuperQc_Report.Columns[5].Width = 250;
                    }
                    else
                    {

                        grd_All_SuperQc_Report.Columns[4].Name = "Client_Number";
                        grd_All_SuperQc_Report.Columns[4].HeaderText = "CLIENT NAME";
                        grd_All_SuperQc_Report.Columns[4].DataPropertyName = "Client_Number";
                        grd_All_SuperQc_Report.Columns[4].Width = 125;

                        grd_All_SuperQc_Report.Columns[5].Name = "Subprocess_Number";
                        grd_All_SuperQc_Report.Columns[5].HeaderText = "SUB PROCESS";
                        grd_All_SuperQc_Report.Columns[5].DataPropertyName = "Subprocess_Number";
                        grd_All_SuperQc_Report.Columns[5].Width = 250;
                    }

                    grd_All_SuperQc_Report.Columns[6].Name = "Order_type";
                    grd_All_SuperQc_Report.Columns[6].HeaderText = "ORDER TYPE";
                    grd_All_SuperQc_Report.Columns[6].DataPropertyName = "Order_Type";
                    grd_All_SuperQc_Report.Columns[6].Width = 180;

                    grd_All_SuperQc_Report.Columns[7].Name = "Order_Type_Abrivation";
                    grd_All_SuperQc_Report.Columns[7].HeaderText = "ORDER TYPE ABBREVIATION";
                    grd_All_SuperQc_Report.Columns[7].DataPropertyName = "Order_Type_Abrivation";
                    grd_All_SuperQc_Report.Columns[7].Width = 180;

                    grd_All_SuperQc_Report.Columns[8].Name = "Borrower_Name";
                    grd_All_SuperQc_Report.Columns[8].HeaderText = "Borrower Name";
                    grd_All_SuperQc_Report.Columns[8].DataPropertyName = "Borrower_Name";
                    grd_All_SuperQc_Report.Columns[8].Width = 150;

                    grd_All_SuperQc_Report.Columns[9].Name = "Address";
                    grd_All_SuperQc_Report.Columns[9].HeaderText = "Barrower Address";
                    grd_All_SuperQc_Report.Columns[9].DataPropertyName = "Address";
                    grd_All_SuperQc_Report.Columns[9].Width = 150;

                    grd_All_SuperQc_Report.Columns[10].Name = "Abbreviation";
                    grd_All_SuperQc_Report.Columns[10].HeaderText = "Abbreviation";
                    grd_All_SuperQc_Report.Columns[10].DataPropertyName = "Abbreviation";
                    grd_All_SuperQc_Report.Columns[10].Width = 120;

                    grd_All_SuperQc_Report.Columns[11].Name = "County";
                    grd_All_SuperQc_Report.Columns[11].HeaderText = "COUNTY";
                    grd_All_SuperQc_Report.Columns[11].DataPropertyName = "County";
                    grd_All_SuperQc_Report.Columns[11].Width = 120;

                    //grd_All_SuperQc_Report.Columns[11].Name = "City";
                    //grd_All_SuperQc_Report.Columns[11].HeaderText = "City";
                    //grd_All_SuperQc_Report.Columns[11].DataPropertyName = "City";
                    //grd_All_SuperQc_Report.Columns[11].Width = 100;

                    grd_All_SuperQc_Report.Columns[12].Name = "Order_Status";
                    grd_All_SuperQc_Report.Columns[12].HeaderText = "Order Status";
                    grd_All_SuperQc_Report.Columns[12].DataPropertyName = "Order_Status";
                    grd_All_SuperQc_Report.Columns[12].Width = 100;

                    //grd_All_SuperQc_Report.Columns[13].Name = "Completed_Date";
                    //grd_All_SuperQc_Report.Columns[13].HeaderText = "Completed Date";
                    //grd_All_SuperQc_Report.Columns[13].DataPropertyName = "Completed_Date";
                    //grd_All_SuperQc_Report.Columns[13].Width = 100;

                    grd_All_SuperQc_Report.Columns[13].Name = "User Name";
                    grd_All_SuperQc_Report.Columns[13].HeaderText = "User Name";
                    grd_All_SuperQc_Report.Columns[13].DataPropertyName = "User_Name";
                    grd_All_SuperQc_Report.Columns[13].Width = 100;

                    grd_All_SuperQc_Report.Columns[14].Name = "empcode";
                    grd_All_SuperQc_Report.Columns[14].HeaderText = "EMP CODE";
                    grd_All_SuperQc_Report.Columns[14].DataPropertyName = "DRN_EMP_CODE";
                    grd_All_SuperQc_Report.Columns[14].Width = 100;

                    grd_All_SuperQc_Report.Columns[15].Name = "jobrole";
                    grd_All_SuperQc_Report.Columns[15].HeaderText = "JOB ROLE";
                    grd_All_SuperQc_Report.Columns[15].DataPropertyName = "Emp_Job_Role";
                    grd_All_SuperQc_Report.Columns[15].Width = 100;

                    grd_All_SuperQc_Report.Columns[16].Name = "shift";
                    grd_All_SuperQc_Report.Columns[16].HeaderText = "SHIFT";
                    grd_All_SuperQc_Report.Columns[16].DataPropertyName = "Shift_Type_Name";
                    grd_All_SuperQc_Report.Columns[16].Width = 100;

                    grd_All_SuperQc_Report.Columns[17].Name = "reporting_to1";
                    grd_All_SuperQc_Report.Columns[17].HeaderText = "REPORTING TO 1";
                    grd_All_SuperQc_Report.Columns[17].DataPropertyName = "Reporting_To_1";
                    grd_All_SuperQc_Report.Columns[17].Width = 100;

                    grd_All_SuperQc_Report.Columns[18].Name = "reportingto2";
                    grd_All_SuperQc_Report.Columns[18].HeaderText = "REPORTING To 2";
                    grd_All_SuperQc_Report.Columns[18].DataPropertyName = "Reporting_To_2";
                    grd_All_SuperQc_Report.Columns[18].Width = 100;



                    grd_All_SuperQc_Report.Columns[19].Name = "Production Date";
                    grd_All_SuperQc_Report.Columns[19].HeaderText = "Production Date";
                    grd_All_SuperQc_Report.Columns[19].DataPropertyName = "Order_Production_Date";
                    grd_All_SuperQc_Report.Columns[19].Width = 100;

                    grd_All_SuperQc_Report.Columns[20].Name = "Document List Name";
                    grd_All_SuperQc_Report.Columns[20].HeaderText = "Document List Name";
                    grd_All_SuperQc_Report.Columns[20].DataPropertyName = "Document_List_Name";
                    grd_All_SuperQc_Report.Columns[20].Width = 100;

                    grd_All_SuperQc_Report.Visible = true;
                    grd_All_SuperQc_Report.DataSource = dt_Status;



                }
                else
                {
                    grd_All_SuperQc_Report.Visible = false;
                    grd_All_SuperQc_Report.DataSource = null;

                }

            }
        }

        private void Load_Check_List_data()
        {
            if (Validation() != false)
            {
                DateTime Fromdate = Convert.ToDateTime(dtp_From_date.Text.ToString());
                DateTime Todate = Convert.ToDateTime(dtp_To_Date.Text.ToString());


                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;


                Hashtable ht_Status = new Hashtable();
                System.Data.DataTable dt_Status = new System.Data.DataTable();

                dt_Status.Rows.Clear();
                string From_Date = Fromdate.ToString("MM/dd/yyyy");
                string To_Date = Todate.ToString("MM/dd/yyyy");
                rptDoc = new Reports.CrystalReport.Order_Check_List_Report();

                Logon_To_Crystal();
                string Sub_Client;
                string Client;

                int Client_Id, Sub_Client_Id, User_Id;
                if (ddl_Client_name.SelectedIndex > 0)
                {
                    Client_Id = int.Parse(ddl_Client_name.SelectedValue.ToString());
                    Client = ddl_Client_name.SelectedValue.ToString();
                }
                else
                {
                    Client_Id = 0;

                    Client = "ALL";

                }
                if (ddl_Subprocess_name.SelectedIndex > 0)
                {
                    Sub_Client_Id = int.Parse(ddl_Subprocess_name.SelectedValue.ToString());
                    Sub_Client = ddl_Subprocess_name.SelectedValue.ToString();
                }
                else
                {
                    Sub_Client_Id = 0;
                    Sub_Client = "ALL";

                }
                //if (ddl_Check_List_UserName.SelectedIndex > 0)
                //{
                //    User_Id = int.Parse(ddl_Check_List_UserName.SelectedValue.ToString());
                //    Username = ddl_Check_List_UserName.SelectedValue.ToString();
                //}
                //else
                //{
                //    User_Id = 0;
                //    Username = "ALL";
                //}


                if (Client == "ALL" && Sub_Client == "ALL")
                {

                    rptDoc.SetParameterValue("@Trans", "SELECT_DATE_RANGE_WISE");
                }
                else if (Client != "ALL" && Sub_Client == "ALL")
                {

                    rptDoc.SetParameterValue("@Trans", "CLIENT_WISE");
                }
                else if (Client != "ALL" && Sub_Client != "ALL")
                {

                    rptDoc.SetParameterValue("@Trans", "CLEINT_SUB_CLIENT_WISE");
                }
                else if (Client != "ALL" && Sub_Client != "ALL")
                {

                    rptDoc.SetParameterValue("@Trans", "CLEINT_SUB_CLIENT_USER_WISE");
                }

                rptDoc.SetParameterValue("@Task", int.Parse(ddl_Order_task.SelectedValue.ToString()));
                rptDoc.SetParameterValue("@From_date", From_Date);
                rptDoc.SetParameterValue("@To_date", To_Date);
                rptDoc.SetParameterValue("@Order_Id", 0);
                rptDoc.SetParameterValue("@Client_Id", Client_Id);
                rptDoc.SetParameterValue("@Sub_Client_Id", Sub_Client_Id);
                rptDoc.SetParameterValue("@User_Id", userid);

                rptDoc.SetParameterValue("@Work_Type_Id", 1);
                rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                cr_ReportsViewer.ReportSource = rptDoc;

            }
        }

        private void Load_Check_List_Rework_data()
        {
            if (Validation_All_Rework_report() != false)
            {
                DateTime Fromdate = Convert.ToDateTime(dtp_Rework_Fromdate.Text.ToString());
                DateTime Todate = Convert.ToDateTime(dtp_Rework_Todate.Text.ToString());


                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;


                Hashtable ht_Status = new Hashtable();
                System.Data.DataTable dt_Status = new System.Data.DataTable();

                dt_Status.Rows.Clear();
                string From_Date = Fromdate.ToString("MM/dd/yyyy");
                string To_Date = Todate.ToString("MM/dd/yyyy");
                rptDoc = new Reports.CrystalReport.Order_Check_List_Report();

                Logon_To_Crystal();
                string Sub_Client;
                string Client;

                int Client_Id, Sub_Client_Id, User_Id;
                if (ddl_MyClient.SelectedIndex > 0)
                {
                    Client_Id = int.Parse(ddl_MyClient.SelectedValue.ToString());
                    Client = ddl_MySubprocess.SelectedValue.ToString();
                }
                else
                {
                    Client_Id = 0;

                    Client = "ALL";

                }
                if (ddl_MySubprocess.SelectedIndex > 0)
                {
                    Sub_Client_Id = int.Parse(ddl_MySubprocess.SelectedValue.ToString());
                    Sub_Client = ddl_MySubprocess.SelectedValue.ToString();
                }
                else
                {
                    Sub_Client_Id = 0;
                    Sub_Client = "ALL";

                }

                if (Client == "ALL" && Sub_Client == "ALL")
                {

                    rptDoc.SetParameterValue("@Trans", "SELECT_DATE_RANGE_WISE");
                }
                else if (Client != "ALL" && Sub_Client == "ALL")
                {

                    rptDoc.SetParameterValue("@Trans", "CLIENT_WISE");
                }
                else if (Client != "ALL" && Sub_Client != "ALL")
                {

                    rptDoc.SetParameterValue("@Trans", "CLEINT_SUB_CLIENT_WISE");
                }
                else if (Client != "ALL" && Sub_Client != "ALL")
                {

                    rptDoc.SetParameterValue("@Trans", "CLEINT_SUB_CLIENT_USER_WISE");
                }

                rptDoc.SetParameterValue("@Task", int.Parse(ddl_Rework_Task.SelectedValue.ToString()));
                rptDoc.SetParameterValue("@From_date", From_Date);
                rptDoc.SetParameterValue("@To_date", To_Date);
                rptDoc.SetParameterValue("@Order_Id", 0);
                rptDoc.SetParameterValue("@Client_Id", Client_Id);
                rptDoc.SetParameterValue("@Sub_Client_Id", Sub_Client_Id);
                rptDoc.SetParameterValue("@User_Id", userid);

                rptDoc.SetParameterValue("@Work_Type_Id", 2);
                // rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                cr_Rework_ReportsViewer.ReportSource = rptDoc;
            }
        }

        private void btn_Myreports_refresh_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();

            if (validate_My_Report() != false)
            {
                if (Lbl_Title.Text == "User Production Summary")
                {
                    User_Production_Summary_design();
                    grd_My_Reports.DataSource = null;
                    grd_My_Reports.Visible = true;
                    Export_Title_Name = "User_Production_Summary";
                    crViewer.Visible = false;
                    lbl_Error.Visible = false;
                    Load_User_Production_Summary_Report();

                }
                else if (Lbl_Title.Text == "Productivity Report")
                {
                    User_Production_Summary_design();
                    grd_My_Reports.DataSource = null;
                    Export_Title_Name = "User_Productivity";
                    lbl_Error.Visible = false;
                    Productivity_Calculation();

                }
                else if (Lbl_Title.Text == "Billing Report")
                {
                    Order_Document_list_design();
                    grd_My_Reports.AutoGenerateColumns = false;
                    grd_My_Reports.DataSource = null;
                    Export_Title_Name = "Billing_Report";
                    lbl_Error.Visible = false;
                    Load_Billing_Report();
                }
                else if (Lbl_Title.Text == "Orders Document List Report")
                {
                    Order_Document_list_design();
                    grd_My_Reports.AutoGenerateColumns = true;
                    grd_My_Reports.DataSource = null;
                    Export_Title_Name = "Document_List_Report";
                    lbl_Error.Visible = false;
                    Load_Order_Document_List_Report();
                }
                else if (Lbl_Title.Text == "Orders Check List Report")
                {
                    grd_My_Reports.AutoGenerateColumns = true;
                    grd_My_Reports.DataSource = null;
                    Order_Chklist_Design();
                    lbl_Error.Visible = false;
                    Load_Check_List_data();
                }
                else if (Lbl_Title.Text == "Orders Error Info Report")
                {
                    grd_My_Reports.DataSource = null;
                    grd_My_Reports.Visible = true;
                    Export_Title_Name = "Error_Info_Report";
                    lbl_Error.Visible = false;
                    Load_Orders_Error_Info_Report();
                }
                else
                {
                    cr_ReportsViewer.Visible = false;
                    grd_My_Reports.Visible = false;
                    lbl_Error.Visible = true;
                }
            }
        }

        private void Load_Orders_Error_Info_Report()
        {
            if (Validation() != false)
            {
                DateTime Fromdate = Convert.ToDateTime(dtp_From_date.Text.ToString());
                DateTime Todate = Convert.ToDateTime(dtp_To_Date.Text.ToString());
                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;

                Hashtable ht_Status = new Hashtable();
                System.Data.DataTable dt_Status = new System.Data.DataTable();

                dt_Status.Rows.Clear();
                string From_Date = Fromdate.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture);
                string To_Date = Todate.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture);

                ht_Status.Clear();
                dt_Status.Clear();
                string Client, SubProcess;

                if (ddl_Client_name.SelectedIndex > 0)
                {
                    Client = ddl_Client_name.SelectedValue.ToString();
                }
                else
                {
                    Client = "ALL";
                }
                if (ddl_Subprocess_name.SelectedIndex > 0)
                {
                    SubProcess = ddl_Subprocess_name.SelectedValue.ToString();
                }
                else
                {
                    SubProcess = "ALL";
                }
                if (Client == "ALL")
                {
                    ht_Status.Add("@Trans", "SELECT_ERROR_DATE_RANGE");
                    ht_Status.Add("@Fromdate", From_Date);
                    ht_Status.Add("@Todate", To_Date);
                    ht_Status.Add("@Work_Type", 1);

                    ht_Status.Add("@Log_In_Userid", Loged_In_User_Id);
                    dt_Status = dataaccess.ExecuteSP("Sp_Rpt_Order_ErrorReport", ht_Status);

                }
                else if (Client != "ALL" && SubProcess == "ALL")
                {
                    ht_Status.Add("@Trans", "CLIENT_WISE");
                    ht_Status.Add("@Fromdate", From_Date);
                    ht_Status.Add("@Todate", To_Date);
                    ht_Status.Add("@Client_Id", Client);
                    ht_Status.Add("@Work_Type", 1);
                    dt_Status = dataaccess.ExecuteSP("Sp_Rpt_Order_ErrorReport", ht_Status);
                }
                else if (Client != "ALL" && SubProcess != "ALL")
                {
                    ht_Status.Add("@Trans", "CLIENT_SUB_PROCESS_WISE");

                    ht_Status.Add("@Fromdate", From_Date);
                    ht_Status.Add("@Todate", To_Date);
                    ht_Status.Add("@Client_Id", Client);
                    ht_Status.Add("@Sub_Process_Id", SubProcess);
                    ht_Status.Add("@Work_Type", 1);
                    dt_Status = dataaccess.ExecuteSP("Sp_Rpt_Order_ErrorReport", ht_Status);
                }
                dtordererror.Clear();
                dtordererror = dt_Status;
                if (dtordererror.Rows.Count > 0)
                {
                    grd_My_Reports.Rows.Clear();
                    grd_My_Reports.Visible = true;

                    grd_My_Reports.DataSource = null;
                    grd_My_Reports.AutoGenerateColumns = false;
                    grd_My_Reports.ColumnCount = 18;

                    grd_My_Reports.Columns[0].Name = "Orderid";
                    grd_My_Reports.Columns[0].HeaderText = "ORDER ID";
                    grd_My_Reports.Columns[0].DataPropertyName = "Order_ID";
                    grd_My_Reports.Columns[0].Width = 50;
                    grd_My_Reports.Columns[0].Visible = false;

                    grd_My_Reports.Columns[1].Name = "Client_Order_Number";
                    grd_My_Reports.Columns[1].HeaderText = "ORDER NUMBER";
                    grd_My_Reports.Columns[1].DataPropertyName = "Client Order Number";
                    grd_My_Reports.Columns[1].Width = 140;


                    if (User_Role_Id == "1")
                    {

                        grd_My_Reports.Columns[2].Name = "Client_Name";
                        grd_My_Reports.Columns[2].HeaderText = "CLIENT NAME";
                        grd_My_Reports.Columns[2].DataPropertyName = "Client";
                        grd_My_Reports.Columns[2].Width = 120;

                        grd_My_Reports.Columns[3].Name = "Sub_ProcessName";
                        grd_My_Reports.Columns[3].HeaderText = "SUBPROCESS NAME";
                        grd_My_Reports.Columns[3].DataPropertyName = "Subprocess";
                        grd_My_Reports.Columns[3].Width = 300;

                    }
                    else
                    {

                        grd_My_Reports.Columns[2].Name = "Client_Number";
                        grd_My_Reports.Columns[2].HeaderText = "CLIENT Name";
                        grd_My_Reports.Columns[2].DataPropertyName = "Client_Number";
                        grd_My_Reports.Columns[2].Width = 120;

                        grd_My_Reports.Columns[3].Name = "Subprocess_Number";
                        grd_My_Reports.Columns[3].HeaderText = "SUBPROCESS NAME";
                        grd_My_Reports.Columns[3].DataPropertyName = "Subprocess_Number";
                        grd_My_Reports.Columns[3].Width = 300;
                    }

                    grd_My_Reports.Columns[4].Name = "Order_Type";
                    grd_My_Reports.Columns[4].HeaderText = "ORDER TYPE";
                    grd_My_Reports.Columns[4].DataPropertyName = "Order Type";
                    grd_My_Reports.Columns[4].Width = 300;

                    grd_My_Reports.Columns[5].Name = "Error_Type";
                    grd_My_Reports.Columns[5].HeaderText = "ERROR TYPE";
                    grd_My_Reports.Columns[5].DataPropertyName = "Error Type";
                    grd_My_Reports.Columns[5].Width = 150;

                    grd_My_Reports.Columns[6].Name = "Error_description";
                    grd_My_Reports.Columns[6].HeaderText = "ERROR DESCRIPTION";
                    grd_My_Reports.Columns[6].DataPropertyName = "Error description";
                    grd_My_Reports.Columns[6].Width = 200;

                    grd_My_Reports.Columns[7].Name = "Comments";
                    grd_My_Reports.Columns[7].HeaderText = "COMMENTS";
                    grd_My_Reports.Columns[7].DataPropertyName = "Comments";
                    grd_My_Reports.Columns[7].Width = 200;

                    grd_My_Reports.Columns[8].Name = "Error_On_Status";
                    grd_My_Reports.Columns[8].HeaderText = "ERROR STATUS";
                    grd_My_Reports.Columns[8].DataPropertyName = "Error On Status";
                    grd_My_Reports.Columns[8].Width = 150;

                    grd_My_Reports.Columns[9].Name = "Error_On_User_Name";
                    grd_My_Reports.Columns[9].HeaderText = "ERROR USER NAME";
                    grd_My_Reports.Columns[9].DataPropertyName = "Error On User Name";
                    grd_My_Reports.Columns[9].Width = 150;

                    grd_My_Reports.Columns[10].Name = "empcode";
                    grd_My_Reports.Columns[10].HeaderText = "EMP CODE";
                    grd_My_Reports.Columns[10].DataPropertyName = "DRN_Emp_Code";
                    grd_My_Reports.Columns[10].Width = 80;

                    grd_My_Reports.Columns[11].Name = "empjobrole";
                    grd_My_Reports.Columns[11].HeaderText = "JOB ROLE";
                    grd_My_Reports.Columns[11].DataPropertyName = "Emp_Job_Role";
                    grd_My_Reports.Columns[11].Width = 90;

                    grd_My_Reports.Columns[12].Name = "shift";
                    grd_My_Reports.Columns[12].HeaderText = "SHIFT";
                    grd_My_Reports.Columns[12].DataPropertyName = "Shift_Type_Name";
                    grd_My_Reports.Columns[12].Width = 100;

                    grd_My_Reports.Columns[13].Name = "reportingto1";
                    grd_My_Reports.Columns[13].HeaderText = "REPORTING TO LEVEL 1";
                    grd_My_Reports.Columns[13].DataPropertyName = "REPORTING_TO_1";
                    grd_My_Reports.Columns[13].Width = 130;

                    grd_My_Reports.Columns[14].Name = "reportingto2";
                    grd_My_Reports.Columns[14].HeaderText = "REPORTING TO LEVEL 2";
                    grd_My_Reports.Columns[14].DataPropertyName = "REPORTING_TO_2";
                    grd_My_Reports.Columns[14].Width = 130;


                    grd_My_Reports.Columns[15].Name = "Error_From_Status";
                    grd_My_Reports.Columns[15].HeaderText = "QC STATUS";
                    grd_My_Reports.Columns[15].DataPropertyName = "Error From Status";
                    grd_My_Reports.Columns[15].Width = 150;

                    grd_My_Reports.Columns[16].Name = "Error_Enter_By_Username";
                    grd_My_Reports.Columns[16].HeaderText = "QC USER NAME";
                    grd_My_Reports.Columns[16].DataPropertyName = "Error From Username";
                    grd_My_Reports.Columns[16].Width = 160;

                    grd_My_Reports.Columns[17].Name = "Order_Production_Date";
                    grd_My_Reports.Columns[17].HeaderText = "PRODUCTION DATE";
                    grd_My_Reports.Columns[17].DataPropertyName = "Order Production Date";
                    grd_My_Reports.Columns[17].Width = 120;

                    grd_My_Reports.DataSource = dt_Status;
                }
                else
                {
                    grd_My_Reports.Rows.Clear();
                    grd_My_Reports.Visible = false;
                    grd_My_Reports.DataSource = null;
                }
            }
        }

        private void Load_Orders_Error_Info_Rework_Report()
        {
            if (Validation_All_Rework_report() != false)
            {
                DateTime Fromdate = Convert.ToDateTime(dtp_Rework_Fromdate.Text.ToString());
                DateTime Todate = Convert.ToDateTime(dtp_Rework_Todate.Text.ToString());
                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;

                Hashtable ht_Status = new Hashtable();
                System.Data.DataTable dt_Status = new System.Data.DataTable();

                dt_Status.Rows.Clear();
                string From_Date = Fromdate.ToString("MM/dd/yyyy");
                string To_Date = Todate.ToString("MM/dd/yyyy");

                ht_Status.Clear();
                dt_Status.Clear();
                string Client, SubProcess;

                if (ddl_Rework_client.SelectedIndex > 0)
                {
                    Client = ddl_Rework_client.SelectedValue.ToString();
                }
                else
                {
                    Client = "ALL";
                }
                if (ddl_Rework_Subprocess.SelectedIndex > 0)
                {

                    SubProcess = ddl_Rework_Subprocess.SelectedValue.ToString();
                }
                else
                {
                    SubProcess = "ALL";
                }
                if (Client == "ALL")
                {
                    ht_Status.Add("@Trans", "SELECT_ERROR_DATE_RANGE");
                    ht_Status.Add("@Fromdate", From_Date);
                    ht_Status.Add("@Todate", To_Date);
                    ht_Status.Add("@Work_Type", 2);
                    //ht_Status.Add("@Log_In_Userid", Loged_In_User_Id);
                    dt_Status = dataaccess.ExecuteSP("Sp_Rpt_Order_ErrorReport", ht_Status);
                }
                else if (Client != "ALL" && SubProcess == "ALL")
                {
                    ht_Status.Add("@Trans", "CLIENT_WISE");
                    ht_Status.Add("@Fromdate", From_Date);
                    ht_Status.Add("@Todate", To_Date);
                    ht_Status.Add("@Client_Id", Client);
                    ht_Status.Add("@Work_Type", 2);

                    dt_Status = dataaccess.ExecuteSP("Sp_Rpt_Order_ErrorReport", ht_Status);

                }
                else if (Client != "ALL" && SubProcess != "ALL")
                {
                    ht_Status.Add("@Trans", "CLIENT_SUB_PROCESS_WISE");

                    ht_Status.Add("@Fromdate", From_Date);
                    ht_Status.Add("@Todate", To_Date);
                    ht_Status.Add("@Client_Id", Client);
                    ht_Status.Add("@Sub_Process_Id", SubProcess);
                    ht_Status.Add("@Work_Type", 2);
                    dt_Status = dataaccess.ExecuteSP("Sp_Rework_Rpt_Order_ErrorReport", ht_Status);

                }

                dtordererror.Clear();
                dtordererror = dt_Status;

                if (dtordererror.Rows.Count > 0)
                {
                    grd_Rework_Reports.DataSource = null;
                    grd_Rework_Reports.AutoGenerateColumns = false;

                    grd_Rework_Reports.ColumnCount = 18;
                    grd_Rework_Reports.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Ebrima", 7.75F, FontStyle.Bold);
                    grd_Rework_Reports.ColumnHeadersHeight = 40;

                    grd_Rework_Reports.Columns[0].Name = "Orderid";
                    grd_Rework_Reports.Columns[0].HeaderText = "Order Id";
                    grd_Rework_Reports.Columns[0].DataPropertyName = "Order_ID";
                    grd_Rework_Reports.Columns[0].Width = 50;
                    grd_Rework_Reports.Columns[0].Visible = false;

                    grd_Rework_Reports.Columns[1].Name = "Client_Order_Number";
                    grd_Rework_Reports.Columns[1].HeaderText = "Order_Number";
                    grd_Rework_Reports.Columns[1].DataPropertyName = "Client Order Number";
                    grd_Rework_Reports.Columns[1].Width = 140;


                    if (User_Role_Id == "1")
                    {
                        grd_Rework_Reports.Columns[2].Name = "Client_Name";
                        grd_Rework_Reports.Columns[2].HeaderText = "Client Name";
                        grd_Rework_Reports.Columns[2].DataPropertyName = "Client";
                        grd_Rework_Reports.Columns[2].Width = 120;

                        grd_Rework_Reports.Columns[3].Name = "Sub_ProcessName";
                        grd_Rework_Reports.Columns[3].HeaderText = "Subprocess Name";
                        grd_Rework_Reports.Columns[3].DataPropertyName = "Subprocess";
                        grd_Rework_Reports.Columns[3].Width = 300;
                    }
                    else
                    {

                        grd_Rework_Reports.Columns[2].Name = "Client_Number";
                        grd_Rework_Reports.Columns[2].HeaderText = "CLIENT NAME";
                        grd_Rework_Reports.Columns[2].DataPropertyName = "Client_Number";
                        grd_Rework_Reports.Columns[2].Width = 125;

                        grd_Rework_Reports.Columns[3].Name = "Subprocess_Number";
                        grd_Rework_Reports.Columns[3].HeaderText = "SUB PROCESS";
                        grd_Rework_Reports.Columns[3].DataPropertyName = "Subprocess_Number";
                        grd_Rework_Reports.Columns[3].Width = 250;
                    }

                    grd_Rework_Reports.Columns[4].Name = "Order_Type";
                    grd_Rework_Reports.Columns[4].HeaderText = "Order Type";
                    grd_Rework_Reports.Columns[4].DataPropertyName = "Order Type";
                    grd_Rework_Reports.Columns[4].Width = 300;

                    grd_Rework_Reports.Columns[5].Name = "Error_Type";
                    grd_Rework_Reports.Columns[5].HeaderText = "Error Type";
                    grd_Rework_Reports.Columns[5].DataPropertyName = "Error Type";
                    grd_Rework_Reports.Columns[5].Width = 150;

                    grd_Rework_Reports.Columns[6].Name = "Error_description";
                    grd_Rework_Reports.Columns[6].HeaderText = "Error Description";
                    grd_Rework_Reports.Columns[6].DataPropertyName = "Error description";
                    grd_Rework_Reports.Columns[6].Width = 200;

                    grd_Rework_Reports.Columns[7].Name = "Comments";
                    grd_Rework_Reports.Columns[7].HeaderText = "Comments";
                    grd_Rework_Reports.Columns[7].DataPropertyName = "Comments";
                    grd_Rework_Reports.Columns[7].Width = 200;

                    grd_Rework_Reports.Columns[8].Name = "Error_On_Status";
                    grd_Rework_Reports.Columns[8].HeaderText = "Error Status";
                    grd_Rework_Reports.Columns[8].DataPropertyName = "Error On Status";
                    grd_Rework_Reports.Columns[8].Width = 150;

                    grd_Rework_Reports.Columns[9].Name = "Error_On_User_Name";
                    grd_Rework_Reports.Columns[9].HeaderText = "Error User Name";
                    grd_Rework_Reports.Columns[9].DataPropertyName = "Error On User Name";
                    grd_Rework_Reports.Columns[9].Width = 150;


                    grd_Rework_Reports.Columns[10].Name = "DRNEmpCode";
                    grd_Rework_Reports.Columns[10].HeaderText = "EMP CODE";
                    grd_Rework_Reports.Columns[10].DataPropertyName = "DRN_Emp_Code";
                    grd_Rework_Reports.Columns[10].Width = 120;


                    grd_Rework_Reports.Columns[11].Name = "Emp_Job_Role";
                    grd_Rework_Reports.Columns[11].HeaderText = "JOB ROLE";
                    grd_Rework_Reports.Columns[11].DataPropertyName = "Emp_Job_Role";
                    grd_Rework_Reports.Columns[11].Width = 120;

                    grd_Rework_Reports.Columns[12].Name = "ShiftTypeName";
                    grd_Rework_Reports.Columns[12].HeaderText = "SHIFT";
                    grd_Rework_Reports.Columns[12].DataPropertyName = "Shift_Type_Name";
                    grd_Rework_Reports.Columns[12].Width = 120;

                    grd_Rework_Reports.Columns[13].Name = "ReportingTo1";
                    grd_Rework_Reports.Columns[13].HeaderText = "REPORTING TO 1";
                    grd_Rework_Reports.Columns[13].DataPropertyName = "Reporting_To_1";
                    grd_Rework_Reports.Columns[13].Width = 120;

                    grd_Rework_Reports.Columns[14].Name = "ReportingTo2";
                    grd_Rework_Reports.Columns[14].HeaderText = "REPORTING TO 2";
                    grd_Rework_Reports.Columns[14].DataPropertyName = "Reporting_To_2";
                    grd_Rework_Reports.Columns[14].Width = 120;


                    grd_Rework_Reports.Columns[15].Name = "Error_From_Status";
                    grd_Rework_Reports.Columns[15].HeaderText = "QC Status";
                    grd_Rework_Reports.Columns[15].DataPropertyName = "Error From Status";
                    grd_Rework_Reports.Columns[15].Width = 150;

                    grd_Rework_Reports.Columns[16].Name = "Error_Enter_By_Username";
                    grd_Rework_Reports.Columns[16].HeaderText = "QC USER NAME";
                    grd_Rework_Reports.Columns[16].DataPropertyName = "Error From Username";
                    grd_Rework_Reports.Columns[16].Width = 160;

                    grd_Rework_Reports.Columns[17].Name = "Order_Production_Date";
                    grd_Rework_Reports.Columns[17].HeaderText = "PRODUCTION DATE";
                    grd_Rework_Reports.Columns[17].DataPropertyName = "Order Production Date";
                    grd_Rework_Reports.Columns[17].Width = 120;

                    grd_Rework_Reports.DataSource = dt_Status;
                }
                else
                {
                    try
                    {
                        grd_Rework_Reports.Rows.Clear();
                        grd_Rework_Reports.Visible = false;
                        grd_Rework_Reports.DataSource = null;
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
        }

        private void btn_Myreport_export_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            if (Lbl_Title.Text == "Client Status Report")
            {
                Export_ReportData();
            }
            else if (Lbl_Title.Text == "User Production Report")
            {
                if (dtuserexport.Rows.Count > 0)
                {
                    Export_ReportData();
                }
            }
            else if (Lbl_Title.Text == "User Production Summary")
            {
                if (dtuserexport.Rows.Count > 0)
                {
                    Export_ReportData();
                }
            }
            else if (Lbl_Title.Text == "Client Wise Production Report")
            {
                Export_ReportClient_ProductionData();
            }
            else if (Lbl_Title.Text == "Client Wise Production Count")
            {
                Export_ReportData();
            }
            else if (Lbl_Title.Text == "Billing Report")
            {
                Export_ReportData();
            }
            else if (Lbl_Title.Text == "Orders Document List Report")
            {
                if (dtuserexport.Rows.Count > 0)
                {
                    Export_ReportData();
                }
            }
            else if (Lbl_Title.Text == "Orders Error Info Report")
            {
                if (dtordererror.Rows.Count > 0)
                {
                    Export_ReportData();
                }
            }
            else
            {
                // ds.Tables[0] = Grd_OrderTime.DataSource;
                ds.Tables.Add(dt_Status);
                Convert_Dataset_to_Excel();
                ds.Tables.Clear();
            }
        }

        private void Export_ReportData()
        {
            System.Data.DataTable dt = new System.Data.DataTable();
            dt.Clear();
            dt.Columns.Clear();
            // dt = dtuserexport;
            //Adding the Columns
            foreach (DataGridViewColumn column in grd_My_Reports.Columns)
            {
                if (column.HeaderText != "")
                {
                    if (column.ValueType == null)
                    {

                        dt.Columns.Add(column.HeaderText, typeof(string));

                    }
                    else
                    {
                        if (column.ValueType == typeof(int))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(int));

                        }
                        else if (column.ValueType == typeof(decimal))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(decimal));

                        }
                        else if (column.ValueType == typeof(DateTime))
                        {

                            dt.Columns.Add(column.HeaderText, typeof(string));
                        }
                        else
                        {
                            dt.Columns.Add(column.HeaderText, column.ValueType);
                        }
                    }
                }

            }

            //Adding the Rows
            foreach (DataGridViewRow row in grd_My_Reports.Rows)
            {
                dt.Rows.Add();
                foreach (DataGridViewCell cell in row.Cells)
                {
                    if (cell.Value != null && cell.Value.ToString() != "")
                    {
                        dt.Rows[dt.Rows.Count - 1][cell.ColumnIndex] = cell.Value.ToString();
                    }
                }
            }
            //Exporting to Excel
            string folderPath = "C:\\Temp\\";
            Path1 = folderPath + DateTime.Now.ToString("dd-MM-yyyy-hh-mm-ss") + "-" + Export_Title_Name + ".xlsx";
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }
            using (XLWorkbook wb = new XLWorkbook())
            {
                wb.Worksheets.Add(dt, Export_Title_Name.ToString());
                try
                {
                    wb.SaveAs(Path1);
                }
                catch (Exception ex)
                {

                    MessageBox.Show("File is Opened, Please Close and Export it");
                }
            }
            System.Diagnostics.Process.Start(Path1);
        }

        private void Export_MyClient_Wise_ReportData()
        {
            System.Data.DataTable dt = new System.Data.DataTable();

            //Adding the Columns
            foreach (DataGridViewColumn column in grd_My_Reports.Columns)
            {
                if (column.HeaderText != "")
                {
                    if (column.ValueType == null)
                    {
                        dt.Columns.Add(column.HeaderText, typeof(string));
                    }
                    else
                    {
                        if (column.ValueType == typeof(int))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(int));

                        }
                        else if (column.ValueType == typeof(decimal))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(decimal));

                        }
                        else if (column.ValueType == typeof(DateTime))
                        {

                            dt.Columns.Add(column.HeaderText, typeof(string));
                        }
                        else
                        {
                            dt.Columns.Add(column.HeaderText, column.ValueType);
                        }
                    }
                }

            }
            //Adding the Rows
            foreach (DataGridViewRow row in grd_My_Reports.Rows)
            {
                dt.Rows.Add();
                foreach (DataGridViewCell cell in row.Cells)
                {
                    if (cell.Value != null && cell.Value.ToString() != "")
                    {
                        dt.Rows[dt.Rows.Count - 1][cell.ColumnIndex] = cell.Value.ToString();
                    }
                }
            }
            //Exporting to Excel
            string folderPath = "C:\\Temp\\";
            Path1 = folderPath + DateTime.Now.ToString("dd-MM-yyyy-hh-mm-ss") + "User_Production.xlsx";
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }
            using (XLWorkbook wb = new XLWorkbook())
            {
                wb.Worksheets.Add(dt, "User Production Report");
                try
                {
                    wb.SaveAs(Path1);
                }
                catch (Exception ex)
                {
                    MessageBox.Show("File is Opened, Please Close and Export it");
                }
            }
            System.Diagnostics.Process.Start(Path1);
        }

        private void tabControl3_SelectedIndexChanged(object sender, EventArgs e)
        {
            dtp_From_date.Value = DateTime.Now;
            dtp_To_Date.Value = DateTime.Now;

            if (tabControl3.SelectedIndex == 2)
            {
                AddParent();
                dbc.BindOrderStatusRpt_For_Check_list(ddl_Order_task);
                //dbc.BindClientName_rpt(ddl_Client_name);
                if (User_Role_Id == "1")
                {
                    dbc.Bind_UserClient_rpt(ddl_Client_name, userid);
                }
                else
                {
                    dbc.Bind_UserClient_Number_rpt(ddl_Client_name, userid);
                }
            }
            else if (tabControl3.SelectedIndex == 1)
            {
                if (User_Role_Id == "1")
                {
                    dbc.BindClientName(ddl_My_ClientName);
                }
                else
                {
                    dbc.BindClientName_For_Employee(ddl_My_ClientName);
                }
            }

        }

        private void ddl_Client_name_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ddl_Client_name.SelectedIndex > 0)
            {
                if (tvwRightSide.SelectedNode.Text == "User Production Summary")
                {
                    int clientid = int.Parse(ddl_Client_name.SelectedValue.ToString());
                    if (User_Role_Id == "1")
                    {
                        dbc.Bind_UserClientSubprocess_rpt(ddl_Subprocess_name, clientid);
                    }
                    else
                    {

                        dbc.Bind_UserClientSubprocess_Number_rpt(ddl_Subprocess_name, clientid);
                    }
                    ddl_Subprocess_Status.Focus();
                }
                else
                {
                    int clientid = int.Parse(ddl_Client_name.SelectedValue.ToString());
                    if (User_Role_Id == "1")
                    {
                        dbc.Bind_UserClientSubprocess_rpt(ddl_Subprocess_name, clientid);
                    }
                    else
                    {
                        dbc.Bind_UserClientSubprocess_Number_rpt(ddl_Subprocess_name, clientid);
                    }
                    ddl_Subprocess_Status.Focus();
                }
            }
            else
            {
                if (User_Role_Id == "1")
                {
                    dbc.Bind_UserClientSubprocess_rpt(ddl_Subprocess_name, 0);
                }
                else
                {
                    dbc.Bind_UserClientSubprocess_Number_rpt(ddl_Subprocess_name, 0);
                }
            }
        }

        private void grd_My_Reports_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (tvwRightSide.SelectedNode.Text == "Billing Report")
            {
                load_Progressbar.Start_progres();
                if (e.ColumnIndex == 22)
                {
                    Ordermanagement_01.Order_Entry OrderEntry = new Ordermanagement_01.Order_Entry(int.Parse(grd_My_Reports.Rows[e.RowIndex].Cells[0].Value.ToString()), userid, User_Role_Id, Production_Date);
                    OrderEntry.Show();
                }
            }
            else if (tvwRightSide.SelectedNode.Text == "Orders Document List Report")
            {
                load_Progressbar.Start_progres();
                if (e.ColumnIndex == 3)
                {
                    Ordermanagement_01.Order_Entry OrderEntry = new Ordermanagement_01.Order_Entry(int.Parse(grd_My_Reports.Rows[e.RowIndex].Cells[2].Value.ToString()), userid, User_Role_Id, Production_Date);
                    OrderEntry.Show();
                }
            }
            else if (tvwRightSide.SelectedNode.Text == "User Production Summary")
            {
                load_Progressbar.Start_progres();

                if (e.ColumnIndex == 42)
                {

                    Ordermanagement_01.Order_Entry OrderEntry = new Ordermanagement_01.Order_Entry(int.Parse(grd_My_Reports.Rows[e.RowIndex].Cells[0].Value.ToString()), userid, User_Role_Id, Production_Date);
                    OrderEntry.Show();
                }
            }
            else if (tvwRightSide.SelectedNode.Text == "Orders Check List Report")
            {
                load_Progressbar.Start_progres();
                if (e.ColumnIndex == 1)
                {
                    Ordermanagement_01.Order_Entry OrderEntry = new Ordermanagement_01.Order_Entry(int.Parse(grd_My_Reports.Rows[e.RowIndex].Cells[0].Value.ToString()), userid, User_Role_Id, Production_Date);
                    OrderEntry.Show();
                }

            }
            else if (tvwRightSide.SelectedNode.Text == "Orders Error Info Report")
            {
                load_Progressbar.Start_progres();
                if (e.ColumnIndex == 1)
                {
                    Ordermanagement_01.Order_Entry OrderEntry = new Ordermanagement_01.Order_Entry(int.Parse(grd_My_Reports.Rows[e.RowIndex].Cells[0].Value.ToString()), userid, User_Role_Id, Production_Date);
                    OrderEntry.Show();
                }

            }

        }

        private void gridclient_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void vendorsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Vendors.Vendor_View Vendorview = new Ordermanagement_01.Vendors.Vendor_View(userid, User_Role_Id);
            Vendorview.Show();

            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Vendors.Vendor_View(userid)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start();
        }

        private void lbl_Rework_Count_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);

            try
            {

                Ordermanagement_01.Rework_Orders rw = new Rework_Orders(userid, User_Role_Id);
                rw.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
        }

        private void lbl_Exam_Qc_Click(object sender, EventArgs e)
        {
            //load_Progressbar.Start_progres();
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);

            try
            {

                Ordermanagement_01.Super_Qc_Orders rw = new Super_Qc_Orders(userid, User_Role_Id);
                rw.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
        }

        private void lbl_Rework_Pending_Allocation_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Rework_Order_Allocate Orderallocate = new Rework_Order_Allocate("REWORK_ORDER_ALLOCATE", 15, userid, 0, User_Role_Id);
            Orderallocate.Show();

        }

        private void lbl_Rework_Allocation_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);
            try
            {
                Ordermanagement_01.Rework_Orders rw = new Rework_Orders(userid, User_Role_Id);
                rw.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
        }

        private void lbl_SearchSuper_Qc_Allocation_Click(object sender, EventArgs e)
        {

            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);
            try
            {
                Ordermanagement_01.Super_Qc_Orders rw = new Super_Qc_Orders(userid, User_Role_Id);
                rw.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Super_Qc_Orders(userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 
        }

        private void btn_Date_Submit_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            Updated_Score_Board();

        }

        private void grd_Rework_Scoreboard_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            score_board = "SCORE BOARD";
            TAT = "SCORE BOARD";
            if (e.ColumnIndex == 2)
            {
                Ordermanagement_01.TargetDashboard TargeDashboard = new Ordermanagement_01.TargetDashboard(Order_Target, Time_Zone, OrderViewType, 2, int.Parse(grd_Rework_Scoreboard.Rows[e.RowIndex].Cells[3].Value.ToString()), TAT, score_board, header_Pending, dtp_Rework.Text, userid, User_Role_Id, "Rework");
                TargeDashboard.Show();
            }
            else if (e.ColumnIndex == 4)
            {
                Ordermanagement_01.TargetDashboard TargeDashboard = new Ordermanagement_01.TargetDashboard(Order_Target, Time_Zone, OrderViewType, 3, int.Parse(grd_Rework_Scoreboard.Rows[e.RowIndex].Cells[3].Value.ToString()), TAT, score_board, header_Pending, dtp_Rework.Text, userid, User_Role_Id, "Rework");
                TargeDashboard.Show();
            }
        }

        private void btn_Rework_Date_Submit_Click(object sender, EventArgs e)
        {
            Rework_Scoreboard();
        }

        private void Rework_Scoreboard()
        {
            DateTime d1 = DateTime.Now;
            d1 = d1.AddDays(-1);
            Hashtable ht_Score = new Hashtable();
            System.Data.DataTable dt_Score = new System.Data.DataTable();

            if (dtp_Rework.Text == "")
            {
                datescoredate = DateTime.Now;
                ht_Score.Add("@Date", datescoredate);
            }
            else
            {
                Score_Board_Date = dtp_Rework.Text;
                ht_Score.Add("@Date", Score_Board_Date.ToString());
            }
            ht_Score.Add("@Trans", "Current_Date");

            dt_Score = dataaccess.ExecuteSP("Sp_Rework_Score_Board", ht_Score);
            if (dt_Score.Rows.Count > 0)
            {
                grd_Rework_Scoreboard.Rows.Clear();
                for (int i = 0; i < dt_Score.Rows.Count; i++)
                {
                    grd_Rework_Scoreboard.AutoGenerateColumns = false;
                    grd_Rework_Scoreboard.Rows.Add();
                    grd_Rework_Scoreboard.Rows[i].Cells[0].Value = i + 1;
                    grd_Rework_Scoreboard.Rows[i].Cells[1].Value = dt_Score.Rows[i]["User_Name"].ToString();
                    grd_Rework_Scoreboard.Rows[i].Cells[2].Value = dt_Score.Rows[i]["Count_Orders"].ToString();
                    grd_Rework_Scoreboard.Rows[i].Cells[3].Value = dt_Score.Rows[i]["User_id"].ToString();
                    grd_Rework_Scoreboard.Rows[i].Cells[4].Value = dt_Score.Rows[i]["Others"].ToString();
                    grd_Rework_Scoreboard.Rows[i].Cells[5].Value = dt_Score.Rows[i]["Total"].ToString();

                    System.Windows.Forms.Application.DoEvents();
                }

            }
            grd_Rework_Scoreboard.ColumnHeadersDefaultCellStyle.BackColor = Color.SlateGray;
            grd_Rework_Scoreboard.EnableHeadersVisualStyles = false;
            grd_Rework_Scoreboard.ColumnHeadersDefaultCellStyle.ForeColor = Color.WhiteSmoke;
        }

        private void Load_Grd_Rework_My_User_Production_Report()
        {
            //rmyreport
            if (trw_Rework_Myreport.SelectedNode.Text == "")
            {
                // MessageBox.Show("Enter From and To date Properly");
            }
            else if (trw_Rework_Myreport.SelectedNode.Text != "")
            {

                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;
                DateTime fromdate = Convert.ToDateTime(dtp_MyFromdate.Text, usDtfi);
                DateTime Todate = Convert.ToDateTime(dtp_MyTodate.Text, usDtfi);
                if (fromdate <= Todate)
                {
                    int orderid = 0;
                    int Clientid = 0;
                    int SubProcessid = 0;
                    int Userid = 0;
                    int Status = 0;
                    int ProgressId = 0;
                    // dbc.BindOrder1(ddl_OrderNumber);
                    if (ddl_Rework_Orderno.SelectedIndex != 0 & ddl_Rework_Orderno.SelectedIndex != -1)
                    {
                        orderid = int.Parse(ddl_Rework_Orderno.SelectedValue.ToString());
                    }
                    if (ddl_MyClient.SelectedIndex != 0)
                    {
                        Clientid = int.Parse(ddl_MyClient.SelectedValue.ToString());
                    }
                    if (ddl_MySubprocess.SelectedIndex != -1)
                    {
                        SubProcessid = int.Parse(ddl_MySubprocess.SelectedValue.ToString());
                    }
                    if (ddl_Rework_MyUsername.SelectedIndex != 0)
                    {
                        Userid = int.Parse(ddl_Rework_MyUsername.SelectedValue.ToString());
                    }
                    if (ddl_Rework_MyStatus.SelectedIndex != 0)
                    {
                        ProgressId = int.Parse(ddl_Rework_MyStatus.SelectedValue.ToString());
                    }
                    if (ddl_MyTask.SelectedIndex != 0)
                    {
                        Status = int.Parse(ddl_MyTask.SelectedValue.ToString());
                    }

                    ht.Clear();
                    dt.Clear();
                    dtuserexport.Clear();
                    if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {

                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "All");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);

                            ht.Add("@User_Id", Userid);
                            ht.Add("@Log_In_Userid", Loged_In_User_Id);

                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {


                            //rptDoc = new Reports.CrystalReport.User_Production_ReportNew();
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "All");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", 0);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {

                            ht.Add("@Trans", "User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);

                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {


                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SELECT_USER_WISE");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }

                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {


                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Progress_ID_And_Used_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Progress_ID_And_Used_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }

                    }

                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Status_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Status_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }

                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Status_ID_and_User_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Status_ID_and_User_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Status_ID_and_Progress_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Status_ID_and_Progress_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }

                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Status_ID_and_Progress_Id_And_UserID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Status_ID_and_Progress_Id_And_UserID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Progress_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Progress_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Status_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                            dt = dataaccess.ExecuteSP("Sp_Rpt_User_Order_TimeManagement", ht);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Status_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {

                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Progress_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Progress_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Status_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Status_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Status_ID_and_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID_and_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Status_ID_and_Progress_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID_and_Progress_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Progress_ID_And_User_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Progress_ID_And_User_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Status_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Status_ID_And_User_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID_And_User_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Status_ID_And_Progress_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID_And_Progress_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Status_ID_And_Progress_Id_and_User_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID_And_Progress_Id_and_User_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }



                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_User_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_User_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id_and_User_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id_and_User_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_User_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_User_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id_and_user_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id_and_user_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }

                    if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                    {

                        dt = dataaccess.ExecuteSP("Sp_Rework_User_Order_TimeManagement", ht);
                        dtuserexport = dt;
                    }
                    else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                    {



                        cr_Rework_ReportsViewer.ReportSource = rptDoc;


                    }
                    //Grd_OrderTime.ColumnHeadersDefaultCellStyle.BackColor = System.Drawing.Color.DarkSlateGray;
                    //Grd_OrderTime.EnableHeadersVisualStyles = false;
                    //Grd_OrderTime.ColumnHeadersDefaultCellStyle.ForeColor = System.Drawing.Color.WhiteSmoke;
                    if (dt.Rows.Count > 0)
                    {


                        grd_Rework_MyReport.DataSource = null;
                        grd_Rework_MyReport.AutoGenerateColumns = false;

                        grd_Rework_MyReport.ColumnCount = 17;
                        grd_Rework_MyReport.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Ebrima", 7.75F, FontStyle.Bold);
                        grd_Rework_MyReport.ColumnHeadersHeight = 40;


                        //grd_Rework_MyReport.Rows.Add();
                        grd_Rework_MyReport.Columns[0].Name = "SNo";
                        grd_Rework_MyReport.Columns[0].HeaderText = "SL.NO";
                        grd_Rework_MyReport.Columns[0].Width = 50;

                        grd_Rework_MyReport.Columns[1].Name = "ProductionDate";
                        grd_Rework_MyReport.Columns[1].HeaderText = "PRODUCTION DATE";
                        grd_Rework_MyReport.Columns[1].DataPropertyName = "Production_Date";
                        grd_Rework_MyReport.Columns[1].Width = 140;


                        //visible code
                        //grd_Rework_MyReport.Columns[3].Name = "OrderNumber";
                        //grd_Rework_MyReport.Columns[3].HeaderText = "ORDER_NUMBER";
                        //grd_Rework_MyReport.Columns[3].DataPropertyName = "Client_Order_Number";
                        //grd_Rework_MyReport.Columns[3].Width = 195;
                        //grd_Rework_MyReport.Columns[3].Visible = false;
                        //original code
                        DataGridViewLinkColumn Order_link = new DataGridViewLinkColumn();
                        grd_Rework_MyReport.Columns.Add(Order_link);
                        Order_link.Name = "OrderNumber";
                        Order_link.HeaderText = "ORDER NUMBER";
                        Order_link.DataPropertyName = "Client_Order_Number";
                        Order_link.Width = 195;
                        Order_link.DisplayIndex = 2;



                        if (User_Role_Id == "1")
                        {
                            grd_Rework_MyReport.Columns[2].Name = "Client";
                            grd_Rework_MyReport.Columns[2].HeaderText = "CLIENT NAME";
                            grd_Rework_MyReport.Columns[2].DataPropertyName = "Client_Name";
                            grd_Rework_MyReport.Columns[2].Width = 125;

                            grd_Rework_MyReport.Columns[3].Name = "SubProcess";
                            grd_Rework_MyReport.Columns[3].HeaderText = "SUB PROCESS";
                            grd_Rework_MyReport.Columns[3].DataPropertyName = "Sub_ProcessName";
                            grd_Rework_MyReport.Columns[3].Width = 250;
                        }
                        else
                        {

                            grd_Rework_MyReport.Columns[2].Name = "Client_Number";
                            grd_Rework_MyReport.Columns[2].HeaderText = "CLIENT NAME";
                            grd_Rework_MyReport.Columns[2].DataPropertyName = "Client_Number";
                            grd_Rework_MyReport.Columns[2].Width = 125;

                            grd_Rework_MyReport.Columns[3].Name = "Subprocess_Number";
                            grd_Rework_MyReport.Columns[3].HeaderText = "SUB PROCESS";
                            grd_Rework_MyReport.Columns[3].DataPropertyName = "Subprocess_Number";
                            grd_Rework_MyReport.Columns[3].Width = 250;
                        }

                        grd_Rework_MyReport.Columns[4].Name = "OrderType";
                        grd_Rework_MyReport.Columns[4].HeaderText = "ORDER TYPE";
                        grd_Rework_MyReport.Columns[4].DataPropertyName = "Order_Type";
                        grd_Rework_MyReport.Columns[4].Width = 180;

                        grd_Rework_MyReport.Columns[5].Name = "OrderStatus";
                        grd_Rework_MyReport.Columns[5].HeaderText = "ORDER STATUS";
                        grd_Rework_MyReport.Columns[5].DataPropertyName = "Task";
                        grd_Rework_MyReport.Columns[5].Width = 150;


                        grd_Rework_MyReport.Columns[6].Name = "UserName";
                        grd_Rework_MyReport.Columns[6].HeaderText = "USER NAME";
                        grd_Rework_MyReport.Columns[6].DataPropertyName = "User_Name";
                        grd_Rework_MyReport.Columns[6].Width = 125;

                        grd_Rework_MyReport.Columns[7].Name = "empcode";
                        grd_Rework_MyReport.Columns[7].HeaderText = "EMP CODE";
                        grd_Rework_MyReport.Columns[7].DataPropertyName = "DRN_Emp_Code";
                        grd_Rework_MyReport.Columns[7].Width = 125;

                        grd_Rework_MyReport.Columns[8].Name = "jobrole";
                        grd_Rework_MyReport.Columns[8].HeaderText = "JOB ROLE";
                        grd_Rework_MyReport.Columns[8].DataPropertyName = "Emp_Job_Role";
                        grd_Rework_MyReport.Columns[8].Width = 125;

                        grd_Rework_MyReport.Columns[9].Name = "shifttypename";
                        grd_Rework_MyReport.Columns[9].HeaderText = "SHIFT";
                        grd_Rework_MyReport.Columns[9].DataPropertyName = "Shift_Type_Name";
                        grd_Rework_MyReport.Columns[9].Width = 125;

                        grd_Rework_MyReport.Columns[10].Name = "reporitngto1";
                        grd_Rework_MyReport.Columns[10].HeaderText = "REPORTING TO 1";
                        grd_Rework_MyReport.Columns[10].DataPropertyName = "Reproting_To_1";
                        grd_Rework_MyReport.Columns[10].Width = 125;

                        grd_Rework_MyReport.Columns[11].Name = "reporitngto2";
                        grd_Rework_MyReport.Columns[11].HeaderText = "REPORTING TO 2";
                        grd_Rework_MyReport.Columns[11].DataPropertyName = "Reproting_To_2";
                        grd_Rework_MyReport.Columns[11].Width = 125;



                        grd_Rework_MyReport.Columns[12].Name = "Status";
                        grd_Rework_MyReport.Columns[12].HeaderText = "PROGRESS STATUS";
                        grd_Rework_MyReport.Columns[12].DataPropertyName = "Order_Status";
                        grd_Rework_MyReport.Columns[12].Width = 150;

                        grd_Rework_MyReport.Columns[13].Name = "StartTime";
                        grd_Rework_MyReport.Columns[13].HeaderText = "START TIME";
                        grd_Rework_MyReport.Columns[13].DataPropertyName = "Start_Time";
                        grd_Rework_MyReport.Columns[13].Width = 120;

                        grd_Rework_MyReport.Columns[14].Name = "EndTime";
                        grd_Rework_MyReport.Columns[14].HeaderText = "END TIME";
                        grd_Rework_MyReport.Columns[14].DataPropertyName = "End_Time";
                        grd_Rework_MyReport.Columns[14].Width = 120;

                        grd_Rework_MyReport.Columns[15].Name = "TotalTime";
                        grd_Rework_MyReport.Columns[15].HeaderText = "TOTAL TIME";
                        grd_Rework_MyReport.Columns[15].DataPropertyName = "Total_Time";
                        grd_Rework_MyReport.Columns[15].Width = 100;

                        grd_Rework_MyReport.Columns[16].Name = "OrderId";
                        grd_Rework_MyReport.Columns[16].HeaderText = "Order Id";
                        grd_Rework_MyReport.Columns[16].DataPropertyName = "Order_ID";
                        grd_Rework_MyReport.Columns[16].Visible = false;
                        grd_Rework_MyReport.DataSource = dt;
                        //  }


                    }
                    else
                    {
                        grd_Rework_MyReport.Visible = true;
                        grd_Rework_MyReport.DataSource = null;


                    }


                }
                else
                {

                }
                for (int i = 0; i < grd_Rework_MyReport.Rows.Count; i++)
                {
                    grd_Rework_MyReport.Rows[i].Cells[0].Value = i + 1;
                }
            }

        }

        private void Load_Grd_Rework_All_User_Production_Report()
        {
            //ur
            if (trw_Rework_Report.SelectedNode.Text == "")
            {
                // MessageBox.Show("Enter From and To date Properly");
            }
            else if (trw_Rework_Report.SelectedNode.Text != "")
            {

                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;
                DateTime fromdate1 = Convert.ToDateTime(dtp_Rework_Fromdate.Text, usDtfi);
                DateTime Todate1 = Convert.ToDateTime(dtp_Rework_Todate.Text, usDtfi);

                string fromdate = dtp_Rework_Fromdate.Text;
                string Todate = dtp_Rework_Todate.Text;
                if (fromdate1 <= Todate1)
                {
                    int orderid = 0;
                    int Clientid = 0;
                    int SubProcessid = 0;
                    int Userid = 0;
                    int Status = 0;
                    int ProgressId = 0;
                    // dbc.BindOrder1(ddl_OrderNumber);
                    if (ddl_Rework_AllOrderno.SelectedIndex != 0 & ddl_Rework_AllOrderno.SelectedIndex != -1)
                    {
                        orderid = int.Parse(ddl_Rework_AllOrderno.SelectedValue.ToString());
                    }
                    if (ddl_Rework_client.SelectedIndex != 0)
                    {
                        Clientid = int.Parse(ddl_Rework_client.SelectedValue.ToString());
                    }
                    if (ddl_Rework_Subprocess.SelectedIndex != -1)
                    {
                        SubProcessid = int.Parse(ddl_Rework_Subprocess.SelectedValue.ToString());
                    }
                    if (ddl_Rework_Alluser.SelectedIndex != 0)
                    {
                        Userid = int.Parse(ddl_Rework_Alluser.SelectedValue.ToString());
                    }
                    if (ddl_Rework_AllStatus.SelectedIndex != 0)
                    {
                        ProgressId = int.Parse(ddl_Rework_AllStatus.SelectedValue.ToString());
                    }
                    if (ddl_Rework_Task.SelectedIndex != 0)
                    {
                        Status = int.Parse(ddl_Rework_Task.SelectedValue.ToString());
                    }

                    ht.Clear();
                    dt.Clear();
                    dtuserexport.Clear();

                    if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {

                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "All");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);

                            ht.Add("@User_Id", Userid);


                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {


                            //rptDoc = new Reports.CrystalReport.User_Production_ReportNew();
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "All");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", 0);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }





                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {

                            ht.Add("@Trans", "User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);

                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {


                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SELECT_USER_WISE");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }

                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {


                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Progress_ID_And_Used_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Progress_ID_And_Used_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                        }

                    }

                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Status_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Status_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }

                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Status_ID_and_User_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Status_ID_and_User_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Status_ID_and_Progress_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Status_ID_and_Progress_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }

                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Status_ID_and_Progress_Id_And_UserID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Status_ID_and_Progress_Id_And_UserID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Progress_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Progress_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Status_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                            dt = dataaccess.ExecuteSP("Sp_Rpt_User_Order_TimeManagement", ht);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Status_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {

                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Progress_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Progress_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Status_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Status_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Status_ID_and_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID_and_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Status_ID_and_Progress_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID_and_Progress_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Progress_ID_And_User_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Progress_ID_And_User_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Status_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Status_ID_And_User_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID_And_User_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Status_ID_And_Progress_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID_And_Progress_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Status_ID_And_Progress_Id_and_User_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID_And_Progress_Id_and_User_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_User_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_User_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id_and_User_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id_and_User_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_User_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_User_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id_and_user_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id_and_user_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                        }
                    }
                    if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                    {

                        dt = dataaccess.ExecuteSP("Sp_Rework_User_Order_TimeManagement", ht);
                        dtuserexport = dt;
                    }
                    else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                    {
                        cr_Rework_ReportsViewer.ReportSource = rptDoc;
                        lbl_All_report_notfound.Visible = false;
                    }
                    //Grd_OrderTime.ColumnHeadersDefaultCellStyle.BackColor = System.Drawing.Color.DarkSlateGray;
                    //Grd_OrderTime.EnableHeadersVisualStyles = false;
                    //Grd_OrderTime.ColumnHeadersDefaultCellStyle.ForeColor = System.Drawing.Color.WhiteSmoke;

                    if (dt.Rows.Count > 0)
                    {


                        grd_Rework_Reports.DataSource = null;
                        grd_Rework_Reports.AutoGenerateColumns = false;

                        grd_Rework_Reports.ColumnCount = 17;

                        grd_Rework_Reports.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Ebrima", 7.75F, FontStyle.Bold);
                        grd_Rework_Reports.ColumnHeadersHeight = 40;

                        //grd_Rework_Reports.Rows.Add();
                        grd_Rework_Reports.Columns[0].Name = "SNo";
                        grd_Rework_Reports.Columns[0].HeaderText = "SL.NO";
                        grd_Rework_Reports.Columns[0].Width = 50;

                        grd_Rework_Reports.Columns[1].Name = "ProductionDate";
                        grd_Rework_Reports.Columns[1].HeaderText = "PRODUCTION DATE";
                        grd_Rework_Reports.Columns[1].DataPropertyName = "Production_Date";
                        grd_Rework_Reports.Columns[1].Width = 140;


                        //visible code
                        //grd_Rework_Reports.Columns[3].Name = "OrderNumber";
                        //grd_Rework_Reports.Columns[3].HeaderText = "ORDER_NUMBER";
                        //grd_Rework_Reports.Columns[3].DataPropertyName = "Client_Order_Number";
                        //grd_Rework_Reports.Columns[3].Width = 195;
                        //grd_Rework_Reports.Columns[3].Visible = false;
                        //original code

                        DataGridViewLinkColumn Order_link = new DataGridViewLinkColumn();
                        grd_Rework_Reports.Columns.Add(Order_link);
                        Order_link.Name = "OrderNumber";
                        Order_link.HeaderText = "ORDER NUMBER";
                        Order_link.DataPropertyName = "Client_Order_Number";
                        Order_link.Width = 195;
                        Order_link.DisplayIndex = 2;

                        if (User_Role_Id == "1")
                        {
                            grd_Rework_Reports.Columns[2].Name = "Client";
                            grd_Rework_Reports.Columns[2].HeaderText = "CLIENT NAME";
                            grd_Rework_Reports.Columns[2].DataPropertyName = "Client_Name";
                            grd_Rework_Reports.Columns[2].Width = 125;

                            grd_Rework_Reports.Columns[3].Name = "SubProcess";
                            grd_Rework_Reports.Columns[3].HeaderText = "SUB PROCESS";
                            grd_Rework_Reports.Columns[3].DataPropertyName = "Sub_ProcessName";
                            grd_Rework_Reports.Columns[3].Width = 250;
                        }
                        else
                        {

                            grd_Rework_Reports.Columns[2].Name = "Client_Number";
                            grd_Rework_Reports.Columns[2].HeaderText = "CLIENT NAME";
                            grd_Rework_Reports.Columns[2].DataPropertyName = "Client_Number";
                            grd_Rework_Reports.Columns[2].Width = 125;

                            grd_Rework_Reports.Columns[3].Name = "Subprocess_Number";
                            grd_Rework_Reports.Columns[3].HeaderText = "SUB PROCESS";
                            grd_Rework_Reports.Columns[3].DataPropertyName = "Subprocess_Number";
                            grd_Rework_Reports.Columns[3].Width = 250;
                        }

                        grd_Rework_Reports.Columns[4].Name = "OrderType";
                        grd_Rework_Reports.Columns[4].HeaderText = "ORDER TYPE";
                        grd_Rework_Reports.Columns[4].DataPropertyName = "Order_Type";
                        grd_Rework_Reports.Columns[4].Width = 180;

                        grd_Rework_Reports.Columns[5].Name = "OrderStatus";
                        grd_Rework_Reports.Columns[5].HeaderText = "ORDER STATUS";
                        grd_Rework_Reports.Columns[5].DataPropertyName = "Task";
                        grd_Rework_Reports.Columns[5].Width = 150;


                        grd_Rework_Reports.Columns[6].Name = "UserName";
                        grd_Rework_Reports.Columns[6].HeaderText = "USER NAME";
                        grd_Rework_Reports.Columns[6].DataPropertyName = "User_Name";
                        grd_Rework_Reports.Columns[6].Width = 125;

                        grd_Rework_Reports.Columns[7].Name = "empcode";
                        grd_Rework_Reports.Columns[7].HeaderText = "EMP CODE";
                        grd_Rework_Reports.Columns[7].DataPropertyName = "DRN_Emp_Code";
                        grd_Rework_Reports.Columns[7].Width = 125;

                        grd_Rework_Reports.Columns[8].Name = "jobrole";
                        grd_Rework_Reports.Columns[8].HeaderText = "JOB ROLE";
                        grd_Rework_Reports.Columns[8].DataPropertyName = "Emp_Job_Role";
                        grd_Rework_Reports.Columns[8].Width = 125;

                        grd_Rework_Reports.Columns[9].Name = "shift";
                        grd_Rework_Reports.Columns[9].HeaderText = "SHIFT";
                        grd_Rework_Reports.Columns[9].DataPropertyName = "Shift_Type_Name";
                        grd_Rework_Reports.Columns[9].Width = 125;

                        grd_Rework_Reports.Columns[10].Name = "Reportingto1";
                        grd_Rework_Reports.Columns[10].HeaderText = "REPORTING TO 1";
                        grd_Rework_Reports.Columns[10].DataPropertyName = "Reproting_To_1";
                        grd_Rework_Reports.Columns[10].Width = 125;

                        grd_Rework_Reports.Columns[11].Name = "Reportingto2";
                        grd_Rework_Reports.Columns[11].HeaderText = "REPORTING TO 2";
                        grd_Rework_Reports.Columns[11].DataPropertyName = "Reproting_To_2";
                        grd_Rework_Reports.Columns[11].Width = 125;


                        grd_Rework_Reports.Columns[12].Name = "Status";
                        grd_Rework_Reports.Columns[12].HeaderText = "PROGRESS STATUS";
                        grd_Rework_Reports.Columns[12].DataPropertyName = "Order_Status";
                        grd_Rework_Reports.Columns[12].Width = 150;

                        grd_Rework_Reports.Columns[13].Name = "StartTime";
                        grd_Rework_Reports.Columns[13].HeaderText = "START TIME";
                        grd_Rework_Reports.Columns[13].DataPropertyName = "Start_Time";
                        grd_Rework_Reports.Columns[13].Width = 120;

                        grd_Rework_Reports.Columns[14].Name = "EndTime";
                        grd_Rework_Reports.Columns[14].HeaderText = "END TIME";
                        grd_Rework_Reports.Columns[14].DataPropertyName = "End_Time";
                        grd_Rework_Reports.Columns[14].Width = 120;

                        grd_Rework_Reports.Columns[15].Name = "TotalTime";
                        grd_Rework_Reports.Columns[15].HeaderText = "TOTAL TIME";
                        grd_Rework_Reports.Columns[15].DataPropertyName = "Total_Time";
                        grd_Rework_Reports.Columns[15].Width = 100;

                        grd_Rework_Reports.Columns[16].Name = "OrderId";
                        grd_Rework_Reports.Columns[16].HeaderText = "Order Id";
                        grd_Rework_Reports.Columns[16].DataPropertyName = "Order_ID";
                        grd_Rework_Reports.Columns[16].Visible = false;
                        grd_Rework_Reports.DataSource = dt;

                    }
                    else
                    {
                        grd_Rework_Reports.Visible = true;
                        grd_Rework_Reports.DataSource = null;
                        lbl_All_report_notfound.Visible = true;
                    }
                }
                else
                {

                }
                for (int i = 0; i < grd_Rework_Reports.Rows.Count; i++)
                {
                    grd_Rework_Reports.Rows[i].Cells[0].Value = i + 1;
                }
            }
            TimeSpan TotalHrs = new TimeSpan();
            TimeSpan TotalWorkedHrs = new TimeSpan();

        }

        private void btn_Rework_Myrefresh_Click(object sender, EventArgs e)
        {

            load_Progressbar.Start_progres();
            if (validate_My_Rework() != false)
            {
                if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
                {
                    First_report_Rework_Design();
                    cr_Rework_ReportsViewer.Visible = false;
                    grd_Rework_MyReport.Visible = true;
                    grd_Rework_MyReport.Columns.Clear();
                    Load_Grd_Rework_My_User_Production_Report();
                }
                else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
                {

                    First_report_Rework_Design();
                    grd_Rework_MyReport.Rows.Clear();
                    cr_Rework_ReportsViewer.Visible = false;
                    grd_Rework_MyReport.Visible = true;
                    grd_Rework_MyReport.Columns.Clear();
                    Load_Grd_Rework_My_User_Production_Report();

                }
                else if (trw_Rework_Myreport.SelectedNode.Text == "Orders Document List Report")
                {
                    Order_Document_list_Rework_design();
                    grd_Rework_MyReport.AutoGenerateColumns = true;
                    grd_Rework_MyReport.DataSource = null;
                    grd_Rework_MyReport.Visible = true;
                    cr_Rework_ReportsViewer.Visible = false;
                    Export_Title_Name = "Document_List_Report";
                    lbl_Rework_Myerrror.Visible = false;
                    Load_Order_Document_List_Rework_Report();
                }
                else if (trw_Rework_Myreport.SelectedNode.Text == "Orders Check List Report")
                {
                    Order_Chklist_Design();
                    grd_Rework_MyReport.AutoGenerateColumns = true;
                    grd_Rework_MyReport.DataSource = null;
                    lbl_Rework_Myerrror.Visible = false;
                    cr_Rework_ReportsViewer.Visible = true;
                    Load_Check_List_Rework_data();
                }
                else if (trw_Rework_Myreport.SelectedNode.Text == "Orders Error Info Report")
                {
                    grd_Rework_MyReport.DataSource = null;
                    grd_Rework_MyReport.Visible = true;
                    cr_Rework_ReportsViewer.Visible = false;
                    Export_Title_Name = "Error_Info_Report";
                    lbl_Rework_Myerrror.Visible = false;
                    Load_Orders_Error_Info_My_Rework_Report();

                }
                else
                {
                    cr_Rework_ReportsViewer.Visible = false;
                    grd_Rework_MyReport.Visible = false;
                    lbl_Rework_Myerrror.Visible = true;
                }
            }
        }

        private void Load_Orders_Error_Info_My_Rework_Report()
        {
            if (Validation_Myreport() != false)
            {

                DateTime Fromdate = Convert.ToDateTime(dtp_MyFromdate.Text.ToString());
                DateTime Todate = Convert.ToDateTime(dtp_MyTodate.Text.ToString());
                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;

                Hashtable ht_Status = new Hashtable();
                System.Data.DataTable dt_Status = new System.Data.DataTable();

                dt_Status.Rows.Clear();
                string From_Date = Fromdate.ToString("MM/dd/yyyy");
                string To_Date = Todate.ToString("MM/dd/yyyy");

                ht_Status.Clear();
                dt_Status.Clear();
                string Client, SubProcess;

                if (ddl_MyClient.SelectedIndex > 0)
                {

                    Client = ddl_MyClient.SelectedValue.ToString();
                }
                else
                {
                    Client = "ALL";
                }

                if (ddl_MySubprocess.SelectedIndex > 0)
                {
                    SubProcess = ddl_MySubprocess.SelectedValue.ToString();
                }
                else
                {
                    SubProcess = "ALL";
                }
                if (Client == "ALL")
                {
                    ht_Status.Add("@Trans", "SELECT_ERROR_DATE");
                    ht_Status.Add("@Fromdate", From_Date);
                    ht_Status.Add("@Todate", To_Date);
                    ht_Status.Add("@Work_Type", 2);
                    //ht_Status.Add("@Log_In_Userid", Loged_In_User_Id);
                    dt_Status = dataaccess.ExecuteSP("Sp_Rework_Rpt_Order_ErrorReport", ht_Status);
                }
                else if (Client != "ALL" && SubProcess == "ALL")
                {
                    ht_Status.Add("@Trans", "CLIENT_WISE");
                    ht_Status.Add("@Fromdate", From_Date);
                    ht_Status.Add("@Todate", To_Date);
                    ht_Status.Add("@Client_Id", Client);
                    ht_Status.Add("@Work_Type", 2);

                    dt_Status = dataaccess.ExecuteSP("Sp_Rework_Rpt_Order_ErrorReport", ht_Status);

                }
                else if (Client != "ALL" && SubProcess != "ALL")
                {
                    ht_Status.Add("@Trans", "CLIENT_SUB_PROCESS_WISE");

                    ht_Status.Add("@Fromdate", From_Date);
                    ht_Status.Add("@Todate", To_Date);
                    ht_Status.Add("@Client_Id", Client);
                    ht_Status.Add("@Sub_Process_Id", SubProcess);
                    ht_Status.Add("@Work_Type", 2);
                    dt_Status = dataaccess.ExecuteSP("Sp_Rework_Rpt_Order_ErrorReport", ht_Status);
                }

                dtuserexport.Clear();
                dtuserexport = dt_Status;
                if (dtuserexport.Rows.Count > 0)
                {
                    grd_Rework_MyReport.Rows.Clear();
                    grd_Rework_MyReport.Visible = true;
                    grd_Rework_MyReport.DataSource = null;
                    grd_Rework_MyReport.AutoGenerateColumns = false;

                    grd_Rework_MyReport.ColumnCount = 18;

                    grd_Rework_MyReport.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Ebrima", 7.75F, FontStyle.Bold);
                    grd_Rework_MyReport.ColumnHeadersHeight = 40;

                    grd_Rework_MyReport.Columns[0].Name = "Orderid";
                    grd_Rework_MyReport.Columns[0].HeaderText = "Order Id";
                    grd_Rework_MyReport.Columns[0].DataPropertyName = "Order_ID";
                    grd_Rework_MyReport.Columns[0].Width = 50;
                    grd_Rework_MyReport.Columns[0].Visible = false;

                    grd_Rework_MyReport.Columns[1].Name = "Client_Order_Number";
                    grd_Rework_MyReport.Columns[1].HeaderText = "Order_Number";
                    grd_Rework_MyReport.Columns[1].DataPropertyName = "Client Order Number";
                    grd_Rework_MyReport.Columns[1].Width = 140;

                    if (User_Role_Id == "1")
                    {
                        grd_Rework_MyReport.Columns[2].Name = "Client_Name";
                        grd_Rework_MyReport.Columns[2].HeaderText = "Client Name";
                        grd_Rework_MyReport.Columns[2].DataPropertyName = "Client";
                        grd_Rework_MyReport.Columns[2].Width = 120;

                        grd_Rework_MyReport.Columns[3].Name = "Sub_ProcessName";
                        grd_Rework_MyReport.Columns[3].HeaderText = "Subprocess Name";
                        grd_Rework_MyReport.Columns[3].DataPropertyName = "Subprocess";
                        grd_Rework_MyReport.Columns[3].Width = 300;

                    }
                    else
                    {

                        grd_Rework_MyReport.Columns[2].Name = "Client_Number";
                        grd_Rework_MyReport.Columns[2].HeaderText = "CLIENT NAME";
                        grd_Rework_MyReport.Columns[2].DataPropertyName = "Client_Number";
                        grd_Rework_MyReport.Columns[2].Width = 125;

                        grd_Rework_MyReport.Columns[3].Name = "Subprocess_Number";
                        grd_Rework_MyReport.Columns[3].HeaderText = "SUB PROCESS";
                        grd_Rework_MyReport.Columns[3].DataPropertyName = "Subprocess_Number";
                        grd_Rework_MyReport.Columns[3].Width = 250;
                    }

                    grd_Rework_MyReport.Columns[4].Name = "Order_Type";
                    grd_Rework_MyReport.Columns[4].HeaderText = "Order Type";
                    grd_Rework_MyReport.Columns[4].DataPropertyName = "Order Type";
                    grd_Rework_MyReport.Columns[4].Width = 300;

                    grd_Rework_MyReport.Columns[5].Name = "Error_Type";
                    grd_Rework_MyReport.Columns[5].HeaderText = "Error Type";
                    grd_Rework_MyReport.Columns[5].DataPropertyName = "Error Type";
                    grd_Rework_MyReport.Columns[5].Width = 150;

                    grd_Rework_MyReport.Columns[6].Name = "Error_description";
                    grd_Rework_MyReport.Columns[6].HeaderText = "Error Description";
                    grd_Rework_MyReport.Columns[6].DataPropertyName = "Error description";
                    grd_Rework_MyReport.Columns[6].Width = 200;

                    grd_Rework_MyReport.Columns[7].Name = "Comments";
                    grd_Rework_MyReport.Columns[7].HeaderText = "Comments";
                    grd_Rework_MyReport.Columns[7].DataPropertyName = "Comments";
                    grd_Rework_MyReport.Columns[7].Width = 200;

                    grd_Rework_MyReport.Columns[8].Name = "Error_On_Status";
                    grd_Rework_MyReport.Columns[8].HeaderText = "Error Status";
                    grd_Rework_MyReport.Columns[8].DataPropertyName = "Error On Status";
                    grd_Rework_MyReport.Columns[8].Width = 150;

                    grd_Rework_MyReport.Columns[9].Name = "Error_On_User_Name";
                    grd_Rework_MyReport.Columns[9].HeaderText = "Error User Name";
                    grd_Rework_MyReport.Columns[9].DataPropertyName = "Error On User Name";
                    grd_Rework_MyReport.Columns[9].Width = 150;

                    grd_Rework_MyReport.Columns[10].Name = "DRN_Emp_Code";
                    grd_Rework_MyReport.Columns[10].HeaderText = "DRN_Emp_Code";
                    grd_Rework_MyReport.Columns[10].DataPropertyName = "DRN_Emp_Code";
                    grd_Rework_MyReport.Columns[10].Width = 150;

                    grd_Rework_MyReport.Columns[11].Name = "Emp_Job_Role";
                    grd_Rework_MyReport.Columns[11].HeaderText = "Emp_Job_Role";
                    grd_Rework_MyReport.Columns[11].DataPropertyName = "Emp_Job_Role";
                    grd_Rework_MyReport.Columns[11].Width = 150;

                    grd_Rework_MyReport.Columns[12].Name = "Shift_Type_Name";
                    grd_Rework_MyReport.Columns[12].HeaderText = "Shift_Type_Name";
                    grd_Rework_MyReport.Columns[12].DataPropertyName = "Shift_Type_Name";
                    grd_Rework_MyReport.Columns[12].Width = 150;

                    grd_Rework_MyReport.Columns[13].Name = "Reporting_To_1";
                    grd_Rework_MyReport.Columns[13].HeaderText = "Reporting_To_1";
                    grd_Rework_MyReport.Columns[13].DataPropertyName = "Reporting_To_1";
                    grd_Rework_MyReport.Columns[13].Width = 150;

                    grd_Rework_MyReport.Columns[14].Name = "Reporting_To_2";
                    grd_Rework_MyReport.Columns[14].HeaderText = "Reporting_To_2";
                    grd_Rework_MyReport.Columns[14].DataPropertyName = "Reporting_To_2";
                    grd_Rework_MyReport.Columns[14].Width = 150;

                    grd_Rework_MyReport.Columns[15].Name = "Error_From_Status";
                    grd_Rework_MyReport.Columns[15].HeaderText = "QC Status";
                    grd_Rework_MyReport.Columns[15].DataPropertyName = "Error From Status";
                    grd_Rework_MyReport.Columns[15].Width = 150;

                    grd_Rework_MyReport.Columns[16].Name = "Error_Enter_By_Username";
                    grd_Rework_MyReport.Columns[16].HeaderText = "QC Username";
                    grd_Rework_MyReport.Columns[16].DataPropertyName = "Error From Username";
                    grd_Rework_MyReport.Columns[16].Width = 160;

                    grd_Rework_MyReport.Columns[17].Name = "Order_Production_Date";
                    grd_Rework_MyReport.Columns[17].HeaderText = "Production Date";
                    grd_Rework_MyReport.Columns[17].DataPropertyName = "Order Production Date";
                    grd_Rework_MyReport.Columns[17].Width = 120;

                    grd_Rework_MyReport.DataSource = dt_Status;
                    lbl_Record_notfound.Visible = false;
                }
                else
                {
                    grd_Rework_MyReport.Rows.Clear();
                    grd_Rework_MyReport.Visible = false;
                    grd_Rework_MyReport.DataSource = null;
                    lbl_Record_notfound.Visible = true;
                    lbl_Record_notfound.Text = "Nor Error Data Record Found";
                }
            }
        }

        private void btn_Rework_Myexport_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            Export_Rework_Wise_ReportData();

        }

        private void Export_Rework_Wise_ReportData()
        {
            System.Data.DataTable dt = new System.Data.DataTable();

            //Adding the Columns
            foreach (DataGridViewColumn column in grd_Rework_MyReport.Columns)
            {
                if (column.HeaderText != "")
                {
                    if (column.ValueType == null)
                    {
                        dt.Columns.Add(column.HeaderText, typeof(string));
                    }
                    else
                    {
                        if (column.ValueType == typeof(int))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(int));

                        }
                        else if (column.ValueType == typeof(decimal))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(decimal));

                        }
                        else if (column.ValueType == typeof(DateTime))
                        {

                            dt.Columns.Add(column.HeaderText, typeof(string));
                        }
                        else
                        {
                            dt.Columns.Add(column.HeaderText, column.ValueType);
                        }
                    }
                }

            }
            //Adding the Rows
            foreach (DataGridViewRow row in grd_Rework_MyReport.Rows)
            {
                dt.Rows.Add();
                foreach (DataGridViewCell cell in row.Cells)
                {
                    if (cell.Value != null && cell.Value.ToString() != "")
                    {
                        dt.Rows[dt.Rows.Count - 1][cell.ColumnIndex] = cell.Value.ToString();
                    }
                }
            }
            //Exporting to Excel
            string folderPath = "C:\\Temp\\";
            Path1 = folderPath + DateTime.Now.ToString("dd-MM-yyyy-hh-mm-ss") + "Rework_Production.xlsx";
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }
            using (XLWorkbook wb = new XLWorkbook())
            {
                wb.Worksheets.Add(dt, "Rework Production Report");
                try
                {
                    wb.SaveAs(Path1);
                }
                catch (Exception ex)
                {
                    MessageBox.Show("File is Opened, Please Close and Export it");
                }
            }
            System.Diagnostics.Process.Start(Path1);
        }

        private void trw_Rework_Myreport_AfterSelect(object sender, TreeViewEventArgs e)
        {
            //lbl_Rework_My_Heder.Text = trw_Rework_Myreport.SelectedNode.Text;
            AddParent_Rework_All_report();
            grd_Rework_MyReport.DataSource = null;
            grd_Rework_MyReport.Refresh();
            if (User_Role_Id == "1")
            {
                dbc.Bind_UserClient_rpt(ddl_MyClient, Loged_In_User_Id);
            }
            else
            {
                dbc.Bind_UserClient_Number_rpt(ddl_MyClient, Loged_In_User_Id);
                // dbc.Bind_UserClient_Number_rpt_1(ddl_MyClient, Loged_In_User_Id);
            }
            lbl_User_summary.Visible = false;

            if (ddl_Client_name.Text == "")
            {
                lbl_User_summary.Visible = true;
            }

            if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
            {
                First_report_Rework_Design();
            }
            else if (trw_Rework_Myreport.SelectedNode.Text == "User Production Count")
            {

                First_report_Rework_Design();
            }
            else if (trw_Rework_Myreport.SelectedNode.Text == "Orders Document List Report")
            {
                Order_Document_list_Rework_design();

            }
            else if (trw_Rework_Myreport.SelectedNode.Text == "Orders Check List Report")
            {
                Order_Chklist_Rework_Design();

            }
            else if (trw_Rework_Myreport.SelectedNode.Text == "Orders Error Info Report")
            {
                OrderError_Rework_Design();
            }

        }

        private void btn_Rework_Refresh_Click(object sender, EventArgs e)
        {
            // mm
            load_Progressbar.Start_progres();
            //clsLoader.startProgress();
            if (validate_All_Rework() != false)
            {
                if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
                {
                    Load_Grd_Rework_All_User_Production_Report();
                }
                else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
                {
                    Load_Grd_Rework_All_User_Production_Report();
                }
                else if (trw_Rework_Report.SelectedNode.Text == "Orders Document List Report")
                {
                    Export_Title_Name = "Document_List_Report";
                    lbl_Rework_Myerrror.Visible = false;

                    Load_Order_Document_List_Rework_All_Report();
                }
                else if (trw_Rework_Report.SelectedNode.Text == "Orders Check List Report")
                {
                    Load_Check_List_Rework_data();
                }
                else if (trw_Rework_Report.SelectedNode.Text == "Orders Error Info Report")
                {
                    Load_Orders_Error_Info_Rework_Report();
                }
                else
                {
                    cr_Rework_ReportsViewer.Visible = false;
                    grd_Rework_MyReport.Visible = false;
                    lbl_Rework_Myerrror.Visible = true;
                }
            }
        }

        private void tabControl4_SelectedIndexChanged(object sender, EventArgs e)
        {

            dtp_Rework.Value = DateTime.Now;
            dtp_Rework_Fromdate.Value = DateTime.Now;
            dtp_Rework_Todate.Value = DateTime.Now;
            dtp_MyTodate.Value = DateTime.Now;
            dtp_MyFromdate.Value = DateTime.Now;
            if (tabControl4.SelectedIndex == 1)
            {
                if (User_Role_Id == "1")
                {
                    dbc.BindClientName_rpt(ddl_Rework_client);
                }
                else
                {
                    dbc.BindClientName_For_Employee(ddl_Rework_client);

                }
                dbc.BindUserName(ddl_Rework_Alluser);

                dbc.Bind_Order_Progress_rpt(ddl_Rework_AllStatus);
                //ddl_Rework_AllStatus
                dbc.BindOrderStatusRpt_For_Check_list(ddl_Rework_Task);
                AddParent_Rework_All_report();

                ddl_Rework_client_SelectedIndexChanged(sender, e);
            }
            else if (tabControl4.SelectedIndex == 2)
            {

                dbc.BindUserName_Rpt(ddl_Rework_MyUsername);
                dbc.BindOrderStatusRpt(ddl_Rework_AllStatus);
                dbc.Bind_Order_Progress_rpt(ddl_Rework_MyStatus);

                AddParent_Rework_report();
                dbc.BindOrderStatusRpt_For_Check_list(ddl_MyTask);
                if (User_Role_Id == "1")
                {
                    dbc.Bind_UserClient_rpt(ddl_MyClient, Loged_In_User_Id);
                }
                else
                {

                    dbc.Bind_UserClient_Number_rpt(ddl_MyClient, Loged_In_User_Id);
                    // dbc.Bind_UserClient_Number_rpt_1(ddl_MyClient, Loged_In_User_Id);
                }

                ddl_MyClient_SelectedIndexChanged(sender, e);
            }

        }

        private void First_All_report_Rework_Design()
        {
            lbl_All_Rework_client.Visible = true;
            ddl_Rework_client.Visible = true;

            lbl_All_Rework_Subpro.Visible = true;
            ddl_Rework_Subprocess.Visible = true;

            lbl_All_Rework_Task.Visible = true;
            ddl_Rework_Task.Visible = true;

            lbl_All_Rework_user.Visible = true;
            ddl_Rework_Alluser.Visible = true;

            lbl_All_Rework_Status.Visible = true;
            ddl_Rework_AllStatus.Visible = true;

            lbl_All_rework_orderno.Visible = true;
            ddl_Rework_AllOrderno.Visible = true;
            lbl_All_report_notfound.Visible = false;
            if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
            {
                grd_Rework_Reports.Visible = true;
                cr_Rework_AllReportsViewer.Visible = false;
            }
            else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
            {
                grd_Rework_Reports.Visible = false;
                cr_Rework_AllReportsViewer.Visible = true;
            }
        }

        private void Order_Document_list_All_Rework_design()
        {

            lbl_All_Rework_client.Visible = true;
            ddl_Rework_client.Visible = true;

            lbl_All_Rework_Subpro.Visible = false;
            ddl_Rework_Subprocess.Visible = false;

            lbl_All_Rework_Task.Visible = false;
            ddl_Rework_Task.Visible = false;

            lbl_All_Rework_user.Visible = false;
            ddl_Rework_Alluser.Visible = false;

            lbl_All_Rework_Status.Visible = false;
            ddl_Rework_AllStatus.Visible = false;

            lbl_All_rework_orderno.Visible = false;
            ddl_Rework_AllOrderno.Visible = false;

            lbl_All_report_notfound.Visible = false;

            grd_Rework_Reports.Visible = true;
            cr_Rework_AllReportsViewer.Visible = false;
        }

        private void All_Rework_checklist_design()
        {

            lbl_All_Rework_client.Visible = true;
            ddl_Rework_client.Visible = true;

            lbl_All_Rework_Subpro.Visible = true;
            ddl_Rework_Subprocess.Visible = true;

            lbl_All_Rework_Task.Visible = false;
            ddl_Rework_Task.Visible = false;

            lbl_All_Rework_user.Visible = false;
            ddl_Rework_Alluser.Visible = false;

            lbl_All_Rework_Status.Visible = false;
            ddl_Rework_AllStatus.Visible = false;

            lbl_All_rework_orderno.Visible = false;
            ddl_Rework_AllOrderno.Visible = false;

            lbl_All_report_notfound.Visible = false;

            grd_Rework_Reports.Visible = false;
            cr_Rework_AllReportsViewer.Visible = true;
        }

        private void Order_Error_All_Rework_Report()
        {
            lbl_All_Rework_client.Visible = true;
            ddl_Rework_client.Visible = true;

            lbl_All_Rework_Subpro.Visible = true;
            ddl_Rework_Subprocess.Visible = true;

            lbl_All_Rework_Task.Visible = false;
            ddl_Rework_Task.Visible = false;

            lbl_All_Rework_user.Visible = false;
            ddl_Rework_Alluser.Visible = false;

            lbl_All_Rework_Status.Visible = false;
            ddl_Rework_AllStatus.Visible = false;

            lbl_All_rework_orderno.Visible = false;
            ddl_Rework_AllOrderno.Visible = false;

            lbl_All_report_notfound.Visible = false;

            grd_Rework_Reports.Visible = true;
            cr_Rework_AllReportsViewer.Visible = false;
        }

        private void trw_Rework_Report_AfterSelect(object sender, TreeViewEventArgs e)
        {
            //lbl_Rework_All_Header.Text = trw_Rework_Report.SelectedNode.Text;
            grd_My_Reports.DataSource = null;

            grd_My_Reports.Refresh();

            lbl_User_summary.Visible = false;

            if (User_Role_Id == "1")
            {
                dbc.BindClientName_rpt(ddl_Rework_client);
            }
            else
            {
                dbc.BindClientName_For_Employee(ddl_Rework_client);
            }
            if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
            {
                First_All_report_Rework_Design();

                grd_Rework_Reports.Visible = true;
                grd_Rework_Reports.DataSource = null;
                cr_Rework_AllReportsViewer.Visible = false;
            }

            else if (trw_Rework_Report.SelectedNode.Text == "User Production Count")
            {

                First_All_report_Rework_Design();
                grd_Rework_Reports.Visible = true;
                grd_Rework_Reports.DataSource = null;
                cr_Rework_AllReportsViewer.Visible = false;
            }
            else if (trw_Rework_Report.SelectedNode.Text == "Orders Document List Report")
            {

                Order_Document_list_All_Rework_design();
                // grd_Rework_Reports.Rows.Clear();
                cr_Rework_AllReportsViewer.Visible = false;
                grd_Rework_Reports.Visible = true;
                grd_Rework_Reports.Columns.Clear();
            }
            else if (trw_Rework_Report.SelectedNode.Text == "Orders Check List Report")
            {
                All_Rework_checklist_design();

                cr_Rework_AllReportsViewer.Visible = true;
                grd_Rework_Reports.Visible = false;

                grd_Rework_Reports.Columns.Clear();
            }
            else if (trw_Rework_Report.SelectedNode.Text == "Orders Error Info Report")
            {
                Order_Error_All_Rework_Report();
                grd_Rework_Reports.Visible = true;
                cr_Rework_AllReportsViewer.Visible = false;

                grd_Rework_Reports.Columns.Clear();
            }
        }

        private void treeView3_AfterSelect(object sender, TreeViewEventArgs e)
        {

        }

        private void ddl_Rework_client_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ddl_Rework_client.SelectedIndex != 0)
            {
                int clientid = int.Parse(ddl_Rework_client.SelectedValue.ToString());
                if (User_Role_Id == "1")
                {
                    dbc.BindSubProcessName_rpt(ddl_Rework_Subprocess, clientid);
                }
                else
                {

                    dbc.BindSubProcessNumber(ddl_Rework_Subprocess, clientid);
                }
                ddl_Rework_Subprocess.Focus();
            }
            else
            {
                if (User_Role_Id == "1")
                {
                    dbc.BindSubProcessName_rpt(ddl_Rework_Subprocess, 0);
                }
                else
                {

                    dbc.BindSubProcessNumber(ddl_Rework_Subprocess, 0);
                }
            }
        }

        private void ddl_MyClient_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ddl_MyClient.SelectedIndex != 0 && ddl_MyClient.SelectedIndex != -1)
            {
                int clientid = int.Parse(ddl_MyClient.SelectedValue.ToString());
                if (User_Role_Id == "1")
                {
                    dbc.BindSubProcessName_rpt(ddl_MySubprocess, clientid);
                }
                else if (User_Role_Id == "2")
                {
                    dbc.BindSubProcessNumber(ddl_MySubprocess, clientid);

                }
                ddl_Rework_Subprocess.Focus();
            }
            else
            {
                if (User_Role_Id == "1")
                {
                    dbc.BindSubProcessName_rpt(ddl_MySubprocess, 0);
                }
                else
                {
                    dbc.BindSubProcessNumber(ddl_MySubprocess, 0);

                }
            }
        }

        private void First_All_report_Superqc_Design()
        {

            lbl_All_Superqc_client.Visible = true;
            ddl_Superqc_client.Visible = true;
            lbl_All_Superqc_Subpro.Visible = true;
            ddl_Superqc_AllStatus.Visible = true;
            lbl_All_Superqc_Task.Visible = true;
            ddl_Superqc_Task.Visible = true;
            lbl_All_Superqc_user.Visible = true;
            ddl_Superqc_Alluser.Visible = true;
            lbl_All_Superqc_Status.Visible = true;
            ddl_Superqc_Subprocess.Visible = true;
            lbl_All_Superqc_orderno.Visible = true;
            ddl_Superqc_AllOrderno.Visible = true;

            lbl_All_SuperqcRecordnotfound.Visible = false;
            if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
            {
                grd_All_SuperQc_Report.Visible = true;
                crv_All_Superqc.Visible = false;
            }
            else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
            {
                grd_All_SuperQc_Report.Visible = false;
                crv_All_Superqc.Visible = true;
            }
        }

        private void Order_Document_list_All_Superqc_design()
        {
            lbl_All_Superqc_client.Visible = true;
            ddl_Superqc_client.Visible = true;
            lbl_All_Superqc_Subpro.Visible = false;
            ddl_Superqc_AllStatus.Visible = false;
            lbl_All_Superqc_Task.Visible = false;
            ddl_Superqc_Task.Visible = false;
            lbl_All_Superqc_user.Visible = false;
            ddl_Superqc_Alluser.Visible = false;
            lbl_All_Superqc_Status.Visible = false;
            ddl_Superqc_Subprocess.Visible = false;
            lbl_All_Superqc_orderno.Visible = false;
            ddl_Superqc_AllOrderno.Visible = false;

            lbl_All_SuperqcRecordnotfound.Visible = false;

            grd_All_SuperQc_Report.Visible = true;
            crv_All_Superqc.Visible = false;
        }

        private void Order_All_Superqc_Chklist_Design()
        {
            lbl_All_Superqc_client.Visible = true;
            ddl_Superqc_client.Visible = true;
            lbl_All_Superqc_Subpro.Visible = true;
            ddl_Superqc_AllStatus.Visible = false;
            lbl_All_Superqc_Task.Visible = false;
            ddl_Superqc_Task.Visible = false;
            lbl_All_Superqc_user.Visible = false;
            ddl_Superqc_Alluser.Visible = false;
            lbl_All_Superqc_Status.Visible = false;
            ddl_Superqc_Subprocess.Visible = true;
            lbl_All_Superqc_orderno.Visible = false;
            ddl_Superqc_AllOrderno.Visible = false;

            lbl_All_SuperqcRecordnotfound.Visible = false;

            grd_All_SuperQc_Report.Visible = false;
            crv_All_Superqc.Visible = true;

        }

        private void Order_Error_All_Superqc_Report()
        {
            lbl_All_Superqc_client.Visible = true;
            ddl_Superqc_client.Visible = true;
            lbl_All_Superqc_Subpro.Visible = true;
            ddl_Superqc_AllStatus.Visible = false;
            lbl_All_Superqc_Task.Visible = false;
            ddl_Superqc_Task.Visible = false;
            lbl_All_Superqc_user.Visible = false;
            ddl_Superqc_Alluser.Visible = false;
            lbl_All_Superqc_Status.Visible = false;
            ddl_Superqc_Subprocess.Visible = true;
            lbl_All_Superqc_orderno.Visible = false;
            ddl_Superqc_AllOrderno.Visible = false;

            lbl_All_SuperqcRecordnotfound.Visible = false;

            grd_All_SuperQc_Report.Visible = true;
            crv_All_Superqc.Visible = false;


        }

        private void trw_All_SuperQc_AfterSelect(object sender, TreeViewEventArgs e)
        {
            grd_All_SuperQc_Report.DataSource = null;

            grd_All_SuperQc_Report.Refresh();
            //lbl_Super_Qc_All_Header.Text = trw_All_SuperQc.SelectedNode.Text;

            lbl_All_SuperqcRecordnotfound.Visible = false;

            if (User_Role_Id == "1")
            {
                dbc.BindClientName_rpt(ddl_Superqc_client);
            }
            else
            {
                dbc.BindClientName_For_Employee(ddl_Superqc_client);

            }



            if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
            {
                First_All_report_Superqc_Design();
            }

            else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
            {
                First_All_report_Superqc_Design();
            }
            else if (trw_All_SuperQc.SelectedNode.Text == "Orders Document List Report")
            {
                Order_Document_list_All_Superqc_design();
            }
            else if (trw_All_SuperQc.SelectedNode.Text == "Orders Check List Report")
            {
                Order_All_Superqc_Chklist_Design();
            }
            else if (trw_All_SuperQc.SelectedNode.Text == "Orders Error Info Report")
            {
                Order_Error_All_Superqc_Report();

            }
        }

        public void Load_Order_Document_List_Superqc_My_Report()
        {
            if (Validation_All_Superqc_report() != false)
            {
                DateTime Fromdate = Convert.ToDateTime(dtp_Rework_Fromdate.Text.ToString());
                DateTime Todate = Convert.ToDateTime(dtp_Rework_Todate.Text.ToString());


                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;


                Hashtable ht_Status = new Hashtable();
                System.Data.DataTable dt_Status = new System.Data.DataTable();

                dt_Status.Rows.Clear();
                string From_Date = Fromdate.ToString("MM/dd/yyyy");
                string To_Date = Todate.ToString("MM/dd/yyyy");
                if (ddl_Rework_client.Text == "ALL")
                {
                    ht_Status.Add("@Trans", "SELECT_All");
                }
                else
                {
                    ht_Status.Add("@Trans", "SELECT_CLIENT_WISE");
                    ht_Status.Add("@Client_id", int.Parse(ddl_Rework_client.SelectedValue.ToString()));
                }
                ht_Status.Add("@From_date", From_Date);
                ht_Status.Add("@To_Date", To_Date);
                ht_Status.Add("@Work_Type_Id", 2);
                // ht_Status.Add("@Log_In_Userid", Loged_In_User_Id);

                dt_Status = dataaccess.ExecuteSP("Sp_Rework_rpt_Document_List", ht_Status);
                dtuserexport = dt_Status;
                if (dt_Status.Rows.Count > 0)
                {
                    grd_Rework_Reports.Visible = true;

                    grd_Rework_Reports.Columns.Clear();
                    grd_Rework_Reports.DataSource = null;
                    grd_Rework_Reports.AutoGenerateColumns = true;
                    grd_Rework_Reports.Refresh();


                    grd_Rework_Reports.ColumnCount = 17;
                    //grd_My_Reports.Rows.Add();
                    grd_Rework_Reports.Columns[0].Name = "Order_ID";
                    grd_Rework_Reports.Columns[0].HeaderText = "Order_ID";
                    grd_Rework_Reports.Columns[0].DataPropertyName = "Order_ID";
                    grd_Rework_Reports.Columns[0].Width = 50;
                    grd_Rework_Reports.Columns[0].Visible = false;

                    grd_Rework_Reports.Columns[1].Name = "Order_Number";
                    grd_Rework_Reports.Columns[1].HeaderText = "Order_Number";
                    grd_Rework_Reports.Columns[1].DataPropertyName = "Client_Order_Number";
                    grd_Rework_Reports.Columns[1].Width = 140;
                    //grd_My_Reports.Columns[1].Visible = false;

                    //DataGridViewLinkColumn client_order = new DataGridViewLinkColumn();
                    //grd_My_Reports.Columns.Add(client_order);
                    //client_order.DisplayIndex = 1;
                    //client_order.Name = "Order_Number";
                    //client_order.HeaderText = "Order Number";
                    //client_order.DataPropertyName = "Client_Order_Number";
                    //client_order.Width = 140;


                    grd_Rework_Reports.Columns[2].Name = "Ref_number";
                    grd_Rework_Reports.Columns[2].HeaderText = "Ref number";
                    grd_Rework_Reports.Columns[2].DataPropertyName = "Client_Order_Ref";
                    grd_Rework_Reports.Columns[2].Width = 125;

                    grd_Rework_Reports.Columns[3].Name = "Date";
                    grd_Rework_Reports.Columns[3].HeaderText = "Recived Date";
                    grd_Rework_Reports.Columns[3].DataPropertyName = "Recived_Date";
                    grd_Rework_Reports.Columns[3].Width = 195;

                    grd_Rework_Reports.Columns[4].Name = "Client_name";
                    grd_Rework_Reports.Columns[4].HeaderText = "CLIENT NAME";
                    grd_Rework_Reports.Columns[4].DataPropertyName = "Client_Name";
                    grd_Rework_Reports.Columns[4].Width = 125;

                    grd_Rework_Reports.Columns[5].Name = "Sub_client";
                    grd_Rework_Reports.Columns[5].HeaderText = "SUB PROCESS";
                    grd_Rework_Reports.Columns[5].DataPropertyName = "Sub_ProcessName";
                    grd_Rework_Reports.Columns[5].Width = 250;

                    grd_Rework_Reports.Columns[6].Name = "Order_type";
                    grd_Rework_Reports.Columns[6].HeaderText = "ORDER TYPE";
                    grd_Rework_Reports.Columns[6].DataPropertyName = "Order_Type";
                    grd_Rework_Reports.Columns[6].Width = 180;

                    grd_Rework_Reports.Columns[7].Name = "Borrower_Name";
                    grd_Rework_Reports.Columns[7].HeaderText = "Borrower Name";
                    grd_Rework_Reports.Columns[7].DataPropertyName = "Borrower_Name";
                    grd_Rework_Reports.Columns[7].Width = 150;

                    grd_Rework_Reports.Columns[8].Name = "Address";
                    grd_Rework_Reports.Columns[8].HeaderText = "Barrower Address";
                    grd_Rework_Reports.Columns[8].DataPropertyName = "Address";
                    grd_Rework_Reports.Columns[8].Width = 150;

                    grd_Rework_Reports.Columns[9].Name = "Abbreviation";
                    grd_Rework_Reports.Columns[9].HeaderText = "Abbreviation";
                    grd_Rework_Reports.Columns[9].DataPropertyName = "Abbreviation";
                    grd_Rework_Reports.Columns[9].Width = 120;

                    grd_Rework_Reports.Columns[10].Name = "County";
                    grd_Rework_Reports.Columns[10].HeaderText = "COUNTY";
                    grd_Rework_Reports.Columns[10].DataPropertyName = "County";
                    grd_Rework_Reports.Columns[10].Width = 120;

                    grd_Rework_Reports.Columns[11].Name = "City";
                    grd_Rework_Reports.Columns[11].HeaderText = "City";
                    grd_Rework_Reports.Columns[11].DataPropertyName = "City";
                    grd_Rework_Reports.Columns[11].Width = 100;

                    grd_Rework_Reports.Columns[12].Name = "Order_Status";
                    grd_Rework_Reports.Columns[12].HeaderText = "Order Status";
                    grd_Rework_Reports.Columns[12].DataPropertyName = "Order_Status";
                    grd_Rework_Reports.Columns[12].Width = 100;

                    grd_Rework_Reports.Columns[13].Name = "Completed_Date";
                    grd_Rework_Reports.Columns[13].HeaderText = "Completed Date";
                    grd_Rework_Reports.Columns[13].DataPropertyName = "Completed_Date";
                    grd_Rework_Reports.Columns[13].Width = 100;

                    grd_Rework_Reports.Columns[14].Name = "User Name";
                    grd_Rework_Reports.Columns[14].HeaderText = "User Name";
                    grd_Rework_Reports.Columns[14].DataPropertyName = "User_Name";
                    grd_Rework_Reports.Columns[14].Width = 100;

                    grd_Rework_Reports.Columns[15].Name = "Production Date";
                    grd_Rework_Reports.Columns[15].HeaderText = "Production Date";
                    grd_Rework_Reports.Columns[15].DataPropertyName = "Order_Production_Date";
                    grd_Rework_Reports.Columns[15].Width = 100;

                    grd_Rework_Reports.Columns[16].Name = "Document List Name";
                    grd_Rework_Reports.Columns[16].HeaderText = "Document List Name";
                    grd_Rework_Reports.Columns[16].DataPropertyName = "Document_List_Name";
                    grd_Rework_Reports.Columns[16].Width = 100;

                    grd_Rework_Reports.Visible = true;
                    grd_Rework_Reports.DataSource = dt_Status;



                }
                else
                {
                    grd_Rework_Reports.Visible = false;
                    grd_Rework_Reports.DataSource = null;

                }

            }
        }

        private bool validate_All_Super_Qc()
        {
            TreeNode tn = trw_All_SuperQc.SelectedNode;
            if (tn == null)
            {


                MessageBox.Show("Select any one Report");
                return false;
            }
            else
            {

                return true;
            }

        }

        private bool validate_My_Super_Qc()
        {
            TreeNode tn = trw_My_SuperQc.SelectedNode;
            if (tn == null)
            {


                MessageBox.Show("Select any one Report");
                return false;
            }
            else
            {

                return true;
            }

        }


        private bool validate_My_Report()
        {
            TreeNode tn = tvwRightSide.SelectedNode;
            if (tn == null)
            {



                MessageBox.Show("Select any one Report");
                return false;
            }
            else
            {

                return true;
            }

        }

        private bool validate_My_Rework()
        {
            TreeNode tn = trw_Rework_Myreport.SelectedNode;
            if (tn == null)
            {



                MessageBox.Show("Select any one Report");
                return false;
            }
            else
            {

                return true;
            }

        }

        private bool validate_All_Rework()
        {
            TreeNode tn = trw_Rework_Report.SelectedNode;
            if (tn == null)
            {

                MessageBox.Show("Select any one Report");
                return false;
            }
            else
            {

                return true;
            }

        }

        private void btn_All_RefreshSuperQc_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            // clsLoader.startProgress();

            if (validate_All_Super_Qc() != false)
            {
                if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                {
                    First_All_report_Superqc_Design();
                    Load_Grd_Superqc_All_User_Production_Report();
                    cr_Rework_AllReportsViewer.Visible = false;
                    grd_Rework_Reports.Columns.Clear();
                }


                else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                {

                    First_All_report_Superqc_Design();

                    grd_Rework_Reports.Rows.Clear();
                    Load_Grd_Superqc_All_User_Production_Report();
                    cr_Rework_AllReportsViewer.Visible = false;
                    grd_Rework_Reports.Columns.Clear();

                }
                else if (trw_All_SuperQc.SelectedNode.Text == "Orders Document List Report")
                {

                    Order_Document_list_All_Superqc_design();
                    grd_Rework_MyReport.AutoGenerateColumns = true;
                    grd_Rework_MyReport.DataSource = null;
                    Export_Title_Name = "Document_List_Report";
                    lbl_Rework_Myerrror.Visible = false;

                    Load_Order_Document_List_Superqc_All_Report();
                }
                else if (trw_All_SuperQc.SelectedNode.Text == "Orders Check List Report")
                {
                    grd_Rework_MyReport.AutoGenerateColumns = true;
                    grd_Rework_MyReport.DataSource = null;
                    Order_All_Superqc_Chklist_Design();
                    lbl_Rework_Myerrror.Visible = false;
                    Load_Check_List_All_Superqc_data();
                }
                else if (trw_All_SuperQc.SelectedNode.Text == "Orders Error Info Report")
                {
                    Order_Error_All_Superqc_Report();
                    grd_Rework_MyReport.DataSource = null;
                    grd_Rework_MyReport.Visible = true;
                    Export_Title_Name = "Error_Info_Report";
                    lbl_Rework_Myerrror.Visible = false;
                    Load_Orders_Error_Info_Superqc_Report();
                }
                else
                {
                    cr_Rework_ReportsViewer.Visible = false;
                    grd_Rework_MyReport.Visible = false;
                    lbl_Rework_Myerrror.Visible = true;
                }
            }
            //clsLoader.stopProgress();
        }

        private void Load_Grd_Superqc_All_User_Production_Report()
        {

            if (trw_All_SuperQc.SelectedNode.Text != "")
            {

                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;
                DateTime fromdate1 = Convert.ToDateTime(dtp_All_SuperqcFromdate.Text, usDtfi);
                DateTime Todate1 = Convert.ToDateTime(dtp_All_SuperqcTodate.Text, usDtfi);

                string fromdate = dtp_All_SuperqcFromdate.Text;
                string Todate = dtp_All_SuperqcTodate.Text;
                if (fromdate1 <= Todate1)
                {
                    int orderid = 0;
                    int Clientid = 0;
                    int SubProcessid = 0;
                    int Userid = 0;
                    int Status = 0;
                    int ProgressId = 0;
                    // dbc.BindOrder1(ddl_OrderNumber);
                    if (ddl_Superqc_AllOrderno.SelectedIndex != 0 & ddl_Superqc_AllOrderno.SelectedIndex != -1)
                    {
                        orderid = int.Parse(ddl_Superqc_AllOrderno.SelectedValue.ToString());
                    }
                    if (ddl_Superqc_client.SelectedIndex != 0)
                    {
                        Clientid = int.Parse(ddl_Superqc_client.SelectedValue.ToString());
                    }
                    if (ddl_Superqc_Subprocess.SelectedIndex != -1)
                    {
                        SubProcessid = int.Parse(ddl_Superqc_Subprocess.SelectedValue.ToString());
                    }
                    if (ddl_Superqc_Alluser.SelectedIndex != 0)
                    {
                        Userid = int.Parse(ddl_Superqc_Alluser.SelectedValue.ToString());
                    }
                    if (ddl_Superqc_AllStatus.SelectedIndex != 0)
                    {
                        ProgressId = int.Parse(ddl_Superqc_AllStatus.SelectedValue.ToString());
                    }
                    if (ddl_Superqc_Task.SelectedIndex != 0)
                    {
                        Status = int.Parse(ddl_Superqc_Task.SelectedValue.ToString());
                    }

                    ht.Clear();
                    dt.Clear();
                    dtuserexport.Clear();


                    if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {
                        Hashtable htsuperqc = new Hashtable();
                        System.Data.DataTable dtsuperqc = new System.Data.DataTable();
                        htsuperqc.Add("@Trans", "GET_USER_TASK_DETAILS_FOR_SUPER_QC");
                        dtsuperqc = dataaccess.ExecuteSP("Sp_Order", htsuperqc);


                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "All");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);

                            ht.Add("@User_Id", Userid);


                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {


                            //rptDoc = new Reports.CrystalReport.User_Production_ReportNew();
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "All");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", 0);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }





                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {

                            ht.Add("@Trans", "User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);

                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {


                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SELECT_USER_WISE");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }

                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {


                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Progress_ID_And_Used_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Progress_ID_And_Used_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                        }

                    }

                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Status_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Status_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }

                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Status_ID_and_User_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Status_ID_and_User_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Status_ID_and_Progress_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Status_ID_and_Progress_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Status_ID_and_Progress_Id_And_UserID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Status_ID_and_Progress_Id_And_UserID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Progress_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Progress_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Status_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                            dt = dataaccess.ExecuteSP("Sp_Rpt_User_Order_TimeManagement", ht);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Status_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {

                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Progress_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Progress_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Status_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Status_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Status_ID_and_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID_and_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Status_ID_and_Progress_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID_and_Progress_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Progress_ID_And_User_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Progress_ID_And_User_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Status_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Status_ID_And_User_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID_And_User_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Status_ID_And_Progress_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID_And_Progress_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Status_ID_And_Progress_Id_and_User_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID_And_Progress_Id_and_User_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }



                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_User_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_User_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id_and_User_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id_and_User_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_User_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_User_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id_and_user_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id_and_user_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);

                        }
                    }

                    if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
                    {

                        dt = dataaccess.ExecuteSP("Sp_Superqc_User_Order_TimeManagement", ht);
                        dtuserexport = dt;
                    }
                    else if (trw_All_SuperQc.SelectedNode.Text == "User Production Count")
                    {


                        crv_All_Superqc.Visible = true;
                        crv_All_Superqc.ReportSource = rptDoc;


                    }
                    //Grd_OrderTime.ColumnHeadersDefaultCellStyle.BackColor = System.Drawing.Color.DarkSlateGray;
                    //Grd_OrderTime.EnableHeadersVisualStyles = false;
                    //Grd_OrderTime.ColumnHeadersDefaultCellStyle.ForeColor = System.Drawing.Color.WhiteSmoke;
                    if (dt.Rows.Count > 0)
                    {


                        grd_All_SuperQc_Report.DataSource = null;
                        grd_All_SuperQc_Report.AutoGenerateColumns = false;

                        grd_All_SuperQc_Report.ColumnCount = 24;
                        grd_All_SuperQc_Report.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Ebrima", 7.75F, FontStyle.Bold);
                        grd_All_SuperQc_Report.ColumnHeadersHeight = 40;


                        //grd_All_SuperQc_Report.Rows.Add();
                        grd_All_SuperQc_Report.Columns[0].Name = "SNo";
                        grd_All_SuperQc_Report.Columns[0].HeaderText = "S. No";
                        grd_All_SuperQc_Report.Columns[0].Width = 50;

                        //state county
                        grd_All_SuperQc_Report.Columns[1].Name = "ProductionDate";
                        grd_All_SuperQc_Report.Columns[1].HeaderText = "PRODUCTION DATE";
                        grd_All_SuperQc_Report.Columns[1].DataPropertyName = "Production_Date";
                        grd_All_SuperQc_Report.Columns[1].Width = 140;

                        grd_All_SuperQc_Report.Columns[2].Name = "Client_Order_Number";
                        grd_All_SuperQc_Report.Columns[2].HeaderText = "ORDER NUMBER";
                        grd_All_SuperQc_Report.Columns[2].DataPropertyName = "Client_Order_Number";
                        grd_All_SuperQc_Report.Columns[2].Width = 140;

                        grd_All_SuperQc_Report.Columns[3].Name = "SuperQc UserName";
                        grd_All_SuperQc_Report.Columns[3].HeaderText = "SuperQc UserName";
                        grd_All_SuperQc_Report.Columns[3].DataPropertyName = "User_Name";
                        grd_All_SuperQc_Report.Columns[3].Width = 125;


                        grd_All_SuperQc_Report.Columns[4].Name = "empcode";
                        grd_All_SuperQc_Report.Columns[4].HeaderText = "EMP CODE";
                        grd_All_SuperQc_Report.Columns[4].DataPropertyName = "DRN_EMP_CODE";
                        grd_All_SuperQc_Report.Columns[4].Width = 125;


                        grd_All_SuperQc_Report.Columns[5].Name = "jobrole";
                        grd_All_SuperQc_Report.Columns[5].HeaderText = "JOB ROLE";
                        grd_All_SuperQc_Report.Columns[5].DataPropertyName = "EMP_JOB_ROLE";
                        grd_All_SuperQc_Report.Columns[5].Width = 125;


                        grd_All_SuperQc_Report.Columns[6].Name = "shift";
                        grd_All_SuperQc_Report.Columns[6].HeaderText = "SHIFT";
                        grd_All_SuperQc_Report.Columns[6].DataPropertyName = "Shift_Type_Name";
                        grd_All_SuperQc_Report.Columns[6].Width = 125;


                        grd_All_SuperQc_Report.Columns[7].Name = "reportingto1";
                        grd_All_SuperQc_Report.Columns[7].HeaderText = "REPORTING TO 1";
                        grd_All_SuperQc_Report.Columns[7].DataPropertyName = "Reporting_To_1";
                        grd_All_SuperQc_Report.Columns[7].Width = 125;


                        grd_All_SuperQc_Report.Columns[8].Name = "reportingto2";
                        grd_All_SuperQc_Report.Columns[8].HeaderText = "REPORTING TO 2";
                        grd_All_SuperQc_Report.Columns[8].DataPropertyName = "Reporting_To_2";
                        grd_All_SuperQc_Report.Columns[8].Width = 125;



                        if (User_Role_Id == "1")
                        {

                            grd_All_SuperQc_Report.Columns[9].Name = "Client";
                            grd_All_SuperQc_Report.Columns[9].HeaderText = "CLIENT NAME";
                            grd_All_SuperQc_Report.Columns[9].DataPropertyName = "Client_Name";
                            grd_All_SuperQc_Report.Columns[9].Width = 125;

                            grd_All_SuperQc_Report.Columns[10].Name = "SubProcess";
                            grd_All_SuperQc_Report.Columns[10].HeaderText = "SUB PROCESS";
                            grd_All_SuperQc_Report.Columns[10].DataPropertyName = "Sub_ProcessName";
                            grd_All_SuperQc_Report.Columns[10].Width = 250;

                        }
                        else
                        {

                            grd_All_SuperQc_Report.Columns[9].Name = "Client_Number";
                            grd_All_SuperQc_Report.Columns[9].HeaderText = "CLIENT NAME";
                            grd_All_SuperQc_Report.Columns[9].DataPropertyName = "Client_Number";
                            grd_All_SuperQc_Report.Columns[9].Width = 125;

                            grd_All_SuperQc_Report.Columns[10].Name = "Subprocess_Number";
                            grd_All_SuperQc_Report.Columns[10].HeaderText = "SUB PROCESS";
                            grd_All_SuperQc_Report.Columns[10].DataPropertyName = "Subprocess_Number";
                            grd_All_SuperQc_Report.Columns[10].Width = 250;

                        }
                        grd_All_SuperQc_Report.Columns[11].Name = "OrderType";
                        grd_All_SuperQc_Report.Columns[11].HeaderText = "ORDER TYPE";
                        grd_All_SuperQc_Report.Columns[11].DataPropertyName = "Order_Type";
                        grd_All_SuperQc_Report.Columns[11].Width = 180;

                        grd_All_SuperQc_Report.Columns[12].Name = "Order_Type_Abrivation";
                        grd_All_SuperQc_Report.Columns[12].HeaderText = "ORDER TYPE ABBREVIATION";
                        grd_All_SuperQc_Report.Columns[12].DataPropertyName = "Order_Type_Abrivation";
                        grd_All_SuperQc_Report.Columns[12].Width = 180;

                        //visible code
                        //grd_All_SuperQc_Report.Columns[3].Name = "OrderNumber";
                        //grd_All_SuperQc_Report.Columns[3].HeaderText = "ORDER_NUMBER";
                        //grd_All_SuperQc_Report.Columns[3].DataPropertyName = "Client_Order_Number";
                        //grd_All_SuperQc_Report.Columns[3].Width = 195;
                        //grd_All_SuperQc_Report.Columns[3].Visible = false;
                        //original code
                        //DataGridViewLinkColumn Order_link = new DataGridViewLinkColumn();
                        //grd_All_SuperQc_Report.Columns.Add(Order_link);
                        //Order_link.Name = "Client_Order_Number";
                        //Order_link.HeaderText = "ORDER NUMBER";
                        //Order_link.DataPropertyName = "Client_Order_Number";
                        //Order_link.Width = 195;
                        //Order_link.DisplayIndex = 5;

                        grd_All_SuperQc_Report.Columns[13].Name = "OrderStatus";
                        grd_All_SuperQc_Report.Columns[13].HeaderText = "ORDER STATUS";
                        grd_All_SuperQc_Report.Columns[13].DataPropertyName = "Task";
                        grd_All_SuperQc_Report.Columns[13].Width = 150;



                        grd_All_SuperQc_Report.Columns[14].Name = "State";
                        grd_All_SuperQc_Report.Columns[14].HeaderText = "STATE";
                        grd_All_SuperQc_Report.Columns[14].DataPropertyName = "State";
                        grd_All_SuperQc_Report.Columns[14].Width = 180;

                        grd_All_SuperQc_Report.Columns[15].Name = "County";
                        grd_All_SuperQc_Report.Columns[15].HeaderText = "COUNTY";
                        grd_All_SuperQc_Report.Columns[15].DataPropertyName = "County";
                        grd_All_SuperQc_Report.Columns[15].Width = 180;

                        grd_All_SuperQc_Report.Columns[16].Name = "Borrower_Name";
                        grd_All_SuperQc_Report.Columns[16].HeaderText = "BORROWER NAME";
                        grd_All_SuperQc_Report.Columns[16].DataPropertyName = "Borrower_Name";
                        grd_All_SuperQc_Report.Columns[16].Width = 180;


                        grd_All_SuperQc_Report.Columns[17].Name = "Status";
                        grd_All_SuperQc_Report.Columns[17].HeaderText = "PROGRESS STATUS";
                        grd_All_SuperQc_Report.Columns[17].DataPropertyName = "Order_Status";
                        grd_All_SuperQc_Report.Columns[17].Width = 150;

                        grd_All_SuperQc_Report.Columns[18].Name = "StartTime";
                        grd_All_SuperQc_Report.Columns[18].HeaderText = "START TIME";
                        grd_All_SuperQc_Report.Columns[18].DataPropertyName = "Start_Time";
                        grd_All_SuperQc_Report.Columns[18].Width = 120;

                        grd_All_SuperQc_Report.Columns[19].Name = "EndTime";
                        grd_All_SuperQc_Report.Columns[19].HeaderText = "END TIME";
                        grd_All_SuperQc_Report.Columns[19].DataPropertyName = "End_Time";
                        grd_All_SuperQc_Report.Columns[19].Width = 120;

                        grd_All_SuperQc_Report.Columns[20].Name = "TotalTime";
                        grd_All_SuperQc_Report.Columns[20].HeaderText = "TOTAL TIME";
                        grd_All_SuperQc_Report.Columns[20].DataPropertyName = "Total_Time";
                        grd_All_SuperQc_Report.Columns[20].Width = 100;

                        grd_All_SuperQc_Report.Columns[21].Name = "Search";
                        grd_All_SuperQc_Report.Columns[21].HeaderText = "Search";
                        grd_All_SuperQc_Report.Columns[21].DataPropertyName = "search";
                        grd_All_SuperQc_Report.Columns[21].Width = 125;

                        grd_All_SuperQc_Report.Columns[22].Name = "Typing";
                        grd_All_SuperQc_Report.Columns[22].HeaderText = "Typing";
                        grd_All_SuperQc_Report.Columns[22].DataPropertyName = "Typing";
                        grd_All_SuperQc_Report.Columns[22].Width = 125;

                        grd_All_SuperQc_Report.Columns[23].Name = "OrderId";
                        grd_All_SuperQc_Report.Columns[23].HeaderText = "Order Id";
                        grd_All_SuperQc_Report.Columns[23].DataPropertyName = "Order_ID";
                        grd_All_SuperQc_Report.Columns[23].Visible = false;
                        grd_All_SuperQc_Report.DataSource = dt;

                    }
                    else
                    {
                        grd_All_SuperQc_Report.Visible = true;
                        grd_All_SuperQc_Report.DataSource = null;
                    }
                }
                else
                {
                }
                for (int i = 0; i < grd_All_SuperQc_Report.Rows.Count; i++)
                {
                    grd_All_SuperQc_Report.Rows[i].Cells[0].Value = i + 1;
                }
            }

        }

        private void Load_Check_List_All_Superqc_data()
        {
            if (Validation_All_Superqc_report() != false)
            {
                DateTime Fromdate = Convert.ToDateTime(dtp_All_SuperqcFromdate.Text.ToString());
                DateTime Todate = Convert.ToDateTime(dtp_All_SuperqcTodate.Text.ToString());


                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;


                Hashtable ht_Status = new Hashtable();
                System.Data.DataTable dt_Status = new System.Data.DataTable();

                dt_Status.Rows.Clear();
                string From_Date = Fromdate.ToString("MM/dd/yyyy");
                string To_Date = Todate.ToString("MM/dd/yyyy");
                rptDoc = new Reports.CrystalReport.Order_Check_List_Report();

                Logon_To_Crystal();
                string Sub_Client;
                string Client;

                int Client_Id, Sub_Client_Id, User_Id;
                if (ddl_MyClient.SelectedIndex > 0)
                {
                    Client_Id = int.Parse(ddl_Superqc_Subprocess.SelectedValue.ToString());
                    Client = ddl_Superqc_Subprocess.SelectedValue.ToString();
                }
                else
                {
                    Client_Id = 0;

                    Client = "ALL";

                }
                if (ddl_MySubprocess.SelectedIndex > 0)
                {
                    Sub_Client_Id = int.Parse(ddl_Superqc_Subprocess.SelectedValue.ToString());
                    Sub_Client = ddl_Superqc_Subprocess.SelectedValue.ToString();
                }
                else
                {
                    Sub_Client_Id = 0;
                    Sub_Client = "ALL";

                }

                if (Client == "ALL" && Sub_Client == "ALL")
                {
                    rptDoc.SetParameterValue("@Trans", "SELECT_DATE_RANGE_WISE");
                }
                else if (Client != "ALL" && Sub_Client == "ALL")
                {

                    rptDoc.SetParameterValue("@Trans", "CLIENT_WISE");
                }
                else if (Client != "ALL" && Sub_Client != "ALL")
                {

                    rptDoc.SetParameterValue("@Trans", "CLEINT_SUB_CLIENT_WISE");
                }
                else if (Client != "ALL" && Sub_Client != "ALL")
                {

                    rptDoc.SetParameterValue("@Trans", "CLEINT_SUB_CLIENT_USER_WISE");
                }

                rptDoc.SetParameterValue("@Task", int.Parse(ddl_Superqc_Task.SelectedValue.ToString()));
                rptDoc.SetParameterValue("@From_date", From_Date);
                rptDoc.SetParameterValue("@To_date", To_Date);
                rptDoc.SetParameterValue("@Order_Id", 0);
                rptDoc.SetParameterValue("@Client_Id", Client_Id);
                rptDoc.SetParameterValue("@Sub_Client_Id", Sub_Client_Id);
                rptDoc.SetParameterValue("@User_Id", userid);

                rptDoc.SetParameterValue("@Work_Type_Id", 3);
                // rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                crv_All_Superqc.ReportSource = rptDoc;

            }
        }

        private void Load_Orders_Error_Info_Superqc_Report()
        {
            if (Validation_All_Superqc_report() != false)
            {
                DateTime Fromdate = Convert.ToDateTime(dtp_All_SuperqcFromdate.Text.ToString());
                DateTime Todate = Convert.ToDateTime(dtp_All_SuperqcTodate.Text.ToString());

                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;
                Hashtable ht_Status = new Hashtable();
                System.Data.DataTable dt_Status = new System.Data.DataTable();

                dt_Status.Rows.Clear();
                string From_Date = Fromdate.ToString("MM/dd/yyyy");
                string To_Date = Todate.ToString("MM/dd/yyyy");

                ht_Status.Clear();
                dt_Status.Clear();
                string Client, SubProcess;

                if (ddl_Superqc_client.SelectedIndex > 0)
                {

                    Client = ddl_Superqc_client.SelectedValue.ToString();
                }
                else
                {
                    Client = "ALL";
                }

                if (ddl_Rework_Subprocess.SelectedIndex > 0)
                {
                    SubProcess = ddl_Rework_Subprocess.SelectedValue.ToString();
                }
                else
                {
                    SubProcess = "ALL";
                }
                if (Client == "ALL")
                {
                    ht_Status.Add("@Trans", "SELECT_ERROR_DATE_RANGE");
                    ht_Status.Add("@Fromdate", From_Date);
                    ht_Status.Add("@Todate", To_Date);
                    ht_Status.Add("@Work_Type", 3);

                    //ht_Status.Add("@Log_In_Userid", Loged_In_User_Id);
                    dt_Status = dataaccess.ExecuteSP("Sp_Superqc_Rpt_Order_ErrorReport", ht_Status);

                }
                else if (Client != "ALL" && SubProcess == "ALL")
                {
                    ht_Status.Add("@Trans", "CLIENT_WISE");
                    ht_Status.Add("@Fromdate", From_Date);
                    ht_Status.Add("@Todate", To_Date);
                    ht_Status.Add("@Client_Id", Client);
                    ht_Status.Add("@Work_Type", 3);

                    dt_Status = dataaccess.ExecuteSP("Sp_Superqc_Rpt_Order_ErrorReport", ht_Status);

                }
                else if (Client != "ALL" && SubProcess != "ALL")
                {
                    ht_Status.Add("@Trans", "CLIENT_SUB_PROCESS_WISE");

                    ht_Status.Add("@Fromdate", From_Date);
                    ht_Status.Add("@Todate", To_Date);
                    ht_Status.Add("@Client_Id", Client);
                    ht_Status.Add("@Sub_Process_Id", SubProcess);
                    ht_Status.Add("@Work_Type", 3);
                    dt_Status = dataaccess.ExecuteSP("Sp_Superqc_Rpt_Order_ErrorReport", ht_Status);

                }
                dtordererror.Clear();
                dtordererror = dt_Status;

                grd_All_SuperQc_Report.DataSource = null;
                grd_All_SuperQc_Report.Visible = true;
                if (dtordererror.Rows.Count > 0)
                {
                    grd_All_SuperQc_Report.DataSource = null;
                    grd_All_SuperQc_Report.AutoGenerateColumns = false;

                    grd_All_SuperQc_Report.ColumnCount = 18;

                    grd_All_SuperQc_Report.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Ebrima", 7.75F, FontStyle.Bold);
                    grd_All_SuperQc_Report.ColumnHeadersHeight = 40;

                    //grd_All_SuperQc_Report.Rows.Add();
                    grd_All_SuperQc_Report.Columns[0].Name = "Orderid";
                    grd_All_SuperQc_Report.Columns[0].HeaderText = "Order Id";
                    grd_All_SuperQc_Report.Columns[0].DataPropertyName = "Order_ID";
                    grd_All_SuperQc_Report.Columns[0].Width = 50;
                    grd_All_SuperQc_Report.Columns[0].Visible = false;

                    grd_All_SuperQc_Report.Columns[1].Name = "Client_Order_Number";
                    grd_All_SuperQc_Report.Columns[1].HeaderText = "ORDER NUMBER";
                    grd_All_SuperQc_Report.Columns[1].DataPropertyName = "Client Order Number";
                    grd_All_SuperQc_Report.Columns[1].Width = 140;


                    if (User_Role_Id == "1")
                    {
                        grd_All_SuperQc_Report.Columns[2].Name = "Client_Name";
                        grd_All_SuperQc_Report.Columns[2].HeaderText = "CLIENT NAME";
                        grd_All_SuperQc_Report.Columns[2].DataPropertyName = "Client";
                        grd_All_SuperQc_Report.Columns[2].Width = 120;

                        grd_All_SuperQc_Report.Columns[3].Name = "Sub_ProcessName";
                        grd_All_SuperQc_Report.Columns[3].HeaderText = "SUBPROCESS NAME";
                        grd_All_SuperQc_Report.Columns[3].DataPropertyName = "Subprocess";
                        grd_All_SuperQc_Report.Columns[3].Width = 300;
                    }
                    else
                    {

                        grd_All_SuperQc_Report.Columns[2].Name = "Client_Number";
                        grd_All_SuperQc_Report.Columns[2].HeaderText = "CLIENT NAME";
                        grd_All_SuperQc_Report.Columns[2].DataPropertyName = "Client_Number";
                        grd_All_SuperQc_Report.Columns[2].Width = 125;

                        grd_All_SuperQc_Report.Columns[3].Name = "Subprocess_Number";
                        grd_All_SuperQc_Report.Columns[3].HeaderText = "SUB PROCESS";
                        grd_All_SuperQc_Report.Columns[3].DataPropertyName = "Subprocess_Number";
                        grd_All_SuperQc_Report.Columns[3].Width = 250;
                    }


                    grd_All_SuperQc_Report.Columns[4].Name = "Order_Type";
                    grd_All_SuperQc_Report.Columns[4].HeaderText = "ORDER TYPE";
                    grd_All_SuperQc_Report.Columns[4].DataPropertyName = "Order Type";
                    grd_All_SuperQc_Report.Columns[4].Width = 300;

                    grd_All_SuperQc_Report.Columns[5].Name = "Error_Type";
                    grd_All_SuperQc_Report.Columns[5].HeaderText = "ERROR TYPE";
                    grd_All_SuperQc_Report.Columns[5].DataPropertyName = "Error Type";
                    grd_All_SuperQc_Report.Columns[5].Width = 150;

                    grd_All_SuperQc_Report.Columns[6].Name = "Error_description";
                    grd_All_SuperQc_Report.Columns[6].HeaderText = "ERROR DESCRIPTION";
                    grd_All_SuperQc_Report.Columns[6].DataPropertyName = "Error description";
                    grd_All_SuperQc_Report.Columns[6].Width = 200;

                    grd_All_SuperQc_Report.Columns[7].Name = "Comments";
                    grd_All_SuperQc_Report.Columns[7].HeaderText = "COMMENTS";
                    grd_All_SuperQc_Report.Columns[7].DataPropertyName = "Comments";
                    grd_All_SuperQc_Report.Columns[7].Width = 200;

                    grd_All_SuperQc_Report.Columns[8].Name = "Error_On_Status";
                    grd_All_SuperQc_Report.Columns[8].HeaderText = "ERROR STATUS";
                    grd_All_SuperQc_Report.Columns[8].DataPropertyName = "Error On Status";
                    grd_All_SuperQc_Report.Columns[8].Width = 150;

                    grd_All_SuperQc_Report.Columns[9].Name = "Error_On_User_Name";
                    grd_All_SuperQc_Report.Columns[9].HeaderText = "ERROR ON USER NAME";
                    grd_All_SuperQc_Report.Columns[9].DataPropertyName = "Error On User Name";
                    grd_All_SuperQc_Report.Columns[9].Width = 150;


                    grd_All_SuperQc_Report.Columns[10].Name = "DRNEmpCode";
                    grd_All_SuperQc_Report.Columns[10].HeaderText = "EMP CODE";
                    grd_All_SuperQc_Report.Columns[10].DataPropertyName = "DRN_Emp_Code";
                    grd_All_SuperQc_Report.Columns[10].Width = 120;


                    grd_All_SuperQc_Report.Columns[11].Name = "Emp_Job_Role";
                    grd_All_SuperQc_Report.Columns[11].HeaderText = "JOB ROLE";
                    grd_All_SuperQc_Report.Columns[11].DataPropertyName = "Emp_Job_Role";
                    grd_All_SuperQc_Report.Columns[11].Width = 120;

                    grd_All_SuperQc_Report.Columns[12].Name = "ShiftTypeName";
                    grd_All_SuperQc_Report.Columns[12].HeaderText = "SHIFT";
                    grd_All_SuperQc_Report.Columns[12].DataPropertyName = "Shift_Type_Name";
                    grd_All_SuperQc_Report.Columns[12].Width = 120;

                    grd_All_SuperQc_Report.Columns[13].Name = "ReportingTo1";
                    grd_All_SuperQc_Report.Columns[13].HeaderText = "REPORTING TO 1";
                    grd_All_SuperQc_Report.Columns[13].DataPropertyName = "Reporting_To_1";
                    grd_All_SuperQc_Report.Columns[13].Width = 120;

                    grd_All_SuperQc_Report.Columns[14].Name = "ReportingTo2";
                    grd_All_SuperQc_Report.Columns[14].HeaderText = "REPORTING TO 2";
                    grd_All_SuperQc_Report.Columns[14].DataPropertyName = "Reporting_To_2";
                    grd_All_SuperQc_Report.Columns[14].Width = 120;

                    grd_All_SuperQc_Report.Columns[15].Name = "Error_From_Status";
                    grd_All_SuperQc_Report.Columns[15].HeaderText = "QC STATUS";
                    grd_All_SuperQc_Report.Columns[15].DataPropertyName = "Error From Status";
                    grd_All_SuperQc_Report.Columns[15].Width = 150;

                    grd_All_SuperQc_Report.Columns[16].Name = "Error_Enter_By_Username";
                    grd_All_SuperQc_Report.Columns[16].HeaderText = "QC USERNAME";
                    grd_All_SuperQc_Report.Columns[16].DataPropertyName = "Error From Username";
                    grd_All_SuperQc_Report.Columns[16].Width = 160;

                    grd_All_SuperQc_Report.Columns[17].Name = "Order_Production_Date";
                    grd_All_SuperQc_Report.Columns[17].HeaderText = "PRODUCTION DATE";
                    grd_All_SuperQc_Report.Columns[17].DataPropertyName = "Order Production Date";
                    grd_All_SuperQc_Report.Columns[17].Width = 120;

                    grd_All_SuperQc_Report.DataSource = dt_Status;
                }
                else
                {
                    grd_All_SuperQc_Report.Rows.Clear();
                    grd_All_SuperQc_Report.Visible = false;
                    grd_All_SuperQc_Report.DataSource = null;
                }
            }
        }

        private void btn_Superqc_Date_Click(object sender, EventArgs e)
        {
            Superqc_Scoreboard();
        }

        private void Superqc_Scoreboard()
        {
            DateTime d1 = DateTime.Now;
            d1 = d1.AddDays(-1);
            Hashtable ht_Score = new Hashtable();
            System.Data.DataTable dt_Score = new System.Data.DataTable();

            if (dtp_Superqc.Text == "")
            {
                datescoredate = DateTime.Now;
                ht_Score.Add("@Date", datescoredate);
            }
            else
            {
                ht_Score.Add("@Date", Score_Board_Date.ToString());
                Score_Board_Date = dtp_Superqc.Text;
            }
            ht_Score.Add("@Trans", "Current_Date");

            dt_Score = dataaccess.ExecuteSP("Sp_SuperQc_Score_Board", ht_Score);
            if (dt_Score.Rows.Count > 0)
            {
                grd_Superqc_Scoreboard.Rows.Clear();
                for (int i = 0; i < dt_Score.Rows.Count; i++)
                {
                    grd_Superqc_Scoreboard.AutoGenerateColumns = false;
                    grd_Superqc_Scoreboard.Rows.Add();
                    grd_Superqc_Scoreboard.Rows[i].Cells[0].Value = i + 1;
                    grd_Superqc_Scoreboard.Rows[i].Cells[1].Value = dt_Score.Rows[i]["User_Name"].ToString();
                    grd_Superqc_Scoreboard.Rows[i].Cells[2].Value = dt_Score.Rows[i]["Count_Orders"].ToString();
                    grd_Superqc_Scoreboard.Rows[i].Cells[3].Value = dt_Score.Rows[i]["User_id"].ToString();
                    grd_Superqc_Scoreboard.Rows[i].Cells[4].Value = dt_Score.Rows[i]["Others"].ToString();
                    grd_Superqc_Scoreboard.Rows[i].Cells[5].Value = dt_Score.Rows[i]["Total"].ToString();

                    System.Windows.Forms.Application.DoEvents();
                }

            }
            grd_Superqc_Scoreboard.ColumnHeadersDefaultCellStyle.BackColor = Color.SlateGray;
            grd_Superqc_Scoreboard.EnableHeadersVisualStyles = false;
            grd_Superqc_Scoreboard.ColumnHeadersDefaultCellStyle.ForeColor = Color.WhiteSmoke;
        }

        private void grd_Superqc_Scoreboard_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            score_board = "SCORE BOARD";
            TAT = "SCORE BOARD";
            if (e.ColumnIndex == 2)
            {
                Ordermanagement_01.TargetDashboard TargeDashboard = new Ordermanagement_01.TargetDashboard(Order_Target, Time_Zone, OrderViewType, 2, int.Parse(grd_Superqc_Scoreboard.Rows[e.RowIndex].Cells[3].Value.ToString()), TAT, score_board, header_Pending, dtp_Superqc.Text, userid, User_Role_Id, "Superqc");
                TargeDashboard.Show();
            }
            else if (e.ColumnIndex == 4)
            {
                Ordermanagement_01.TargetDashboard TargeDashboard = new Ordermanagement_01.TargetDashboard(Order_Target, Time_Zone, OrderViewType, 3, int.Parse(grd_Superqc_Scoreboard.Rows[e.RowIndex].Cells[3].Value.ToString()), TAT, score_board, header_Pending, dtp_Superqc.Text, userid, User_Role_Id, "Superqc");
                TargeDashboard.Show();
            }
        }

        private void tabControl5_SelectedIndexChanged(object sender, EventArgs e)
        {
            dtp_Superqc.Value = DateTime.Now;
            dtp_MySuperqc_To.Value = DateTime.Now;
            dtp_MySuperqcFrom.Value = DateTime.Now;
            dtp_All_SuperqcFromdate.Value = DateTime.Now;
            dtp_All_SuperqcTodate.Value = DateTime.Now;
            if (tabControl5.SelectedIndex == 1)
            {
                if (User_Role_Id == "1")
                {
                    dbc.BindClientName_rpt(ddl_Superqc_client);
                }
                else
                {
                    dbc.BindClientName_For_Employee(ddl_Superqc_client);

                }
                dbc.BindUserName(ddl_Superqc_Alluser);
                dbc.Bind_Order_Progress_rpt(ddl_Superqc_AllStatus);
                dbc.BindOrderStatusRpt(ddl_Superqc_Task);
                ddl_Superqc_client_SelectedIndexChanged(sender, e);
            }
            else if (tabControl5.SelectedIndex == 2)
            {

                dbc.BindUserName_Rpt(ddl_Superqc_Myuser);
                dbc.Bind_Order_Progress_rpt(ddl_Superqc_MyStatus);
                dbc.Bind_Superqc_Order_Status_Report(lbl_My_Superqc_Task);
                //lbl_My_Superqc_Task
                if (User_Role_Id == "1")
                {
                    dbc.Bind_UserClient_rpt(ddl_MySuperqc_Client, Loged_In_User_Id);
                }
                else
                {
                    dbc.Bind_UserClient_Number_rpt(ddl_MySuperqc_Client, Loged_In_User_Id);

                }
                ddl_MySuperqc_Client_SelectedIndexChanged(sender, e);
            }

        }

        private void First_My_report_Superqc_Design()
        {

            lbl_Superqc_Myclient.Visible = true;
            ddl_MySuperqc_Client.Visible = true;
            lbl_My_Superqc_Subpro.Visible = true;
            ddl_Superqc_MyStatus.Visible = true;
            lbl_Superqc_MyTask.Visible = true;
            lbl_My_Superqc_Task.Visible = true;
            lbl_Superqc_MyUser.Visible = true;
            ddl_Superqc_Myuser.Visible = true;
            lbl_Superqc_MyStatus.Visible = true;
            ddl_MySuperqc_Subprocess.Visible = true;
            lbl_Superqc_MyOrderno.Visible = true;
            ddl_Superqc_MyOrderno.Visible = true;

            lbl_Superqc_Error.Visible = false;
            lbl_Superqc_Myerrror.Visible = false;
            if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
            {
                grd_My_SuperQc_Report.Visible = true;
                crv_My_Superqc.Visible = false;
            }
            else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
            {
                grd_My_SuperQc_Report.Visible = false;
                crv_My_Superqc.Visible = true;
            }
        }

        private void Order_Document_list_My_Superqc_design()
        {
            lbl_Superqc_Myclient.Visible = true;
            ddl_MySuperqc_Client.Visible = true;
            lbl_My_Superqc_Subpro.Visible = false;
            ddl_Superqc_MyStatus.Visible = false;
            lbl_Superqc_MyTask.Visible = false;
            lbl_My_Superqc_Task.Visible = false;
            lbl_Superqc_MyUser.Visible = false;
            ddl_Superqc_Myuser.Visible = false;
            lbl_Superqc_MyStatus.Visible = false;
            ddl_MySuperqc_Subprocess.Visible = false;
            lbl_Superqc_MyOrderno.Visible = false;
            ddl_Superqc_MyOrderno.Visible = false;

            lbl_Superqc_Error.Visible = false;
            lbl_Superqc_Myerrror.Visible = false;
            grd_My_SuperQc_Report.Visible = true;
            crv_My_Superqc.Visible = false;
        }

        private void Order_My_Superqc_Chklist_Design()
        {
            lbl_Superqc_Myclient.Visible = true;
            ddl_MySuperqc_Client.Visible = true;
            lbl_My_Superqc_Subpro.Visible = true;
            ddl_Superqc_MyStatus.Visible = false;
            lbl_Superqc_MyTask.Visible = false;
            lbl_My_Superqc_Task.Visible = false;
            lbl_Superqc_MyUser.Visible = false;
            ddl_Superqc_Myuser.Visible = false;
            lbl_Superqc_MyStatus.Visible = false;
            ddl_MySuperqc_Subprocess.Visible = true;
            lbl_Superqc_MyOrderno.Visible = false;
            ddl_Superqc_MyOrderno.Visible = false;

            lbl_Superqc_Error.Visible = false;
            lbl_Superqc_Myerrror.Visible = false;

            grd_My_SuperQc_Report.Visible = false;
            crv_My_Superqc.Visible = true;


        }

        private void Order_Error_My_Superqc_Report()
        {
            lbl_Superqc_Myclient.Visible = true;
            ddl_MySuperqc_Client.Visible = true;
            lbl_My_Superqc_Subpro.Visible = true;
            ddl_Superqc_MyStatus.Visible = false;
            lbl_Superqc_MyTask.Visible = false;
            lbl_My_Superqc_Task.Visible = false;
            lbl_Superqc_MyUser.Visible = false;
            ddl_Superqc_Myuser.Visible = false;
            lbl_Superqc_MyStatus.Visible = false;
            ddl_MySuperqc_Subprocess.Visible = true;
            lbl_Superqc_MyOrderno.Visible = false;
            ddl_Superqc_MyOrderno.Visible = false;

            lbl_Superqc_Error.Visible = false;
            lbl_Superqc_Myerrror.Visible = false;

            grd_My_SuperQc_Report.Visible = true;
            crv_My_Superqc.Visible = false;


        }

        private void trw_My_SuperQc_AfterSelect(object sender, TreeViewEventArgs e)
        {
            grd_My_SuperQc_Report.DataSource = null;

            grd_My_SuperQc_Report.Refresh();
            //lbl_Super_Qc_My_Header.Text = trw_My_SuperQc.SelectedNode.Text;
            lbl_All_SuperqcRecordnotfound.Visible = false;

            if (User_Role_Id == "1")
            {
                dbc.Bind_UserClient_rpt(ddl_MySuperqc_Client, Loged_In_User_Id);
            }
            else
            {
                dbc.Bind_UserClient_Number_rpt(ddl_MySuperqc_Client, Loged_In_User_Id);
                // dbc.Bind_UserClient_Number_rpt_1(ddl_MyClient, Loged_In_User_Id);
            }
            if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
            {
                First_My_report_Superqc_Design();
            }
            else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
            {
                First_My_report_Superqc_Design();
            }
            else if (trw_My_SuperQc.SelectedNode.Text == "Orders Document List Report")
            {
                Order_Document_list_My_Superqc_design();
            }
            else if (trw_My_SuperQc.SelectedNode.Text == "Orders Check List Report")
            {
                Order_My_Superqc_Chklist_Design();
            }
            else if (trw_My_SuperQc.SelectedNode.Text == "Orders Error Info Report")
            {
                Order_Error_My_Superqc_Report();
            }
        }

        private void Load_Grd_Superqc_My_User_Production_Report()
        {
            if (trw_My_SuperQc.SelectedNode.Text == "")
            {
                // MessageBox.Show("Enter From and To date Properly");
            }
            else if (trw_My_SuperQc.SelectedNode.Text != "")
            {
                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;
                DateTime fromdate = Convert.ToDateTime(dtp_MySuperqcFrom.Text, usDtfi);
                DateTime Todate = Convert.ToDateTime(dtp_MySuperqc_To.Text, usDtfi);
                if (fromdate <= Todate)
                {
                    int orderid = 0;
                    int Clientid = 0;
                    int SubProcessid = 0;
                    int Userid = 0;
                    int Status = 0;
                    int ProgressId = 0;
                    // dbc.BindOrder1(ddl_OrderNumber);
                    if (ddl_Superqc_MyOrderno.SelectedIndex != 0 & ddl_Superqc_MyOrderno.SelectedIndex != -1)
                    {
                        orderid = int.Parse(ddl_Superqc_MyOrderno.SelectedValue.ToString());
                    }
                    if (ddl_MySuperqc_Client.SelectedIndex != 0)
                    {
                        Clientid = int.Parse(ddl_MySuperqc_Client.SelectedValue.ToString());
                    }
                    if (ddl_MySuperqc_Subprocess.SelectedIndex != -1)
                    {
                        SubProcessid = int.Parse(ddl_MySuperqc_Subprocess.SelectedValue.ToString());
                    }
                    if (ddl_Superqc_Myuser.SelectedIndex != 0)
                    {
                        Userid = int.Parse(ddl_Superqc_Myuser.SelectedValue.ToString());
                    }
                    if (ddl_Superqc_MyStatus.SelectedIndex != 0)
                    {
                        ProgressId = int.Parse(ddl_Superqc_MyStatus.SelectedValue.ToString());
                    }
                    if (lbl_My_Superqc_Task.SelectedIndex != 0)
                    {
                        Status = int.Parse(lbl_My_Superqc_Task.SelectedValue.ToString());
                    }

                    ht.Clear();
                    dt.Clear();
                    dtuserexport.Clear();
                    if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {
                        Hashtable htsuperqc = new Hashtable();
                        System.Data.DataTable dtsuperqc = new System.Data.DataTable();
                        htsuperqc.Add("@Trans", "GET_USER_TASK_DETAILS_FOR_SUPER_QC");
                        dtsuperqc = dataaccess.ExecuteSP("Sp_Order", htsuperqc);

                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "My_Report");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                            ht.Add("@Log_In_Userid", Loged_In_User_Id);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            //rptDoc = new Reports.CrystalReport.User_Production_ReportNew();
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "All");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", 0);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.Rework_User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SELECT_USER_WISE");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Progress_ID_And_Used_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Progress_ID_And_Used_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Status_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Status_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Status_ID_and_User_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Status_ID_and_User_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Status_ID_and_Progress_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Status_ID_and_Progress_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }

                    else if (orderid == 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Status_ID_and_Progress_Id_And_UserID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Status_ID_and_Progress_Id_And_UserID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Progress_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Progress_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Status_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                            dt = dataaccess.ExecuteSP("Sp_Rpt_User_Order_TimeManagement", ht);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Status_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid == 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "SubProcess_ID_And_Status_ID_And_Progress_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {

                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Progress_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Progress_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Status_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Status_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Status_ID_and_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID_and_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Status_ID_and_Progress_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Status_ID_and_Progress_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Progress_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid == 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Client_ID_And_Subprocess_ID_and_Status_ID_and_Progress_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_User_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_User_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Progress_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Progress_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Progress_ID_And_User_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Progress_ID_And_User_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Status_ID");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Status_ID_And_User_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID_And_User_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Status_ID_And_Progress_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID_And_Progress_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid == 0 & SubProcessid == 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Status_ID_And_Progress_Id_and_User_Id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Status_ID_And_Progress_Id_and_User_Id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }



                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_User_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_User_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status == 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id_and_User_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Progress_id_and_User_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId == 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_User_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_User_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid == 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }
                    else if (orderid != 0 & Clientid != 0 & SubProcessid != 0 & Status != 0 & ProgressId != 0 & Userid != 0)
                    {
                        if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                        {
                            ht.Add("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id_and_user_id");
                            ht.Add("@Order_Id", orderid);
                            ht.Add("@Client_Id", Clientid);
                            ht.Add("@Subprocess_Id", SubProcessid);
                            ht.Add("@Order_Progress_Id", ProgressId);
                            ht.Add("@Order_Status_Id", Status);
                            ht.Add("@From_date", fromdate);
                            ht.Add("@To_date", Todate);
                            ht.Add("@User_Id", Userid);
                        }
                        else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                        {
                            rptDoc = new Reports.CrystalReport.User_Production_Count();
                            Logon_To_Crystal();
                            rptDoc.SetParameterValue("@Trans", "Order_ID_And_Client_id_And_Subrpocess_id_And_Status_id_And_Progress_id_and_user_id");
                            rptDoc.SetParameterValue("@From_date", fromdate);
                            rptDoc.SetParameterValue("@To_date", Todate);
                            rptDoc.SetParameterValue("@Order_Id", orderid);
                            rptDoc.SetParameterValue("@Client_Id", Clientid);
                            rptDoc.SetParameterValue("@Subprocess_Id", SubProcessid);
                            rptDoc.SetParameterValue("@Order_Progress_Id", ProgressId);
                            rptDoc.SetParameterValue("@Order_Status_Id", Status);
                            rptDoc.SetParameterValue("@User_Id", Userid);
                            rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                        }
                    }

                    if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                    {

                        dt = dataaccess.ExecuteSP("Sp_Superqc_User_Order_TimeManagement", ht);
                        dtuserexport = dt;
                    }
                    else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                    {
                        cr_Rework_ReportsViewer.ReportSource = rptDoc;
                    }
                    //Grd_OrderTime.ColumnHeadersDefaultCellStyle.BackColor = System.Drawing.Color.DarkSlateGray;
                    //Grd_OrderTime.EnableHeadersVisualStyles = false;
                    //Grd_OrderTime.ColumnHeadersDefaultCellStyle.ForeColor = System.Drawing.Color.WhiteSmoke;
                    if (dt.Rows.Count > 0)
                    {


                        grd_My_SuperQc_Report.DataSource = null;

                        grd_My_SuperQc_Report.AutoGenerateColumns = false;

                        grd_My_SuperQc_Report.ColumnCount = 24;
                        //grd_My_SuperQc_Report.Rows.Add();
                        grd_My_SuperQc_Report.Columns[0].Name = "SNo";
                        grd_My_SuperQc_Report.Columns[0].HeaderText = "S. No";
                        grd_My_SuperQc_Report.Columns[0].Width = 50;

                        //state county
                        grd_My_SuperQc_Report.Columns[1].Name = "ProductionDate";
                        grd_My_SuperQc_Report.Columns[1].HeaderText = "PRODUCTION DATE";
                        grd_My_SuperQc_Report.Columns[1].DataPropertyName = "Production_Date";
                        grd_My_SuperQc_Report.Columns[1].Width = 140;

                        grd_My_SuperQc_Report.Columns[2].Name = "Client_Order_Number";
                        grd_My_SuperQc_Report.Columns[2].HeaderText = "ORDER NUMBER";
                        grd_My_SuperQc_Report.Columns[2].DataPropertyName = "Client_Order_Number";
                        grd_My_SuperQc_Report.Columns[2].Width = 140;

                        if (User_Role_Id == "1")
                        {

                            grd_My_SuperQc_Report.Columns[3].Name = "Client";
                            grd_My_SuperQc_Report.Columns[3].HeaderText = "CLIENT NAME";
                            grd_My_SuperQc_Report.Columns[3].DataPropertyName = "Client_Name";
                            grd_My_SuperQc_Report.Columns[3].Width = 125;

                            grd_My_SuperQc_Report.Columns[4].Name = "SubProcess";
                            grd_My_SuperQc_Report.Columns[4].HeaderText = "SUB PROCESS";
                            grd_My_SuperQc_Report.Columns[4].DataPropertyName = "Sub_ProcessName";
                            grd_My_SuperQc_Report.Columns[4].Width = 250;

                        }
                        else
                        {

                            grd_My_SuperQc_Report.Columns[3].Name = "Client_Number";
                            grd_My_SuperQc_Report.Columns[3].HeaderText = "CLIENT NAME";
                            grd_My_SuperQc_Report.Columns[3].DataPropertyName = "Client_Number";
                            grd_My_SuperQc_Report.Columns[3].Width = 125;

                            grd_My_SuperQc_Report.Columns[4].Name = "Subprocess_Number";
                            grd_My_SuperQc_Report.Columns[4].HeaderText = "SUB PROCESS";
                            grd_My_SuperQc_Report.Columns[4].DataPropertyName = "Subprocess_Number";
                            grd_My_SuperQc_Report.Columns[4].Width = 250;

                        }


                        grd_My_SuperQc_Report.Columns[5].Name = "SuperQc UserName";
                        grd_My_SuperQc_Report.Columns[5].HeaderText = "SuperQc UserName";
                        grd_My_SuperQc_Report.Columns[5].DataPropertyName = "User_Name";
                        grd_My_SuperQc_Report.Columns[5].Width = 125;

                        grd_My_SuperQc_Report.Columns[6].Name = "empcode";
                        grd_My_SuperQc_Report.Columns[6].HeaderText = "EMP CODE";
                        grd_My_SuperQc_Report.Columns[6].DataPropertyName = "DRN_EMP_CODE";
                        grd_My_SuperQc_Report.Columns[6].Width = 125;

                        grd_My_SuperQc_Report.Columns[7].Name = "Jobrole";
                        grd_My_SuperQc_Report.Columns[7].HeaderText = "JOB ROLE";
                        grd_My_SuperQc_Report.Columns[7].DataPropertyName = "Emp_Job_Role";
                        grd_My_SuperQc_Report.Columns[7].Width = 250;

                        grd_My_SuperQc_Report.Columns[8].Name = "Shift";
                        grd_My_SuperQc_Report.Columns[8].HeaderText = "SHIFT";
                        grd_My_SuperQc_Report.Columns[8].DataPropertyName = "Shift_Type_Name";
                        grd_My_SuperQc_Report.Columns[8].Width = 125;


                        grd_My_SuperQc_Report.Columns[9].Name = "reportingto1";
                        grd_My_SuperQc_Report.Columns[9].HeaderText = "REPORTING_TO_1";
                        grd_My_SuperQc_Report.Columns[9].DataPropertyName = "Reporting_To_1";
                        grd_My_SuperQc_Report.Columns[9].Width = 125;

                        grd_My_SuperQc_Report.Columns[10].Name = "reportingto2";
                        grd_My_SuperQc_Report.Columns[10].HeaderText = "REPORTING_TO_2";
                        grd_My_SuperQc_Report.Columns[10].DataPropertyName = "Reporting_To_2";
                        grd_My_SuperQc_Report.Columns[10].Width = 125;


                        grd_My_SuperQc_Report.Columns[11].Name = "OrderType";
                        grd_My_SuperQc_Report.Columns[11].HeaderText = "ORDER TYPE";
                        grd_My_SuperQc_Report.Columns[11].DataPropertyName = "Order_Type";
                        grd_My_SuperQc_Report.Columns[11].Width = 180;

                        grd_My_SuperQc_Report.Columns[12].Name = "Order_Type_Abrivation";
                        grd_My_SuperQc_Report.Columns[12].HeaderText = "ORDER TYPE ABBREVIATION";
                        grd_My_SuperQc_Report.Columns[12].DataPropertyName = "Order_Type_Abrivation";
                        grd_My_SuperQc_Report.Columns[12].Width = 180;



                        grd_My_SuperQc_Report.Columns[13].Name = "OrderStatus";
                        grd_My_SuperQc_Report.Columns[13].HeaderText = "ORDER STATUS";
                        grd_My_SuperQc_Report.Columns[13].DataPropertyName = "Task";
                        grd_My_SuperQc_Report.Columns[13].Width = 150;



                        grd_My_SuperQc_Report.Columns[14].Name = "State";
                        grd_My_SuperQc_Report.Columns[14].HeaderText = "STATE";
                        grd_My_SuperQc_Report.Columns[14].DataPropertyName = "State";
                        grd_My_SuperQc_Report.Columns[14].Width = 180;

                        grd_My_SuperQc_Report.Columns[15].Name = "County";
                        grd_My_SuperQc_Report.Columns[15].HeaderText = "COUNTY";
                        grd_My_SuperQc_Report.Columns[15].DataPropertyName = "County";
                        grd_My_SuperQc_Report.Columns[15].Width = 180;

                        grd_My_SuperQc_Report.Columns[16].Name = "Borrower_Name";
                        grd_My_SuperQc_Report.Columns[16].HeaderText = "BORROWER NAME";
                        grd_My_SuperQc_Report.Columns[16].DataPropertyName = "Borrower_Name";
                        grd_My_SuperQc_Report.Columns[16].Width = 180;


                        grd_My_SuperQc_Report.Columns[17].Name = "Status";
                        grd_My_SuperQc_Report.Columns[17].HeaderText = "PROGRESS STATUS";
                        grd_My_SuperQc_Report.Columns[17].DataPropertyName = "Order_Status";
                        grd_My_SuperQc_Report.Columns[17].Width = 150;

                        grd_My_SuperQc_Report.Columns[18].Name = "StartTime";
                        grd_My_SuperQc_Report.Columns[18].HeaderText = "START TIME";
                        grd_My_SuperQc_Report.Columns[18].DataPropertyName = "Start_Time";
                        grd_My_SuperQc_Report.Columns[18].Width = 120;

                        grd_My_SuperQc_Report.Columns[19].Name = "EndTime";
                        grd_My_SuperQc_Report.Columns[19].HeaderText = "END TIME";
                        grd_My_SuperQc_Report.Columns[19].DataPropertyName = "End_Time";
                        grd_My_SuperQc_Report.Columns[19].Width = 120;

                        grd_My_SuperQc_Report.Columns[20].Name = "TotalTime";
                        grd_My_SuperQc_Report.Columns[20].HeaderText = "TOTAL TIME";
                        grd_My_SuperQc_Report.Columns[20].DataPropertyName = "Total_Time";
                        grd_My_SuperQc_Report.Columns[20].Width = 100;

                        grd_My_SuperQc_Report.Columns[21].Name = "Search";
                        grd_My_SuperQc_Report.Columns[21].HeaderText = "Search";
                        grd_My_SuperQc_Report.Columns[21].DataPropertyName = "search";
                        grd_My_SuperQc_Report.Columns[21].Width = 125;


                        grd_My_SuperQc_Report.Columns[22].Name = "Typing";
                        grd_My_SuperQc_Report.Columns[22].HeaderText = "Typing";
                        grd_My_SuperQc_Report.Columns[22].DataPropertyName = "Typing";
                        grd_My_SuperQc_Report.Columns[22].Width = 125;

                        grd_My_SuperQc_Report.Columns[23].Name = "OrderId";
                        grd_My_SuperQc_Report.Columns[23].HeaderText = "Order Id";
                        grd_My_SuperQc_Report.Columns[23].DataPropertyName = "Order_ID";
                        grd_My_SuperQc_Report.Columns[23].Visible = false;
                        grd_My_SuperQc_Report.DataSource = dt;
                        //  }


                    }
                    else
                    {
                        grd_My_SuperQc_Report.Visible = true;
                        grd_My_SuperQc_Report.DataSource = null;
                    }
                }
                else
                {

                }
                for (int i = 0; i < grd_My_SuperQc_Report.Rows.Count; i++)
                {
                    grd_My_SuperQc_Report.Rows[i].Cells[0].Value = i + 1;
                }
            }


        }

        public bool Validation_My_superqc_report()
        {
            if (dtp_MySuperqcFrom.Text == "")
            {
                lbl_Superqc_Error.Visible = true;
                lbl_Superqc_Error.Text = "Select Proper fields in the above filters";
                return false;
            }
            else if (dtp_MySuperqc_To.Text == "")
            {
                lbl_Superqc_Error.Visible = true;
                lbl_Superqc_Error.Text = "Select Proper fields in the above filters";
                return false;
            }

            return true;

        }

        public void Load_Order_Document_List_Superqc_Report()
        {
            if (Validation_My_superqc_report() != false)
            {
                DateTime Fromdate = Convert.ToDateTime(dtp_MySuperqcFrom.Text.ToString());
                DateTime Todate = Convert.ToDateTime(dtp_MySuperqc_To.Text.ToString());

                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;

                Hashtable ht_Status = new Hashtable();
                System.Data.DataTable dt_Status = new System.Data.DataTable();

                dt_Status.Rows.Clear();
                string From_Date = Fromdate.ToString("MM/dd/yyyy");
                string To_Date = Todate.ToString("MM/dd/yyyy");
                if (ddl_MySuperqc_Client.Text == "ALL")
                {
                    ht_Status.Add("@Trans", "SELECT");
                }
                else
                {
                    ht_Status.Add("@Trans", "SELECT_CLIENT_WISE");
                    ht_Status.Add("@Client_id", int.Parse(ddl_MySuperqc_Client.SelectedValue.ToString()));
                }
                ht_Status.Add("@From_date", From_Date);
                ht_Status.Add("@To_Date", To_Date);
                ht_Status.Add("@Work_Type_Id", 3);
                ht_Status.Add("@Log_In_Userid", Loged_In_User_Id);

                dt_Status = dataaccess.ExecuteSP("Sp_Superqc_rpt_Document_List", ht_Status);
                dtuserexport = dt_Status;
                if (dt_Status.Rows.Count > 0)
                {
                    lbl_Superqc_Error.Text = "";
                    grd_My_SuperQc_Report.Visible = true;
                    grd_My_SuperQc_Report.Rows.Clear();
                    grd_My_SuperQc_Report.Columns.Clear();
                    grd_My_SuperQc_Report.DataSource = null;
                    grd_My_SuperQc_Report.AutoGenerateColumns = true;
                    grd_My_SuperQc_Report.Refresh();

                    grd_My_SuperQc_Report.ColumnCount = 20;
                    grd_My_SuperQc_Report.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Ebrima", 7.75F, FontStyle.Bold);
                    grd_My_SuperQc_Report.ColumnHeadersHeight = 40;

                    grd_My_SuperQc_Report.Columns[0].Name = "Order_ID";
                    grd_My_SuperQc_Report.Columns[0].HeaderText = "Order_ID";
                    grd_My_SuperQc_Report.Columns[0].DataPropertyName = "Order_ID";
                    grd_My_SuperQc_Report.Columns[0].Width = 50;
                    grd_My_SuperQc_Report.Columns[0].Visible = false;

                    grd_My_SuperQc_Report.Columns[1].Name = "Order_Number";
                    grd_My_SuperQc_Report.Columns[1].HeaderText = "Order_Number";
                    grd_My_SuperQc_Report.Columns[1].DataPropertyName = "Client_Order_Number";
                    grd_My_SuperQc_Report.Columns[1].Width = 140;

                    grd_My_SuperQc_Report.Columns[2].Name = "Ref_number";
                    grd_My_SuperQc_Report.Columns[2].HeaderText = "Ref number";
                    grd_My_SuperQc_Report.Columns[2].DataPropertyName = "Client_Order_Ref";
                    grd_My_SuperQc_Report.Columns[2].Width = 125;

                    grd_My_SuperQc_Report.Columns[3].Name = "Date";
                    grd_My_SuperQc_Report.Columns[3].HeaderText = "Recived Date";
                    grd_My_SuperQc_Report.Columns[3].DataPropertyName = "Recived_Date";
                    grd_My_SuperQc_Report.Columns[3].Width = 195;
                    if (User_Role_Id == "1")
                    {
                        grd_My_SuperQc_Report.Columns[4].Name = "Client_name";
                        grd_My_SuperQc_Report.Columns[4].HeaderText = "CLIENT NAME";
                        grd_My_SuperQc_Report.Columns[4].DataPropertyName = "Client_Name";
                        grd_My_SuperQc_Report.Columns[4].Width = 125;

                        grd_My_SuperQc_Report.Columns[5].Name = "Sub_client";
                        grd_My_SuperQc_Report.Columns[5].HeaderText = "SUB PROCESS";
                        grd_My_SuperQc_Report.Columns[5].DataPropertyName = "Sub_ProcessName";
                        grd_My_SuperQc_Report.Columns[5].Width = 250;
                    }
                    else
                    {
                        grd_My_SuperQc_Report.Columns[4].Name = "Client_Number";
                        grd_My_SuperQc_Report.Columns[4].HeaderText = "CLIENT NAME";
                        grd_My_SuperQc_Report.Columns[4].DataPropertyName = "Client_Number";
                        grd_My_SuperQc_Report.Columns[4].Width = 125;

                        grd_My_SuperQc_Report.Columns[5].Name = "Subprocess_Number";
                        grd_My_SuperQc_Report.Columns[5].HeaderText = "SUB PROCESS";
                        grd_My_SuperQc_Report.Columns[5].DataPropertyName = "Subprocess_Number";
                        grd_My_SuperQc_Report.Columns[5].Width = 250;

                    }


                    grd_My_SuperQc_Report.Columns[6].Name = "Order_type";
                    grd_My_SuperQc_Report.Columns[6].HeaderText = "ORDER TYPE";
                    grd_My_SuperQc_Report.Columns[6].DataPropertyName = "Order_Type";
                    grd_My_SuperQc_Report.Columns[6].Width = 180;

                    grd_My_SuperQc_Report.Columns[7].Name = "Borrower_Name";
                    grd_My_SuperQc_Report.Columns[7].HeaderText = "Borrower Name";
                    grd_My_SuperQc_Report.Columns[7].DataPropertyName = "Borrower_Name";
                    grd_My_SuperQc_Report.Columns[7].Width = 150;

                    grd_My_SuperQc_Report.Columns[8].Name = "Address";
                    grd_My_SuperQc_Report.Columns[8].HeaderText = "Barrower Address";
                    grd_My_SuperQc_Report.Columns[8].DataPropertyName = "Address";
                    grd_My_SuperQc_Report.Columns[8].Width = 150;

                    grd_My_SuperQc_Report.Columns[9].Name = "Abbreviation";
                    grd_My_SuperQc_Report.Columns[9].HeaderText = "Abbreviation";
                    grd_My_SuperQc_Report.Columns[9].DataPropertyName = "Abbreviation";
                    grd_My_SuperQc_Report.Columns[9].Width = 120;

                    grd_My_SuperQc_Report.Columns[10].Name = "County";
                    grd_My_SuperQc_Report.Columns[10].HeaderText = "COUNTY";
                    grd_My_SuperQc_Report.Columns[10].DataPropertyName = "County";
                    grd_My_SuperQc_Report.Columns[10].Width = 120;

                    grd_My_SuperQc_Report.Columns[11].Name = "Order_Status";
                    grd_My_SuperQc_Report.Columns[11].HeaderText = "Order Status";
                    grd_My_SuperQc_Report.Columns[11].DataPropertyName = "Order_Status";
                    grd_My_SuperQc_Report.Columns[11].Width = 100;


                    grd_My_SuperQc_Report.Columns[12].Name = "User Name";
                    grd_My_SuperQc_Report.Columns[12].HeaderText = "User Name";
                    grd_My_SuperQc_Report.Columns[12].DataPropertyName = "User_Name";
                    grd_My_SuperQc_Report.Columns[12].Width = 100;

                    grd_My_SuperQc_Report.Columns[13].Name = "empcode";
                    grd_My_SuperQc_Report.Columns[13].HeaderText = "EMP CODE";
                    grd_My_SuperQc_Report.Columns[13].DataPropertyName = "DRN_EMP_CODE";
                    grd_My_SuperQc_Report.Columns[13].Width = 100;

                    grd_My_SuperQc_Report.Columns[14].Name = "jobrole";
                    grd_My_SuperQc_Report.Columns[14].HeaderText = "JOB ROLE";
                    grd_My_SuperQc_Report.Columns[14].DataPropertyName = "Emp_Job_Role";
                    grd_My_SuperQc_Report.Columns[14].Width = 100;

                    grd_My_SuperQc_Report.Columns[15].Name = "shift";
                    grd_My_SuperQc_Report.Columns[15].HeaderText = "SHIFT";
                    grd_My_SuperQc_Report.Columns[15].DataPropertyName = "Shift_Type_Name";
                    grd_My_SuperQc_Report.Columns[15].Width = 100;

                    grd_My_SuperQc_Report.Columns[16].Name = "reporting_to1";
                    grd_My_SuperQc_Report.Columns[16].HeaderText = "REPORTING TO 1";
                    grd_My_SuperQc_Report.Columns[16].DataPropertyName = "Reporting_To_1";
                    grd_My_SuperQc_Report.Columns[16].Width = 100;

                    grd_My_SuperQc_Report.Columns[17].Name = "reportingto2";
                    grd_My_SuperQc_Report.Columns[17].HeaderText = "REPORTING To 2";
                    grd_My_SuperQc_Report.Columns[17].DataPropertyName = "Reporting_To_2";
                    grd_My_SuperQc_Report.Columns[17].Width = 100;


                    grd_My_SuperQc_Report.Columns[18].Name = "Production Date";
                    grd_My_SuperQc_Report.Columns[18].HeaderText = "Production Date";
                    grd_My_SuperQc_Report.Columns[18].DataPropertyName = "Order_Production_Date";
                    grd_My_SuperQc_Report.Columns[18].Width = 100;

                    grd_My_SuperQc_Report.Columns[19].Name = "Document List Name";
                    grd_My_SuperQc_Report.Columns[19].HeaderText = "Document List Name";
                    grd_My_SuperQc_Report.Columns[19].DataPropertyName = "Document_List_Name";
                    grd_My_SuperQc_Report.Columns[19].Width = 100;

                    grd_My_SuperQc_Report.Visible = true;
                    grd_My_SuperQc_Report.DataSource = dt_Status;

                }
                else
                {
                    lbl_Superqc_Error.Visible = true;
                    lbl_Superqc_Error.Text = "Record not found";
                    grd_My_SuperQc_Report.Visible = false;
                    grd_My_SuperQc_Report.DataSource = null;

                }

            }
        }

        private void Load_My_Check_List_Superqc_data()
        {
            if (Validation_My_superqc_report() != false)
            {
                DateTime Fromdate = Convert.ToDateTime(dtp_MySuperqcFrom.Text.ToString());
                DateTime Todate = Convert.ToDateTime(dtp_MySuperqc_To.Text.ToString());
                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;

                Hashtable ht_Status = new Hashtable();
                System.Data.DataTable dt_Status = new System.Data.DataTable();

                dt_Status.Rows.Clear();
                string From_Date = Fromdate.ToString("MM/dd/yyyy");
                string To_Date = Todate.ToString("MM/dd/yyyy");
                rptDoc = new Reports.CrystalReport.Order_Check_List_Report();

                Logon_To_Crystal();
                string Sub_Client;
                string Client;

                int Client_Id, Sub_Client_Id, User_Id;
                if (ddl_MySuperqc_Client.SelectedIndex > 0)
                {
                    Client_Id = int.Parse(ddl_MySuperqc_Client.SelectedValue.ToString());
                    Client = ddl_MySuperqc_Subprocess.SelectedValue.ToString();
                }
                else
                {
                    Client_Id = 0;

                    Client = "ALL";

                }
                if (ddl_MySuperqc_Subprocess.SelectedIndex > 0)
                {
                    Sub_Client_Id = int.Parse(ddl_MySuperqc_Subprocess.SelectedValue.ToString());
                    Sub_Client = ddl_MySuperqc_Subprocess.SelectedValue.ToString();
                }
                else
                {
                    Sub_Client_Id = 0;
                    Sub_Client = "ALL";

                }

                if (Client == "ALL" && Sub_Client == "ALL")
                {
                    rptDoc.SetParameterValue("@Trans", "SELECT_DATE_RANGE_WISE");
                }
                else if (Client != "ALL" && Sub_Client == "ALL")
                {
                    rptDoc.SetParameterValue("@Trans", "CLIENT_WISE");
                }
                else if (Client != "ALL" && Sub_Client != "ALL")
                {
                    rptDoc.SetParameterValue("@Trans", "CLEINT_SUB_CLIENT_WISE");
                }
                else if (Client != "ALL" && Sub_Client != "ALL")
                {
                    rptDoc.SetParameterValue("@Trans", "CLEINT_SUB_CLIENT_USER_WISE");
                }
                rptDoc.SetParameterValue("@Task", int.Parse(lbl_My_Superqc_Task.SelectedValue.ToString()));
                rptDoc.SetParameterValue("@From_date", From_Date);
                rptDoc.SetParameterValue("@To_date", To_Date);
                rptDoc.SetParameterValue("@Order_Id", 0);
                rptDoc.SetParameterValue("@Client_Id", Client_Id);
                rptDoc.SetParameterValue("@Sub_Client_Id", Sub_Client_Id);
                rptDoc.SetParameterValue("@User_Id", userid);
                rptDoc.SetParameterValue("@Work_Type_Id", 3);
                // rptDoc.SetParameterValue("@Log_In_Userid", Loged_In_User_Id);
                crv_My_Superqc.ReportSource = rptDoc;

            }
        }


        private void Load_Orders_Error_Info_My_Superqc_Report()
        {
            if (Validation_My_superqc_report() != false)
            {
                DateTime Fromdate = Convert.ToDateTime(dtp_MySuperqcFrom.Text.ToString());
                DateTime Todate = Convert.ToDateTime(dtp_MySuperqc_To.Text.ToString());
                DateTimeFormatInfo usDtfi = new CultureInfo("en-US", false).DateTimeFormat;
                Hashtable ht_Status = new Hashtable();
                System.Data.DataTable dt_Status = new System.Data.DataTable();

                dt_Status.Rows.Clear();
                string From_Date = Fromdate.ToString("MM/dd/yyyy");
                string To_Date = Todate.ToString("MM/dd/yyyy");

                ht_Status.Clear();
                dt_Status.Clear();
                string Client, SubProcess;

                if (ddl_MySuperqc_Client.SelectedIndex > 0)
                {

                    Client = ddl_MySuperqc_Client.SelectedValue.ToString();
                }
                else
                {
                    Client = "ALL";
                }
                if (ddl_MySuperqc_Subprocess.SelectedIndex > 0)
                {
                    SubProcess = ddl_MySuperqc_Subprocess.SelectedValue.ToString();
                }
                else
                {
                    SubProcess = "ALL";
                }
                if (Client == "ALL")
                {
                    ht_Status.Add("@Trans", "SELECT_MY_ERROR_DATE_RANGE");
                    ht_Status.Add("@Fromdate", From_Date);
                    ht_Status.Add("@Todate", To_Date);
                    ht_Status.Add("@Work_Type", 3);

                    ht_Status.Add("@Log_In_Userid", Loged_In_User_Id);
                    dt_Status = dataaccess.ExecuteSP("Sp_Superqc_Rpt_Order_ErrorReport", ht_Status);

                }
                else if (Client != "ALL" && SubProcess == "ALL")
                {
                    ht_Status.Add("@Trans", "CLIENT_WISE");
                    ht_Status.Add("@Fromdate", From_Date);
                    ht_Status.Add("@Todate", To_Date);
                    ht_Status.Add("@Client_Id", Client);
                    ht_Status.Add("@Work_Type", 3);

                    dt_Status = dataaccess.ExecuteSP("Sp_Superqc_Rpt_Order_ErrorReport", ht_Status);

                }
                else if (Client != "ALL" && SubProcess != "ALL")
                {
                    ht_Status.Add("@Trans", "CLIENT_SUB_PROCESS_WISE");

                    ht_Status.Add("@Fromdate", From_Date);
                    ht_Status.Add("@Todate", To_Date);
                    ht_Status.Add("@Client_Id", Client);
                    ht_Status.Add("@Sub_Process_Id", SubProcess);
                    ht_Status.Add("@Work_Type", 3);
                    dt_Status = dataaccess.ExecuteSP("Sp_Superqc_Rpt_Order_ErrorReport", ht_Status);

                }

                dtordererror.Clear();
                dtordererror = dt_Status;

                if (dtordererror.Rows.Count > 0)
                {
                    grd_My_SuperQc_Report.Rows.Clear();
                    grd_My_SuperQc_Report.Visible = true;

                    grd_My_SuperQc_Report.DataSource = null;
                    grd_My_SuperQc_Report.AutoGenerateColumns = false;

                    grd_My_SuperQc_Report.ColumnCount = 18;
                    grd_My_SuperQc_Report.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Ebrima", 7.75F, FontStyle.Bold);
                    grd_My_SuperQc_Report.ColumnHeadersHeight = 40;

                    grd_My_SuperQc_Report.Columns[0].Name = "Orderid";
                    grd_My_SuperQc_Report.Columns[0].HeaderText = "Order Id";
                    grd_My_SuperQc_Report.Columns[0].DataPropertyName = "Order_ID";
                    grd_My_SuperQc_Report.Columns[0].Width = 50;
                    grd_My_SuperQc_Report.Columns[0].Visible = false;

                    grd_My_SuperQc_Report.Columns[1].Name = "Client_Order_Number";
                    grd_My_SuperQc_Report.Columns[1].HeaderText = "Order_Number";
                    grd_My_SuperQc_Report.Columns[1].DataPropertyName = "Client Order Number";
                    grd_My_SuperQc_Report.Columns[1].Width = 140;

                    if (User_Role_Id == "1")
                    {
                        grd_My_SuperQc_Report.Columns[2].Name = "Client_Name";
                        grd_My_SuperQc_Report.Columns[2].HeaderText = "Client Name";
                        grd_My_SuperQc_Report.Columns[2].DataPropertyName = "Client";
                        grd_My_SuperQc_Report.Columns[2].Width = 120;

                        grd_My_SuperQc_Report.Columns[3].Name = "Sub_ProcessName";
                        grd_My_SuperQc_Report.Columns[3].HeaderText = "Subprocess Name";
                        grd_My_SuperQc_Report.Columns[3].DataPropertyName = "Subprocess";
                        grd_My_SuperQc_Report.Columns[3].Width = 300;
                    }
                    else
                    {

                        grd_My_SuperQc_Report.Columns[2].Name = "Client_Number";
                        grd_My_SuperQc_Report.Columns[2].HeaderText = "CLIENT NAME";
                        grd_My_SuperQc_Report.Columns[2].DataPropertyName = "Client_Number";
                        grd_My_SuperQc_Report.Columns[2].Width = 125;

                        grd_My_SuperQc_Report.Columns[3].Name = "Subprocess_Number";
                        grd_My_SuperQc_Report.Columns[3].HeaderText = "SUB PROCESS";
                        grd_My_SuperQc_Report.Columns[3].DataPropertyName = "Subprocess_Number";
                        grd_My_SuperQc_Report.Columns[3].Width = 250;
                    }


                    grd_My_SuperQc_Report.Columns[4].Name = "Order_Type";
                    grd_My_SuperQc_Report.Columns[4].HeaderText = "Order Type";
                    grd_My_SuperQc_Report.Columns[4].DataPropertyName = "Order Type";
                    grd_My_SuperQc_Report.Columns[4].Width = 300;

                    grd_My_SuperQc_Report.Columns[5].Name = "Error_Type";
                    grd_My_SuperQc_Report.Columns[5].HeaderText = "Error Type";
                    grd_My_SuperQc_Report.Columns[5].DataPropertyName = "Error Type";
                    grd_My_SuperQc_Report.Columns[5].Width = 150;

                    grd_My_SuperQc_Report.Columns[6].Name = "Error_description";
                    grd_My_SuperQc_Report.Columns[6].HeaderText = "Error Description";
                    grd_My_SuperQc_Report.Columns[6].DataPropertyName = "Error description";
                    grd_My_SuperQc_Report.Columns[6].Width = 200;

                    grd_My_SuperQc_Report.Columns[7].Name = "Comments";
                    grd_My_SuperQc_Report.Columns[7].HeaderText = "Comments";
                    grd_My_SuperQc_Report.Columns[7].DataPropertyName = "Comments";
                    grd_My_SuperQc_Report.Columns[7].Width = 200;

                    grd_My_SuperQc_Report.Columns[8].Name = "Error_On_Status";
                    grd_My_SuperQc_Report.Columns[8].HeaderText = "Error Status";
                    grd_My_SuperQc_Report.Columns[8].DataPropertyName = "Error On Status";
                    grd_My_SuperQc_Report.Columns[8].Width = 150;

                    grd_My_SuperQc_Report.Columns[9].Name = "Error_On_User_Name";
                    grd_My_SuperQc_Report.Columns[9].HeaderText = "Error User Name";
                    grd_My_SuperQc_Report.Columns[9].DataPropertyName = "Error On User Name";
                    grd_My_SuperQc_Report.Columns[9].Width = 150;


                    grd_My_SuperQc_Report.Columns[10].Name = "DRNEmpCode";
                    grd_My_SuperQc_Report.Columns[10].HeaderText = "EMP CODE";
                    grd_My_SuperQc_Report.Columns[10].DataPropertyName = "DRN_Emp_Code";
                    grd_My_SuperQc_Report.Columns[10].Width = 120;


                    grd_My_SuperQc_Report.Columns[11].Name = "Emp_Job_Role";
                    grd_My_SuperQc_Report.Columns[11].HeaderText = "JOB ROLE";
                    grd_My_SuperQc_Report.Columns[11].DataPropertyName = "Emp_Job_Role";
                    grd_My_SuperQc_Report.Columns[11].Width = 120;

                    grd_My_SuperQc_Report.Columns[12].Name = "ShiftTypeName";
                    grd_My_SuperQc_Report.Columns[12].HeaderText = "SHIFT";
                    grd_My_SuperQc_Report.Columns[12].DataPropertyName = "Shift_Type_Name";
                    grd_My_SuperQc_Report.Columns[12].Width = 120;

                    grd_My_SuperQc_Report.Columns[13].Name = "ReportingTo1";
                    grd_My_SuperQc_Report.Columns[13].HeaderText = "REPORTING TO 1";
                    grd_My_SuperQc_Report.Columns[13].DataPropertyName = "Reporting_To_1";
                    grd_My_SuperQc_Report.Columns[13].Width = 120;

                    grd_My_SuperQc_Report.Columns[14].Name = "ReportingTo2";
                    grd_My_SuperQc_Report.Columns[14].HeaderText = "REPORTING TO 2";
                    grd_My_SuperQc_Report.Columns[14].DataPropertyName = "Reporting_To_2";
                    grd_My_SuperQc_Report.Columns[14].Width = 120;


                    grd_My_SuperQc_Report.Columns[15].Name = "Error_From_Status";
                    grd_My_SuperQc_Report.Columns[15].HeaderText = "QC Status";
                    grd_My_SuperQc_Report.Columns[15].DataPropertyName = "Error From Status";
                    grd_My_SuperQc_Report.Columns[15].Width = 150;

                    grd_My_SuperQc_Report.Columns[16].Name = "Error_Enter_By_Username";
                    grd_My_SuperQc_Report.Columns[16].HeaderText = "QC Username";
                    grd_My_SuperQc_Report.Columns[16].DataPropertyName = "Error From Username";
                    grd_My_SuperQc_Report.Columns[16].Width = 160;

                    grd_My_SuperQc_Report.Columns[17].Name = "Order_Production_Date";
                    grd_My_SuperQc_Report.Columns[17].HeaderText = "Production Date";
                    grd_My_SuperQc_Report.Columns[17].DataPropertyName = "Order Production Date";
                    grd_My_SuperQc_Report.Columns[17].Width = 120;

                    grd_My_SuperQc_Report.DataSource = dt_Status;
                }
                else
                {
                    grd_My_SuperQc_Report.Rows.Clear();
                    grd_My_SuperQc_Report.Visible = false;
                    grd_My_SuperQc_Report.DataSource = null;
                }
            }
        }

        private void btn_My_RefreshSuperQc_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            if (validate_My_Super_Qc() != false)
            {
                if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
                {
                    First_My_report_Superqc_Design();
                    crv_My_Superqc.Visible = false;
                    grd_My_SuperQc_Report.Visible = true;
                    grd_My_SuperQc_Report.Columns.Clear();
                    Load_Grd_Superqc_My_User_Production_Report();
                }


                else if (trw_My_SuperQc.SelectedNode.Text == "User Production Count")
                {

                    First_My_report_Superqc_Design();
                    grd_My_SuperQc_Report.Rows.Clear();
                    crv_My_Superqc.Visible = false;
                    grd_My_SuperQc_Report.Visible = true;
                    grd_My_SuperQc_Report.Columns.Clear();
                    Load_Grd_Superqc_My_User_Production_Report();

                }
                else if (trw_My_SuperQc.SelectedNode.Text == "Orders Document List Report")
                {
                    Order_Document_list_All_Superqc_design();
                    grd_My_SuperQc_Report.AutoGenerateColumns = true;
                    grd_My_SuperQc_Report.DataSource = null;
                    grd_My_SuperQc_Report.Visible = true;
                    crv_My_Superqc.Visible = false;
                    Export_Title_Name = "Document_List_Report";
                    lbl_Rework_Myerrror.Visible = false;
                    Load_Order_Document_List_Superqc_Report();
                }
                else if (trw_My_SuperQc.SelectedNode.Text == "Orders Check List Report")
                {
                    Order_My_Superqc_Chklist_Design();
                    grd_My_SuperQc_Report.AutoGenerateColumns = true;
                    grd_My_SuperQc_Report.DataSource = null;
                    lbl_Rework_Myerrror.Visible = false;
                    crv_My_Superqc.Visible = true;
                    Load_My_Check_List_Superqc_data();
                }
                else if (trw_My_SuperQc.SelectedNode.Text == "Orders Error Info Report")
                {
                    Order_Error_My_Superqc_Report();
                    grd_My_SuperQc_Report.DataSource = null;
                    grd_My_SuperQc_Report.Visible = true;
                    crv_My_Superqc.Visible = false;
                    Export_Title_Name = "Error_Info_Report";
                    lbl_Rework_Myerrror.Visible = false;
                    Load_Orders_Error_Info_My_Superqc_Report();
                }
                else
                {
                    crv_My_Superqc.Visible = false;
                    grd_My_SuperQc_Report.Visible = false;
                    lbl_Rework_Myerrror.Visible = true;
                }
            }
        }

        private void btn_MyExport_Superqc_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            Export_Superqc_MY_Wise_ReportData();

        }

        private void Export_Superqc_MY_Wise_ReportData()
        {
            System.Data.DataTable dt = new System.Data.DataTable();

            //Adding the Columns
            foreach (DataGridViewColumn column in grd_My_SuperQc_Report.Columns)
            {
                if (column.HeaderText != "")
                {
                    if (column.ValueType == null)
                    {
                        dt.Columns.Add(column.HeaderText, typeof(string));
                    }
                    else
                    {
                        if (column.ValueType == typeof(int))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(int));

                        }
                        else if (column.ValueType == typeof(decimal))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(decimal));

                        }
                        else if (column.ValueType == typeof(DateTime))
                        {

                            dt.Columns.Add(column.HeaderText, typeof(string));
                        }
                        else
                        {
                            dt.Columns.Add(column.HeaderText, column.ValueType);
                        }
                    }
                }
            }
            //Adding the Rows
            foreach (DataGridViewRow row in grd_My_SuperQc_Report.Rows)
            {
                dt.Rows.Add();
                foreach (DataGridViewCell cell in row.Cells)
                {
                    if (cell.Value != null && cell.Value.ToString() != "")
                    {
                        dt.Rows[dt.Rows.Count - 1][cell.ColumnIndex] = cell.Value.ToString();
                    }
                }
            }
            //Exporting to Excel
            string folderPath = "C:\\Temp\\";
            Path1 = folderPath + DateTime.Now.ToString("dd-MM-yyyy-hh-mm-ss") + "Superqc_All_Client_Production.xlsx";
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }
            using (XLWorkbook wb = new XLWorkbook())
            {
                wb.Worksheets.Add(dt, "Superqc All Production Report");
                try
                {
                    wb.SaveAs(Path1);
                }
                catch (Exception ex)
                {
                    MessageBox.Show("File is Opened, Please Close and Export it");
                }
            }

            System.Diagnostics.Process.Start(Path1);
        }

        private void btn_AllExport_Superqc_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            Export_Superqc_All_Wise_ReportData();

        }

        private void Export_Superqc_All_Wise_ReportData()
        {
            System.Data.DataTable dt = new System.Data.DataTable();
            //Adding the Columns
            foreach (DataGridViewColumn column in grd_All_SuperQc_Report.Columns)
            {
                if (column.HeaderText != "")
                {
                    if (column.ValueType == null)
                    {
                        dt.Columns.Add(column.HeaderText, typeof(string));
                    }
                    else
                    {
                        if (column.ValueType == typeof(int))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(int));

                        }
                        else if (column.ValueType == typeof(decimal))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(decimal));

                        }
                        else if (column.ValueType == typeof(DateTime))
                        {

                            dt.Columns.Add(column.HeaderText, typeof(string));
                        }
                        else
                        {
                            dt.Columns.Add(column.HeaderText, column.ValueType);
                        }
                    }
                }
            }
            //Adding the Rows
            foreach (DataGridViewRow row in grd_All_SuperQc_Report.Rows)
            {
                dt.Rows.Add();
                foreach (DataGridViewCell cell in row.Cells)
                {
                    if (cell.Value != null && cell.Value.ToString() != "")
                    {

                        dt.Rows[dt.Rows.Count - 1][cell.ColumnIndex] = cell.Value.ToString();
                    }

                }
            }
            //Exporting to Excel
            string folderPath = "C:\\Temp\\";
            Path1 = folderPath + DateTime.Now.ToString("dd-MM-yyyy-hh-mm-ss") + "Superqc_All_Client_Production.xlsx";
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }
            using (XLWorkbook wb = new XLWorkbook())
            {
                wb.Worksheets.Add(dt, "Superqc My Production Report");
                try
                {
                    wb.SaveAs(Path1);
                }
                catch (Exception ex)
                {
                    MessageBox.Show("File is Opened, Please Close and Export it");
                }
            }
            System.Diagnostics.Process.Start(Path1);
        }

        private void grd_Rework_Reports_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            load_Progressbar.Start_progres();
            if (trw_Rework_Report.SelectedNode.Text == "User Production Report")
            {
                if (e.ColumnIndex == 12)
                {
                    Ordermanagement_01.Rework_Superqc_Order_Entry OrderEntry = new Ordermanagement_01.Rework_Superqc_Order_Entry(int.Parse(grd_Rework_Reports.Rows[e.RowIndex].Cells[11].Value.ToString()), userid, "Rework", User_Role_Id, Production_Date);
                    OrderEntry.Show();
                }
            }
            else if (trw_Rework_Report.SelectedNode.Text == "Orders Document List Report")
            {
                if (e.ColumnIndex == 1)
                {
                    Ordermanagement_01.Rework_Superqc_Order_Entry OrderEntry = new Ordermanagement_01.Rework_Superqc_Order_Entry(int.Parse(grd_Rework_Reports.Rows[e.RowIndex].Cells[0].Value.ToString()), userid, "Rework", User_Role_Id, Production_Date);
                    OrderEntry.Show();
                }
            }
            else if (trw_Rework_Report.SelectedNode.Text == "Orders Document List Report")
            {
                if (e.ColumnIndex == 3)
                {
                    Ordermanagement_01.Rework_Superqc_Order_Entry OrderEntry = new Ordermanagement_01.Rework_Superqc_Order_Entry(int.Parse(grd_Rework_Reports.Rows[e.RowIndex].Cells[2].Value.ToString()), userid, "Rework", User_Role_Id, Production_Date);
                    OrderEntry.Show();
                }
            }
        }

        private void grd_Rework_MyReport_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            load_Progressbar.Start_progres();
            //clsLoader.startProgress();
            if (trw_Rework_Myreport.SelectedNode.Text == "User Production Report")
            {
                if (e.ColumnIndex == 12)
                {

                    Ordermanagement_01.Rework_Superqc_Order_Entry OrderEntry = new Ordermanagement_01.Rework_Superqc_Order_Entry(int.Parse(grd_Rework_MyReport.Rows[e.RowIndex].Cells[11].Value.ToString()), userid, "Rework", User_Role_Id.ToString(), Production_Date);
                    OrderEntry.Show();
                }
            }
            else if (trw_Rework_Myreport.SelectedNode.Text == "Orders Document List Report")
            {
                if (e.ColumnIndex == 2)
                {
                    Ordermanagement_01.Rework_Superqc_Order_Entry OrderEntry = new Ordermanagement_01.Rework_Superqc_Order_Entry(int.Parse(grd_Rework_MyReport.Rows[e.RowIndex].Cells[1].Value.ToString()), userid, "Rework", User_Role_Id.ToString(), Production_Date);
                    OrderEntry.Show();
                }
            }
            else if (trw_Rework_Myreport.SelectedNode.Text == "Orders Document List Report")
            {
                if (e.ColumnIndex == 3)
                {
                    Ordermanagement_01.Rework_Superqc_Order_Entry OrderEntry = new Ordermanagement_01.Rework_Superqc_Order_Entry(int.Parse(grd_Rework_MyReport.Rows[e.RowIndex].Cells[2].Value.ToString()), userid, "Rework", User_Role_Id.ToString(), Production_Date);
                    OrderEntry.Show();
                }
            }
            // clsLoader.stopProgress();
        }

        private void ddl_Superqc_client_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ddl_Superqc_client.SelectedIndex != 0)
            {
                int clientid = int.Parse(ddl_Superqc_client.SelectedValue.ToString());
                if (User_Role_Id == "1")
                {
                    dbc.BindSubProcessName_rpt(ddl_Superqc_Subprocess, clientid);
                }
                else
                {
                    dbc.BindSubProcessNumber(ddl_Superqc_Subprocess, clientid);
                }
                ddl_Superqc_Subprocess.Focus();
            }
            else
            {
                if (User_Role_Id == "1")
                {
                    dbc.BindSubProcessName_rpt(ddl_Superqc_Subprocess, 0);
                }
                else
                {

                    dbc.BindSubProcessNumber(ddl_Superqc_Subprocess, 0);
                }
            }
        }

        private void ddl_MySuperqc_Client_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ddl_MySuperqc_Client.SelectedIndex != 0)
            {
                int clientid = int.Parse(ddl_MySuperqc_Client.SelectedValue.ToString());
                if (User_Role_Id == "1")
                {
                    dbc.BindSubProcessName_rpt(ddl_MySuperqc_Subprocess, clientid);
                }
                else
                {
                    dbc.BindSubProcessNumber(ddl_MySuperqc_Subprocess, clientid);
                }

                ddl_MySuperqc_Subprocess.Focus();
            }
            else
            {
                if (User_Role_Id == "1")
                {
                    dbc.BindSubProcessName_rpt(ddl_MySuperqc_Subprocess, 0);
                }
                else
                {
                    dbc.BindSubProcessNumber(ddl_MySuperqc_Subprocess, 0);

                }
            }
        }

        private void grd_All_SuperQc_Report_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            load_Progressbar.Start_progres();
            //clsLoader.startProgress();
            if (trw_All_SuperQc.SelectedNode.Text == "User Production Report")
            {
                if (e.ColumnIndex == 14)
                {
                    Ordermanagement_01.Rework_Superqc_Order_Entry OrderEntry = new Ordermanagement_01.Rework_Superqc_Order_Entry(int.Parse(grd_All_SuperQc_Report.Rows[e.RowIndex].Cells[13].Value.ToString()), userid, "Superqc", User_Role_Id, Production_Date);
                    OrderEntry.Show();
                }
            }
            else if (trw_All_SuperQc.SelectedNode.Text == "Orders Document List Report")
            {
                if (e.ColumnIndex == 2)
                {
                    Ordermanagement_01.Rework_Superqc_Order_Entry OrderEntry = new Ordermanagement_01.Rework_Superqc_Order_Entry(int.Parse(grd_All_SuperQc_Report.Rows[e.RowIndex].Cells[1].Value.ToString()), userid, "Superqc", User_Role_Id, Production_Date);
                    OrderEntry.Show();
                }
            }
            else if (trw_All_SuperQc.SelectedNode.Text == "Orders Error Info Report")
            {
                if (e.ColumnIndex == 1)
                {
                    Ordermanagement_01.Rework_Superqc_Order_Entry OrderEntry = new Ordermanagement_01.Rework_Superqc_Order_Entry(int.Parse(grd_All_SuperQc_Report.Rows[e.RowIndex].Cells[0].Value.ToString()), userid, "Superqc", User_Role_Id, Production_Date);
                    OrderEntry.Show();
                }
            }
        }

        private void grd_My_SuperQc_Report_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            load_Progressbar.Start_progres();
            if (trw_My_SuperQc.SelectedNode.Text == "User Production Report")
            {
                if (e.ColumnIndex == 14)
                {
                    Ordermanagement_01.Rework_Superqc_Order_Entry OrderEntry = new Ordermanagement_01.Rework_Superqc_Order_Entry(int.Parse(grd_My_SuperQc_Report.Rows[e.RowIndex].Cells[13].Value.ToString()), userid, "Superqc", User_Role_Id, Production_Date);
                    OrderEntry.Show();
                }
            }
            else if (trw_My_SuperQc.SelectedNode.Text == "Orders Document List Report")
            {
                if (e.ColumnIndex == 2)
                {
                    Ordermanagement_01.Rework_Superqc_Order_Entry OrderEntry = new Ordermanagement_01.Rework_Superqc_Order_Entry(int.Parse(grd_My_SuperQc_Report.Rows[e.RowIndex].Cells[1].Value.ToString()), userid, "Superqc", User_Role_Id, Production_Date);
                    OrderEntry.Show();
                }
            }
            else if (trw_My_SuperQc.SelectedNode.Text == "Orders Error Info Report")
            {
                if (e.ColumnIndex == 1)
                {
                    Ordermanagement_01.Rework_Superqc_Order_Entry OrderEntry = new Ordermanagement_01.Rework_Superqc_Order_Entry(int.Parse(grd_My_SuperQc_Report.Rows[e.RowIndex].Cells[0].Value.ToString()), userid, "Superqc", User_Role_Id, Production_Date);
                    OrderEntry.Show();
                }
            }
        }

        private void btn_Rework_Export_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            Export_Rework_MY_Wise_ReportData();

        }

        private void Export_Rework_MY_Wise_ReportData()
        {
            System.Data.DataTable dt = new System.Data.DataTable();
            //Adding the Columns
            foreach (DataGridViewColumn column in grd_Rework_Reports.Columns)
            {
                if (column.HeaderText != "")
                {
                    if (column.ValueType == null)
                    {
                        dt.Columns.Add(column.HeaderText, typeof(string));
                    }
                    else
                    {
                        if (column.ValueType == typeof(int))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(int));

                        }
                        else if (column.ValueType == typeof(decimal))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(decimal));

                        }
                        else if (column.ValueType == typeof(DateTime))
                        {

                            dt.Columns.Add(column.HeaderText, typeof(string));
                        }
                        else
                        {
                            dt.Columns.Add(column.HeaderText, column.ValueType);
                        }
                    }
                }

            }
            //Adding the Rows
            foreach (DataGridViewRow row in grd_Rework_Reports.Rows)
            {
                dt.Rows.Add();
                foreach (DataGridViewCell cell in row.Cells)
                {
                    if (cell.Value != null && cell.Value.ToString() != "")
                    {
                        dt.Rows[dt.Rows.Count - 1][cell.ColumnIndex] = cell.Value.ToString();
                    }
                }
            }
            //Exporting to Excel
            string folderPath = "C:\\Temp\\";
            Path1 = folderPath + DateTime.Now.ToString("dd-MM-yyyy-hh-mm-ss") + "Rework_Production.xlsx";
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }
            using (XLWorkbook wb = new XLWorkbook())
            {
                wb.Worksheets.Add(dt, "Rework Report");
                try
                {
                    wb.SaveAs(Path1);
                }
                catch (Exception ex)
                {
                    MessageBox.Show("File is Opened, Please Close and Export it");
                }
            }
            System.Diagnostics.Process.Start(Path1);
        }

        private void button4_Click(object sender, EventArgs e)
        {


            Order_Search os = new Order_Search(userid, User_Role_Id, "", Production_Date);
            os.Show();



            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Order_Search(userid, User_Role_Id, "")); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 
        }

        private void lbl_Vendor_Waiting_for_Acceptance_Click(object sender, EventArgs e)
        {
            Vendors.Vendor_Order_Allocation va = new Vendors.Vendor_Order_Allocation("WAITING_FOR_ACCEPTANCE", userid, int.Parse(User_Role_Id));
            va.Show();
            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Vendors.Vendor_Order_Allocation("WAITING_FOR_ACCEPTANCE", userid, int.Parse(User_Role_Id))); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 
        }

        private void lbl_Vendor_Processing_Click(object sender, EventArgs e)
        {
            Vendors.Vendor_Order_Queau vorder = new Vendors.Vendor_Order_Queau(userid, int.Parse(User_Role_Id));
            vorder.Show();

            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Vendors.Vendor_Order_Queau(userid, int.Parse(User_Role_Id))); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 
        }

        private void lbl_Vendor_Returned_Click(object sender, EventArgs e)
        {
            Vendors.Vendors_Order_Move vr = new Vendors.Vendors_Order_Move(userid, User_Role_Id);
            vr.Show();

            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Vendors.Vendors_Order_Move(userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 
        }

        private void lbl_Vendor_Rejected_Click(object sender, EventArgs e)
        {
            Vendors.Vendor_Order_Allocation va = new Vendors.Vendor_Order_Allocation("GET_VENDORS_REJECTED_ORDER", userid, int.Parse(User_Role_Id));
            va.Show();
            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Vendors.Vendor_Order_Allocation("GET_VENDORS_REJECTED_ORDER", userid, int.Parse(User_Role_Id))); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 
        }

        private void btn_Emp_Prduction_Click(object sender, EventArgs e)
        {
            if (txt_First_date.Text != "" && txt_Second_Date.Text != "")
            {
                load_Progressbar.Start_progres();
                DateTime dtfirsttime = Convert.ToDateTime(txt_First_date.Text);
                DateTime dtsecondtime = Convert.ToDateTime(txt_Second_Date.Text);

                string F_Date = dtfirsttime.ToString("MM/dd/yyyy");
                string T_Date = dtsecondtime.ToString("MM/dd/yyyy");

                Hashtable htemp = new Hashtable();
                System.Data.DataTable dtemp = new System.Data.DataTable();

                //Inserting the Temp Values 
                Hashtable htinsert = new Hashtable();
                System.Data.DataTable dtinsert = new System.Data.DataTable();
                htinsert.Add("@Trans", "INSERT_INTO_TEMP_ALL");
                htinsert.Add("@Firstdate", F_Date.ToString());
                htinsert.Add("@Second_Date", T_Date.ToString());
                dtinsert = dataaccess.ExecuteSP("Sp_User_24_7_Production_Report", htinsert);

                dtemp.Rows.Clear();
                htemp.Add("@Trans", "SELECT_ALL");
                htemp.Add("@Firstdate", F_Date.ToString());
                htemp.Add("@Second_Date", T_Date.ToString());
                dtemp = dataaccess.ExecuteSP("Sp_User_24_7_Production_Report", htemp);


                grd_Employee_Production.Columns[1].Width = 120;
                grd_Employee_Production.Columns[2].Width = 80;
                grd_Employee_Production.Columns[3].Width = 100;
                grd_Employee_Production.Columns[4].Width = 70;
                grd_Employee_Production.Columns[5].Width = 70;
                grd_Employee_Production.Columns[6].Width = 100;
                grd_Employee_Production.Columns[7].Width = 100;
                grd_Employee_Production.Columns[8].Width = 100;

                grd_Employee_Production.Columns[34].Width = 150;
                grd_Employee_Production.Columns[35].Width = 150;
                grd_Employee_Production.Columns[36].Width = 150;
                grd_Employee_Production.Columns[37].Width = 150;
                grd_Employee_Production.Columns[38].Width = 150;

                grd_Employee_Production.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Ebrima", 7.75F, FontStyle.Bold);
                grd_Employee_Production.ColumnHeadersHeight = 42;

                if (dtemp.Rows.Count > 0)
                {
                    grd_Employee_Production.Rows.Clear();

                    grd_Employee_Production.Columns[0].ValueType = typeof(int);
                    grd_Employee_Production.Columns[1].ValueType = typeof(string);
                    grd_Employee_Production.Columns[2].ValueType = System.Type.GetType("System.Int32");
                    grd_Employee_Production.Columns[3].ValueType = typeof(string);
                    grd_Employee_Production.Columns[4].ValueType = typeof(int);
                    grd_Employee_Production.Columns[5].ValueType = typeof(int);
                    grd_Employee_Production.Columns[6].ValueType = typeof(string);
                    grd_Employee_Production.Columns[7].ValueType = typeof(string);
                    grd_Employee_Production.Columns[8].ValueType = typeof(string);
                    grd_Employee_Production.Columns[9].ValueType = typeof(int);
                    grd_Employee_Production.Columns[10].ValueType = typeof(int);
                    grd_Employee_Production.Columns[11].ValueType = typeof(int);
                    grd_Employee_Production.Columns[12].ValueType = typeof(int);
                    grd_Employee_Production.Columns[13].ValueType = typeof(int);
                    grd_Employee_Production.Columns[14].ValueType = typeof(int);
                    grd_Employee_Production.Columns[15].ValueType = typeof(int);
                    grd_Employee_Production.Columns[16].ValueType = typeof(int);
                    grd_Employee_Production.Columns[17].ValueType = typeof(int);
                    grd_Employee_Production.Columns[18].ValueType = typeof(int);
                    grd_Employee_Production.Columns[19].ValueType = typeof(int);
                    grd_Employee_Production.Columns[20].ValueType = typeof(int);
                    grd_Employee_Production.Columns[21].ValueType = typeof(int);
                    grd_Employee_Production.Columns[22].ValueType = typeof(int);
                    grd_Employee_Production.Columns[23].ValueType = typeof(int);
                    grd_Employee_Production.Columns[24].ValueType = typeof(int);
                    grd_Employee_Production.Columns[25].ValueType = typeof(int);
                    grd_Employee_Production.Columns[26].ValueType = typeof(int);
                    grd_Employee_Production.Columns[27].ValueType = typeof(int);
                    grd_Employee_Production.Columns[28].ValueType = typeof(int);
                    grd_Employee_Production.Columns[29].ValueType = typeof(int);
                    grd_Employee_Production.Columns[30].ValueType = typeof(int);
                    grd_Employee_Production.Columns[31].ValueType = typeof(int);
                    grd_Employee_Production.Columns[32].ValueType = typeof(int);
                    grd_Employee_Production.Columns[33].ValueType = typeof(int);

                    grd_Employee_Production.Columns[34].ValueType = typeof(string);
                    grd_Employee_Production.Columns[35].ValueType = typeof(string);
                    grd_Employee_Production.Columns[36].ValueType = typeof(string);
                    grd_Employee_Production.Columns[37].ValueType = typeof(string);
                    grd_Employee_Production.Columns[38].ValueType = typeof(string);

                    for (int i = 0; i < dtemp.Rows.Count; i++)
                    {
                        grd_Employee_Production.Rows.Add();
                        grd_Employee_Production.Rows[i].Cells[0].Value = i + 1;
                        grd_Employee_Production.Rows[i].Cells[1].Value = dtemp.Rows[i]["User_Name"].ToString();

                        grd_Employee_Production.Rows[i].Cells[9].Value = dtemp.Rows[i]["7_8"].ToString();
                        grd_Employee_Production.Rows[i].Cells[10].Value = dtemp.Rows[i]["8_9"].ToString();
                        grd_Employee_Production.Rows[i].Cells[11].Value = dtemp.Rows[i]["9_10"].ToString();
                        grd_Employee_Production.Rows[i].Cells[12].Value = dtemp.Rows[i]["10_11"].ToString();
                        grd_Employee_Production.Rows[i].Cells[13].Value = dtemp.Rows[i]["11_12"].ToString();
                        grd_Employee_Production.Rows[i].Cells[14].Value = dtemp.Rows[i]["12_13"].ToString();
                        grd_Employee_Production.Rows[i].Cells[15].Value = dtemp.Rows[i]["13_14"].ToString();
                        grd_Employee_Production.Rows[i].Cells[16].Value = dtemp.Rows[i]["14_15"].ToString();
                        grd_Employee_Production.Rows[i].Cells[17].Value = dtemp.Rows[i]["15_16"].ToString();
                        grd_Employee_Production.Rows[i].Cells[18].Value = dtemp.Rows[i]["16_17"].ToString();
                        grd_Employee_Production.Rows[i].Cells[19].Value = dtemp.Rows[i]["17_18"].ToString();
                        grd_Employee_Production.Rows[i].Cells[20].Value = dtemp.Rows[i]["18_19"].ToString();
                        grd_Employee_Production.Rows[i].Cells[21].Value = dtemp.Rows[i]["19_20"].ToString();
                        grd_Employee_Production.Rows[i].Cells[22].Value = dtemp.Rows[i]["20_21"].ToString();
                        grd_Employee_Production.Rows[i].Cells[23].Value = dtemp.Rows[i]["21_22"].ToString();
                        grd_Employee_Production.Rows[i].Cells[24].Value = dtemp.Rows[i]["22_23"].ToString();
                        grd_Employee_Production.Rows[i].Cells[25].Value = dtemp.Rows[i]["23_24"].ToString();
                        grd_Employee_Production.Rows[i].Cells[26].Value = dtemp.Rows[i]["0-1"].ToString();
                        grd_Employee_Production.Rows[i].Cells[27].Value = dtemp.Rows[i]["1-2"].ToString();
                        grd_Employee_Production.Rows[i].Cells[28].Value = dtemp.Rows[i]["2-3"].ToString();
                        grd_Employee_Production.Rows[i].Cells[29].Value = dtemp.Rows[i]["3-4"].ToString();
                        grd_Employee_Production.Rows[i].Cells[30].Value = dtemp.Rows[i]["4-5"].ToString();
                        grd_Employee_Production.Rows[i].Cells[31].Value = dtemp.Rows[i]["5-6"].ToString();
                        grd_Employee_Production.Rows[i].Cells[32].Value = dtemp.Rows[i]["6-7"].ToString();
                        grd_Employee_Production.Rows[i].Cells[33].Value = dtemp.Rows[i]["User_Id"].ToString();

                        grd_Employee_Production.Rows[i].Cells[35].Value = dtemp.Rows[i]["DRN_Emp_Code"].ToString();
                        grd_Employee_Production.Rows[i].Cells[36].Value = dtemp.Rows[i]["Emp_Job_Role"].ToString();
                        grd_Employee_Production.Rows[i].Cells[37].Value = dtemp.Rows[i]["Shift_Type_Name"].ToString();
                        grd_Employee_Production.Rows[i].Cells[38].Value = dtemp.Rows[i]["Reporting_To_1"].ToString();
                        grd_Employee_Production.Rows[i].Cells[39].Value = dtemp.Rows[i]["Reporting_To_2"].ToString();
                        grd_Employee_Production.Rows[i].Cells[34].Value = 0;

                        Hashtable httotal = new Hashtable();
                        System.Data.DataTable dttotal = new System.Data.DataTable();
                        httotal.Add("@Trans", "GET_TOTAL_COUNT");
                        httotal.Add("@User_Id", grd_Employee_Production.Rows[i].Cells[33].Value);
                        dttotal = dataaccess.ExecuteSP("Sp_User_24_7_Production_Report", httotal);

                        if (dttotal.Rows.Count > 0)
                        {
                            grd_Employee_Production.Rows[i].Cells[2].Value = int.Parse(dttotal.Rows[0]["Total_Orders"].ToString());

                        }
                        else
                        {
                            grd_Employee_Production.Rows[i].Cells[2].Value = 0;
                        }
                        //Calculate Effeciency

                        //calcualte  effieciency Total User Input wise

                        Hashtable htallocated_time = new Hashtable();
                        System.Data.DataTable dtallocated_time = new System.Data.DataTable();

                        htallocated_time.Add("@Trans", "GET_ORDERS_COUNT_BY_TASK_ORDER_TYPE_USER_WISE");
                        htallocated_time.Add("@User_Id", grd_Employee_Production.Rows[i].Cells[33].Value);
                        dtallocated_time = dataaccess.ExecuteSP("Sp_User_24_7_Production_Report", htallocated_time);
                        Total_Allocated_Time = 0; Total_Working_Time = 0;
                        if (dtallocated_time.Rows.Count > 0)
                        {
                            Total_Allocated_Time = 0; Total_Working_Time = 0; Effiececncy = 0;
                            for (int j = 0; j < dtallocated_time.Rows.Count; j++)
                            {

                                Hashtable ht_time = new Hashtable();
                                System.Data.DataTable dt_time = new System.Data.DataTable();

                                ht_time.Add("@Trans", "GET_ORDERS_COUNT_BY_TASK_ORDER_TYPE_WISE");
                                ht_time.Add("@User_Id", grd_Employee_Production.Rows[i].Cells[33].Value);
                                ht_time.Add("@Order_Status_Id", dtallocated_time.Rows[j]["Order_Status_Id"].ToString());
                                ht_time.Add("@Order_Type_Abbreviation", dtallocated_time.Rows[j]["OrderType_ABS_Id"].ToString());
                                dt_time = dataaccess.ExecuteSP("Sp_User_24_7_Production_Report", ht_time);

                                if (dt_time.Rows.Count > 0)
                                {

                                    Hashtable ht_tasktime = new Hashtable();
                                    System.Data.DataTable dt_tasktime = new System.Data.DataTable();
                                    ht_tasktime.Add("@Trans", "GET_EMPLOYEE_TASK_WISE_TIME");
                                    string Order_Type_Abbrivation = dtallocated_time.Rows[j]["OrderType_ABS_Id"].ToString();
                                    ht_tasktime.Add("@Order_Status_Id", dtallocated_time.Rows[j]["Order_Status_Id"].ToString());
                                    ht_tasktime.Add("@Order_Type_Abbreviation", Order_Type_Abbrivation);
                                    dt_tasktime = dataaccess.ExecuteSP("Sp_User_24_7_Production_Report", ht_tasktime);
                                    if (dt_tasktime.Rows.Count > 0)
                                    {
                                        int T_Al_Time;
                                        if (dt_tasktime.Rows[0]["Allocated_Time"].ToString() != "" && dt_tasktime.Rows[0]["Allocated_Time"].ToString() != null)
                                        {
                                            T_Al_Time = int.Parse(dt_tasktime.Rows[0]["Allocated_Time"].ToString()) * 60;
                                            Total_Allocated_Time += double.Parse(dt_time.Rows[0]["No_Of_Orders"].ToString()) * double.Parse(T_Al_Time.ToString());

                                        }
                                        else
                                        {
                                            T_Al_Time = 0;
                                            Total_Allocated_Time += double.Parse(dt_time.Rows[0]["No_Of_Orders"].ToString()) * double.Parse(T_Al_Time.ToString());
                                        }
                                    }

                                    Total_Working_Time += double.Parse(dt_time.Rows[0]["Total_Time"].ToString());
                                }
                                else
                                {
                                    //Total_Allocated_Time = 0; Total_Working_Time = 0; Effiececncy = 0;
                                }
                            }

                        }
                        Hashtable htUser_Hold_Calrifcation_total = new Hashtable();
                        System.Data.DataTable dtUser_Hold_Calrifcation_total = new System.Data.DataTable();
                        htUser_Hold_Calrifcation_total.Add("@Trans", "GET_USER_HOLD_CALRIFICATION_TOTAL_COUNT");
                        htUser_Hold_Calrifcation_total.Add("@User_Id", grd_Employee_Production.Rows[i].Cells[33].Value);
                        dtUser_Hold_Calrifcation_total = dataaccess.ExecuteSP("Sp_User_24_7_Production_Report", htUser_Hold_Calrifcation_total);

                        if (dtUser_Hold_Calrifcation_total.Rows.Count > 0)
                        {
                            grd_Employee_Production.Rows[i].Cells[5].Value = int.Parse(dtUser_Hold_Calrifcation_total.Rows[0]["Total_Orders"].ToString());

                        }
                        else
                        {
                            grd_Employee_Production.Rows[i].Cells[5].Value = 0;
                        }
                        Hashtable htUser_Hold_Calrifcationallocated_time = new Hashtable();
                        System.Data.DataTable dtUser_Hold_Calrifcationallocated_time = new System.Data.DataTable();

                        htUser_Hold_Calrifcationallocated_time.Add("@Trans", "GET_ORDERS_USER_HOLD_CLARIFICATIOON_COUNT_BY_TASK_ORDER_TYPE_USER_WISE");
                        htUser_Hold_Calrifcationallocated_time.Add("@User_Id", grd_Employee_Production.Rows[i].Cells[33].Value);
                        dtUser_Hold_Calrifcationallocated_time = dataaccess.ExecuteSP("Sp_User_24_7_Production_Report", htUser_Hold_Calrifcationallocated_time);
                        Totla_User_Hold_Time = 0;

                        if (dtUser_Hold_Calrifcationallocated_time.Rows.Count > 0)
                        {

                            Hashtable htUser_Hold_Time = new Hashtable();
                            System.Data.DataTable dtUser_Hold_Time = new System.Data.DataTable();

                            htUser_Hold_Time.Add("@Trans", "GET_USER_HOLD_CLARIFICATION_TIME");
                            htUser_Hold_Time.Add("@User_Id", grd_Employee_Production.Rows[i].Cells[33].Value);
                            dtUser_Hold_Time = dataaccess.ExecuteSP("Sp_User_24_7_Production_Report", htUser_Hold_Time);
                            if (dtUser_Hold_Time.Rows.Count > 0)
                            {

                                Totla_User_Hold_Time = double.Parse(dtUser_Hold_Time.Rows[0]["Total_Time"].ToString());
                            }
                            else
                            {
                                Totla_User_Hold_Time = 0;
                            }
                        }
                        grd_Employee_Production.Rows[i].Cells[6].Value = Totla_User_Hold_Time;
                        Totla_User_Exception_Time = 0;

                        Hashtable htUser_Exception_Time = new Hashtable();
                        System.Data.DataTable dtUser_Exception_Time = new System.Data.DataTable();

                        htUser_Exception_Time.Add("@Trans", "GET_EXCEPTION_TOTAL_TIME");
                        htUser_Exception_Time.Add("@User_Id", grd_Employee_Production.Rows[i].Cells[33].Value);
                        dtUser_Exception_Time = dataaccess.ExecuteSP("Sp_User_24_7_Production_Report", htUser_Exception_Time);
                        if (dtUser_Exception_Time.Rows.Count > 0)
                        {

                            Totla_User_Exception_Time = double.Parse(dtUser_Exception_Time.Rows[0]["Total_Time"].ToString());
                        }
                        else
                        {
                            Totla_User_Exception_Time = 0;
                        }
                        double Day_Wise_Total_Time = 8 * 60 * 60;
                        Exception_Effeciency = (Totla_User_Exception_Time / Day_Wise_Total_Time) * 100;

                        //Exception Effecinecy

                        //Effeciency Formula


                        Total_Working_Time += Totla_User_Hold_Time;
                        Total_Working_Time += Totla_User_Exception_Time;

                        //==================Ideal Timings======================

                        Hashtable htdayshift_Ideal_Time = new Hashtable();
                        System.Data.DataTable dtDay_Shift_Ideal_Time = new System.Data.DataTable();

                        htdayshift_Ideal_Time.Add("@Trans", "GET_IDEAL_DAY_TIME");
                        htdayshift_Ideal_Time.Add("@From_date", F_Date);
                        htdayshift_Ideal_Time.Add("@User_Id", grd_Employee_Production.Rows[i].Cells[33].Value);
                        dtDay_Shift_Ideal_Time = dataaccess.ExecuteSP("Sp_User_Order_Ideal_Timings", htdayshift_Ideal_Time);

                        if (dtDay_Shift_Ideal_Time.Rows.Count > 0 && dtDay_Shift_Ideal_Time.Rows[0]["Diff_Time"] != "" && dtDay_Shift_Ideal_Time.Rows[0]["Diff_Time"] != null)
                        {

                            Ideal_Day_Break = int.Parse(dtDay_Shift_Ideal_Time.Rows[0]["Diff_Time"].ToString());
                        }
                        else
                        {
                            Ideal_Day_Break = 0;

                        }
                        Hashtable htnightshift_Ideal_Time = new Hashtable();
                        System.Data.DataTable dtnight_Shift_Ideal_Time = new System.Data.DataTable();

                        htnightshift_Ideal_Time.Add("@Trans", "GETIDEAL_NIGHT_TIME");
                        htnightshift_Ideal_Time.Add("@To_date", T_Date);
                        htnightshift_Ideal_Time.Add("@User_Id", grd_Employee_Production.Rows[i].Cells[33].Value);
                        dtnight_Shift_Ideal_Time = dataaccess.ExecuteSP("Sp_User_Order_Ideal_Timings", htnightshift_Ideal_Time);

                        if (dtnight_Shift_Ideal_Time.Rows.Count > 0 && dtnight_Shift_Ideal_Time.Rows[0]["Diff_Time"] != "" && dtnight_Shift_Ideal_Time.Rows[0]["Diff_Time"] != null)
                        {

                            Ideal_Night_Break = int.Parse(dtnight_Shift_Ideal_Time.Rows[0]["Diff_Time"].ToString());
                        }
                        else
                        {
                            Ideal_Night_Break = 0;
                        }

                        Ideal_Total_Break = Ideal_Day_Break + Ideal_Night_Break;

                        TimeSpan tbideal;
                        tbideal = TimeSpan.FromSeconds(Ideal_Total_Break);
                        string IdealformatedTime = string.Format("{0:D2}H:{1:D2}M:{2:D2}S",
                               tbideal.Hours,
                               tbideal.Minutes,
                               tbideal.Seconds);
                        grd_Employee_Production.Rows[i].Cells[8].Value = IdealformatedTime.ToString();

                        Hashtable htdayshift_Break_Time = new Hashtable();
                        System.Data.DataTable dtDay_Shift_Break_Time = new System.Data.DataTable();

                        htdayshift_Break_Time.Add("@Trans", "GET_DAY_BREAK_TIME");
                        htdayshift_Break_Time.Add("@Firstdate", F_Date);
                        htdayshift_Break_Time.Add("@User_Id", grd_Employee_Production.Rows[i].Cells[33].Value);
                        dtDay_Shift_Break_Time = dataaccess.ExecuteSP("Sp_Order_User_Break_Details", htdayshift_Break_Time);

                        if (dtDay_Shift_Break_Time.Rows.Count > 0 && dtDay_Shift_Break_Time.Rows[0]["Diff_SECOND"] != "" && dtDay_Shift_Break_Time.Rows[0]["Diff_SECOND"] != null)
                        {

                            Day_Time_Break = int.Parse(dtDay_Shift_Break_Time.Rows[0]["Diff_SECOND"].ToString());
                        }
                        else
                        {
                            Day_Time_Break = 0;

                        }

                        Hashtable htnightshift_Break_Time = new Hashtable();
                        System.Data.DataTable dtnight_Shift_Break_Time = new System.Data.DataTable();

                        htnightshift_Break_Time.Add("@Trans", "GET_NIGHT_BREAK_TIME");
                        htnightshift_Break_Time.Add("@Second_Date", T_Date);
                        htnightshift_Break_Time.Add("@User_Id", grd_Employee_Production.Rows[i].Cells[33].Value);
                        dtnight_Shift_Break_Time = dataaccess.ExecuteSP("Sp_Order_User_Break_Details", htnightshift_Break_Time);

                        if (dtnight_Shift_Break_Time.Rows.Count > 0 && dtnight_Shift_Break_Time.Rows[0]["Diff_SECOND"] != "" && dtnight_Shift_Break_Time.Rows[0]["Diff_SECOND"] != null)
                        {

                            Night_Time_Break = int.Parse(dtnight_Shift_Break_Time.Rows[0]["Diff_SECOND"].ToString());
                        }
                        else
                        {
                            Night_Time_Break = 0;
                        }
                        Total_Break = Day_Time_Break + Night_Time_Break;
                        TimeSpan tbibreak;
                        tbibreak = TimeSpan.FromSeconds(Total_Break);

                        string breakformatedTime = string.Format("{0:D2}H:{1:D2}M:{2:D2}S",
                            tbibreak.Hours,
                            tbibreak.Minutes,
                            tbibreak.Seconds);

                        grd_Employee_Production.Rows[i].Cells[7].Value = breakformatedTime.ToString();

                        TimeSpan t;


                        t = TimeSpan.FromSeconds(Total_Working_Time);

                        string formatedTime = string.Format("{0:D2}H:{1:D2}M:{2:D2}S",
                               t.Hours,
                               t.Minutes,
                               t.Seconds);
                        grd_Employee_Production.Rows[i].Cells[3].Value = formatedTime.ToString();
                        TimeSpan t_User_Hold;


                        t_User_Hold = TimeSpan.FromSeconds(Totla_User_Hold_Time);

                        string User_Hold_formated_Time = string.Format("{0:D2}H:{1:D2}M:{2:D2}S",
                               t_User_Hold.Hours,
                               t_User_Hold.Minutes,
                               t_User_Hold.Seconds);

                        grd_Employee_Production.Rows[i].Cells[6].Value = User_Hold_formated_Time.ToString();

                        // Effiececncy = (Total_Working_Time / Total_Allocated_Time)*100;
                        Effiececncy = (Total_Allocated_Time / Day_Wise_Total_Time) * 100;

                        Total_Effeciency = Effiececncy + Exception_Effeciency;

                        double ouputValue = Math.Round(Total_Effeciency, 2);

                        grd_Employee_Production.Rows[i].Cells[4].Value = Convert.ToDouble(ouputValue.ToString());
                    }
                }
            }
        }

        private void grd_Employee_Production_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex != -1)
            {
                if (e.ColumnIndex == 2 || e.ColumnIndex == 3 || e.ColumnIndex == 4)
                {
                    Employee_24_7_Production_user_id = grd_Employee_Production.Rows[e.RowIndex].Cells[33].Value.ToString();

                    DateTime dtfirsttime = Convert.ToDateTime(txt_First_date.Text);
                    DateTime dtsecondtime = Convert.ToDateTime(txt_Second_Date.Text);

                    string F_Date = dtfirsttime.ToString("MM/dd/yyyy");
                    string T_Date = dtsecondtime.ToString("MM/dd/yyyy");
                    Employee_24_7_Production_Value = 0;
                    Employee_24_7_Hour = "0";

                    Hashtable htinsert = new Hashtable();
                    System.Data.DataTable dtinsert = new System.Data.DataTable();
                    htinsert.Add("@Trans", "INSERT_INTO_TEMP");
                    htinsert.Add("@Firstdate", F_Date.ToString());
                    htinsert.Add("@Second_Date", T_Date.ToString());
                    htinsert.Add("@User_Id", Employee_24_7_Production_user_id.ToString());
                    dtinsert = dataaccess.ExecuteSP("Sp_User_24_7_Employee_Production_Report", htinsert);
                    Ordermanagement_01.Production_Score_View TargeDashboard = new Ordermanagement_01.Production_Score_View(Order_Target, Employee_24_7_Production_user_id, F_Date, 5, Employee_24_7_Production_Value, Employee_24_7_Hour, score_board, header_Pending, T_Date, userid, User_Role_Id, "Current");
                    TargeDashboard.Show();

                }
                else if (e.ColumnIndex == 5 || e.ColumnIndex == 6)
                {
                    Employee_24_7_Production_user_id = grd_Employee_Production.Rows[e.RowIndex].Cells[33].Value.ToString();

                    DateTime dtfirsttime = Convert.ToDateTime(txt_First_date.Text);
                    DateTime dtsecondtime = Convert.ToDateTime(txt_Second_Date.Text);

                    string F_Date = dtfirsttime.ToString("MM/dd/yyyy");
                    string T_Date = dtsecondtime.ToString("MM/dd/yyyy");
                    Employee_24_7_Production_Value = 0;
                    Employee_24_7_Hour = "0";

                    Hashtable htinsert = new Hashtable();
                    System.Data.DataTable dtinsert = new System.Data.DataTable();
                    htinsert.Add("@Trans", "INSERT_INTO_TEMP");
                    htinsert.Add("@Firstdate", F_Date.ToString());
                    htinsert.Add("@Second_Date", T_Date.ToString());
                    htinsert.Add("@User_Id", Employee_24_7_Production_user_id.ToString());
                    dtinsert = dataaccess.ExecuteSP("Sp_User_24_7_Employee_Production_Report", htinsert);
                    Ordermanagement_01.Production_Score_View TargeDashboard = new Ordermanagement_01.Production_Score_View(Order_Target, Employee_24_7_Production_user_id, F_Date, 6, Employee_24_7_Production_Value, Employee_24_7_Hour, score_board, header_Pending, T_Date, userid, User_Role_Id, "Current");
                    TargeDashboard.Show();
                }
                else if (e.ColumnIndex == 7)
                {
                    Employee_24_7_Production_user_id = grd_Employee_Production.Rows[e.RowIndex].Cells[33].Value.ToString();

                    DateTime dtfirsttime = Convert.ToDateTime(txt_First_date.Text);
                    DateTime dtsecondtime = Convert.ToDateTime(txt_Second_Date.Text);

                    string F_Date = dtfirsttime.ToString("MM/dd/yyyy");
                    string T_Date = dtsecondtime.ToString("MM/dd/yyyy");

                    Ordermanagement_01.Employee.Employee_View_Break_Details emb = new Employee.Employee_View_Break_Details(Production_Date, int.Parse(Employee_24_7_Production_user_id), "Break");

                    foreach (Form f in System.Windows.Forms.Application.OpenForms)
                    {
                        if (f.Name == "Employee_View_Break_Details")
                        {
                            f.Hide();
                        }
                    }
                    emb.Show();
                }
                else if (e.ColumnIndex == 8)
                {
                    Employee_24_7_Production_user_id = grd_Employee_Production.Rows[e.RowIndex].Cells[33].Value.ToString();

                    DateTime dtfirsttime = Convert.ToDateTime(txt_First_date.Text);
                    DateTime dtsecondtime = Convert.ToDateTime(txt_Second_Date.Text);

                    string F_Date = dtfirsttime.ToString("MM/dd/yyyy");
                    string T_Date = dtsecondtime.ToString("MM/dd/yyyy");

                    Ordermanagement_01.Employee.Employee_View_Break_Details emb = new Employee.Employee_View_Break_Details(Production_Date, int.Parse(Employee_24_7_Production_user_id), "Ideal");

                    foreach (Form f in System.Windows.Forms.Application.OpenForms)
                    {
                        if (f.Name == "Employee_View_Break_Details")
                        {
                            f.Hide();
                        }
                    }
                    emb.Show();
                }
                else if (e.ColumnIndex > 8 && e.ColumnIndex <= 25)
                {
                    Employee_24_7_Production_user_id = grd_Employee_Production.Rows[e.RowIndex].Cells[33].Value.ToString();

                    DateTime dtfirsttime = Convert.ToDateTime(txt_First_date.Text);
                    DateTime dtsecondtime = Convert.ToDateTime(txt_Second_Date.Text);

                    string F_Date = dtfirsttime.ToString("MM/dd/yyyy");
                    string T_Date = dtsecondtime.ToString("MM/dd/yyyy");

                    if (e.ColumnIndex == 8)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[8].Value.ToString());
                        Employee_24_7_Hour = "7";
                    }
                    if (e.ColumnIndex == 9)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[9].Value.ToString());
                        Employee_24_7_Hour = "8";
                    }
                    if (e.ColumnIndex == 10)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[10].Value.ToString());
                        Employee_24_7_Hour = "9";
                    }
                    if (e.ColumnIndex == 11)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[11].Value.ToString());
                        Employee_24_7_Hour = "10";
                    }
                    if (e.ColumnIndex == 12)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[12].Value.ToString());
                        Employee_24_7_Hour = "11";
                    }
                    if (e.ColumnIndex == 13)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[13].Value.ToString());
                        Employee_24_7_Hour = "12";
                    }
                    if (e.ColumnIndex == 14)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[14].Value.ToString());
                        Employee_24_7_Hour = "13";
                    }
                    if (e.ColumnIndex == 15)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[15].Value.ToString());
                        Employee_24_7_Hour = "14";
                    }
                    if (e.ColumnIndex == 16)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[16].Value.ToString());
                        Employee_24_7_Hour = "15";
                    }
                    if (e.ColumnIndex == 17)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[17].Value.ToString());
                        Employee_24_7_Hour = "16";
                    }
                    if (e.ColumnIndex == 18)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[18].Value.ToString());
                        Employee_24_7_Hour = "17";
                    }
                    if (e.ColumnIndex == 19)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[19].Value.ToString());
                        Employee_24_7_Hour = "18";
                    }
                    if (e.ColumnIndex == 20)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[20].Value.ToString());
                        Employee_24_7_Hour = "19";
                    }
                    if (e.ColumnIndex == 21)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[21].Value.ToString());
                        Employee_24_7_Hour = "20";
                    }
                    if (e.ColumnIndex == 22)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[22].Value.ToString());
                        Employee_24_7_Hour = "21";
                    }
                    if (e.ColumnIndex == 23)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[23].Value.ToString());
                        Employee_24_7_Hour = "22";
                    }
                    if (e.ColumnIndex == 24)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[24].Value.ToString());
                        Employee_24_7_Hour = "23";
                    }

                    //value=4 means its an  24_7 emp_production,Tat we are Time-hou
                    //score_user_id as Completed/ or not completd
                    //Order View Type as F_Date;
                    //Time Zone as User_Id
                    Hashtable htinsert = new Hashtable();
                    System.Data.DataTable dtinsert = new System.Data.DataTable();
                    htinsert.Add("@Trans", "INSERT_INTO_TEMP");
                    htinsert.Add("@Firstdate", F_Date.ToString());
                    htinsert.Add("@Second_Date", T_Date.ToString());
                    htinsert.Add("@User_Id", Employee_24_7_Production_user_id.ToString());
                    dtinsert = dataaccess.ExecuteSP("Sp_User_24_7_Employee_Production_Report", htinsert);
                    Ordermanagement_01.Production_Score_View TargeDashboard = new Ordermanagement_01.Production_Score_View(Order_Target, Employee_24_7_Production_user_id, F_Date, 4, Employee_24_7_Production_Value, Employee_24_7_Hour, score_board, header_Pending, dateTimePicker1.Text, userid, User_Role_Id, "Current");
                    TargeDashboard.Show();
                }
                else if (e.ColumnIndex >= 26)
                {
                    Employee_24_7_Production_user_id = grd_Employee_Production.Rows[e.RowIndex].Cells[33].Value.ToString();

                    DateTime dtfirsttime = Convert.ToDateTime(txt_First_date.Text);
                    DateTime dtsecondtime = Convert.ToDateTime(txt_Second_Date.Text);

                    string F_Date = dtfirsttime.ToString("MM/dd/yyyy");
                    string T_Date = dtsecondtime.ToString("MM/dd/yyyy");
                    if (e.ColumnIndex == 25)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[25].Value.ToString());
                        Employee_24_7_Hour = "0";
                    }
                    if (e.ColumnIndex == 26)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[26].Value.ToString());
                        Employee_24_7_Hour = "1";
                    }
                    if (e.ColumnIndex == 27)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[27].Value.ToString());
                        Employee_24_7_Hour = "2";
                    }
                    if (e.ColumnIndex == 28)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[28].Value.ToString());
                        Employee_24_7_Hour = "3";
                    }
                    if (e.ColumnIndex == 29)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[29].Value.ToString());
                        Employee_24_7_Hour = "4";
                    }
                    if (e.ColumnIndex == 30)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[30].Value.ToString());
                        Employee_24_7_Hour = "5";
                    }
                    if (e.ColumnIndex == 31)
                    {
                        Employee_24_7_Production_Value = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[31].Value.ToString());
                        Employee_24_7_Hour = "6";
                    }
                    Hashtable htinsert = new Hashtable();
                    System.Data.DataTable dtinsert = new System.Data.DataTable();
                    htinsert.Add("@Trans", "INSERT_INTO_TEMP");
                    htinsert.Add("@Firstdate", F_Date.ToString());
                    htinsert.Add("@Second_Date", T_Date.ToString());
                    htinsert.Add("@User_Id", Employee_24_7_Production_user_id.ToString());
                    dtinsert = dataaccess.ExecuteSP("Sp_User_24_7_Employee_Production_Report", htinsert);

                    Ordermanagement_01.Production_Score_View TargeDashboard = new Ordermanagement_01.Production_Score_View(Order_Target, Employee_24_7_Production_user_id, T_Date, 4, Employee_24_7_Production_Value, Employee_24_7_Hour, score_board, header_Pending, dateTimePicker1.Text, userid, User_Role_Id, "Current");
                    TargeDashboard.Show();
                }
            }
        }

        private void btn_Employee_Rep_Export_Click(object sender, EventArgs e)
        {
            load_Progressbar.Start_progres();
            Export_Employee_Production_24_7_ReportData();
        }

        private void Export_Employee_Production_24_7_ReportData()
        {
            System.Data.DataTable dt = new System.Data.DataTable();

            //Adding the Columns
            foreach (DataGridViewColumn column in grd_Employee_Production.Columns)
            {
                if (column.HeaderText != "")
                {
                    if (column.ValueType == null)
                    {
                        dt.Columns.Add(column.HeaderText, typeof(string));
                    }
                    else
                    {
                        if (column.ValueType == typeof(int))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(int));
                        }
                        else
                        {
                            dt.Columns.Add(column.HeaderText, column.ValueType);
                        }
                    }
                }
            }
            //Adding the Rows
            foreach (DataGridViewRow row in grd_Employee_Production.Rows)
            {
                dt.Rows.Add();
                foreach (DataGridViewCell cell in row.Cells)
                {
                    if (cell.Value != null && cell.Value.ToString() != null)
                    {
                        dt.Rows[dt.Rows.Count - 1][cell.ColumnIndex] = cell.Value;
                    }
                }
            }

            //Exporting to Excel
            string folderPath = "C:\\Temp\\";
            Path1 = folderPath + DateTime.Now.ToString("dd-MM-yyyy-hh-mm-ss") + "Employee_Production.xlsx";
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }
            using (XLWorkbook wb = new XLWorkbook())
            {
                wb.Worksheets.Add(dt, "User Production Report");
                try
                {
                    wb.SaveAs(Path1);
                }
                catch (Exception ex)
                {
                    MessageBox.Show("File is Opened, Please Close and Export it");
                }
            }
            System.Diagnostics.Process.Start(Path1);
        }

        private void Export_Effeciency_ReportData()
        {
            // this is old one need to remove later once the query get done
            int Production_Time, Ideal_Time, Break_Time, Total_Time, Allocated_In_Sec;
            Hashtable ht_Export_User_Date_Wise_Count = new Hashtable();
            System.Data.DataTable dt_Export_User_Date_Wise_Count = new System.Data.DataTable();
            if (rbtn_Score_Production_Time.Checked == true)
            {
                ht_Export_User_Date_Wise_Count.Add("@Trans", "GET_USER_EFF_DATE_WISE_OLD_EXPORT");
            }
            else if (rbtn_Score_Target_Wise.Checked == true)
            {
                ht_Export_User_Date_Wise_Count.Add("@Trans", "GET_USER_EFF_DATE_WISE_OLD_EXPORT_TARGET_WISE");

            }
            dt_Export_User_Date_Wise_Count = dataaccess.ExecuteSP("Sp_Score_Board", ht_Export_User_Date_Wise_Count);



            if (dt_Export_User_Date_Wise_Count.Rows.Count > 0)
            {
                Grid_User_Export.Rows.Clear();

                for (int i = 0; i < dt_Export_User_Date_Wise_Count.Rows.Count; i++)
                {
                    Grid_User_Export.Rows.Add();

                    Production_Time = 0; Ideal_Time = 0; Break_Time = 0; Total_Time = 0;

                    Grid_User_Export.Rows[i].Cells[0].Value = dt_Export_User_Date_Wise_Count.Rows[i]["User_id"].ToString();
                    Grid_User_Export.Rows[i].Cells[1].Value = dt_Export_User_Date_Wise_Count.Rows[i]["User_Name"].ToString();
                    Grid_User_Export.Rows[i].Cells[2].Value = dt_Export_User_Date_Wise_Count.Rows[i]["Shift_Name"].ToString();
                    Grid_User_Export.Rows[i].Cells[3].Value = dt_Export_User_Date_Wise_Count.Rows[i]["Order_Production_Date"].ToString();
                    Grid_User_Export.Rows[i].Cells[4].Value = dt_Export_User_Date_Wise_Count.Rows[i]["No_Of_Orders"].ToString();

                    Production_Time = int.Parse(dt_Export_User_Date_Wise_Count.Rows[i]["Total_Production_Time"].ToString());
                    Ideal_Time = int.Parse(dt_Export_User_Date_Wise_Count.Rows[i]["Total_Ideal_Time"].ToString());
                    Break_Time = int.Parse(dt_Export_User_Date_Wise_Count.Rows[i]["Total_Break_Time"].ToString());

                    Total_Time = Production_Time + Break_Time + Ideal_Time;






                    Total_t = TimeSpan.FromSeconds(Total_Time);
                    string Total_formatedTime = string.Format("{0:D2}H:{1:D2}M:{2:D2}S",
                 Total_t.Hours,
                 Total_t.Minutes,
                 Total_t.Seconds);
                    Grid_User_Export.Rows[i].Cells[5].Value = Total_formatedTime.ToString();

                    prod_t = TimeSpan.FromSeconds(Production_Time);
                    string Prd_formatedTime = string.Format("{0:D2}H:{1:D2}M:{2:D2}S",
                           prod_t.Hours,
                           prod_t.Minutes,
                           prod_t.Seconds);
                    Grid_User_Export.Rows[i].Cells[6].Value = Prd_formatedTime.ToString();


                    Ideal_t = TimeSpan.FromSeconds(Ideal_Time);
                    string idl_formatedTime = string.Format("{0:D2}H:{1:D2}M:{2:D2}S",
                       Ideal_t.Hours,
                       Ideal_t.Minutes,
                       Ideal_t.Seconds);
                    Grid_User_Export.Rows[i].Cells[7].Value = idl_formatedTime.ToString();




                    Break_t = TimeSpan.FromSeconds(Break_Time);
                    string brk_formatedTime = string.Format("{0:D2}H:{1:D2}M:{2:D2}S",
                       Break_t.Hours,
                       Break_t.Minutes,
                       Break_t.Seconds);
                    Grid_User_Export.Rows[i].Cells[8].Value = brk_formatedTime.ToString();

                    Grid_User_Export.Rows[i].Cells[9].Value = dt_Export_User_Date_Wise_Count.Rows[i]["Order_User_Effeciency"].ToString();

                    //Grid_User_Export.DataSource = dt_Export_User_Date_Wise_Count;
                }
            }
            else
            {
                Grid_User_Export.Rows.Clear();

            }
            System.Data.DataTable dt = new System.Data.DataTable();
            System.Data.DataTable dt1 = new System.Data.DataTable();
            //Adding the Columns
            foreach (DataGridViewColumn column in Grid_Score.Columns)
            {
                if (column.HeaderText != "")
                {
                    if (column.ValueType == null)
                    {
                        dt.Columns.Add(column.HeaderText, typeof(string));
                    }
                    else
                    {
                        if (column.ValueType == typeof(int))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(int));
                        }
                        else if (column.ValueType == typeof(decimal))
                        {
                            dt.Columns.Add(column.HeaderText, typeof(decimal));
                        }
                        else
                        {
                            dt.Columns.Add(column.HeaderText, column.ValueType);
                        }
                    }
                }

            }

            //Adding the Rows
            foreach (DataGridViewRow row in Grid_Score.Rows)
            {
                dt.Rows.Add();
                foreach (DataGridViewCell cell in row.Cells)
                {
                    if (cell.Value != null && cell.Value.ToString() != null)
                    {
                        dt.Rows[dt.Rows.Count - 1][cell.ColumnIndex] = cell.Value;
                    }
                }
            }
            if (User_Role_Id != "2")
            {
                foreach (DataGridViewColumn column in Grid_User_Export.Columns)
                {
                    if (column.HeaderText != "")
                    {
                        if (column.ValueType == null)
                        {
                            dt1.Columns.Add(column.HeaderText, typeof(string));
                        }
                        else
                        {
                            if (column.ValueType == typeof(int))
                            {
                                dt1.Columns.Add(column.HeaderText, typeof(int));

                            }
                            else if (column.ValueType == typeof(decimal))
                            {
                                dt1.Columns.Add(column.HeaderText, typeof(decimal));

                            }
                            else if (column.ValueType == typeof(DateTime))
                            {

                                dt1.Columns.Add(column.HeaderText, typeof(string));
                            }
                            else
                            {
                                dt1.Columns.Add(column.HeaderText, column.ValueType);
                            }
                        }
                    }
                }

                //Adding the Rows
                foreach (DataGridViewRow row in Grid_User_Export.Rows)
                {
                    dt1.Rows.Add();
                    foreach (DataGridViewCell cell in row.Cells)
                    {
                        if (cell.Value != null && cell.Value.ToString() != "")
                        {
                            dt1.Rows[dt1.Rows.Count - 1][cell.ColumnIndex] = cell.Value.ToString();
                        }
                    }
                }
            }
            string Export_Title_Name = "User_ScoreBoard";
            //Exporting to Excel
            string folderPath = "C:\\Temp\\";
            Path1 = folderPath + DateTime.Now.ToString("dd-MM-yyyy-hh-mm-ss") + "-" + Export_Title_Name + ".xlsx";
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }
            using (XLWorkbook wb = new XLWorkbook())
            {
                wb.Worksheets.Add(dt, "Score_Board_Count");
                if (User_Role_Id != "2")
                {
                    wb.Worksheets.Add(dt1, "Day_Wise_Count");
                }
                try
                {
                    wb.SaveAs(Path1);
                }
                catch (Exception ex)
                {
                    MessageBox.Show("File is Opened, Please Close and Export it");
                }
            }
            //Exporting to Excel
            System.Diagnostics.Process.Start(Path1);
        }

        private void btn_Order_Cost_Count_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.InvoiceRep.Order_Cost_Details invid = new Ordermanagement_01.InvoiceRep.Order_Cost_Details(0, userid, "Insert", User_Role_Id);
            invid.Show();
        }

        private void employeeEfficiencyMatrixToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(26) != false)
            {
                Ordermanagement_01.Matrix.Employee_Efficiency_Matrix Emp_efficiency = new Ordermanagement_01.Matrix.Employee_Efficiency_Matrix(userid);
                Emp_efficiency.Show();
            }
        }

        private void grd_Employee_Production_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            foreach (DataGridViewRow myrow in grd_Employee_Production.Rows)
            {
                int sum = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[9].Value.ToString()) +
                         int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[10].Value.ToString()) +
                         int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[11].Value.ToString()) +
                         int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[12].Value.ToString()) +
                         int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[13].Value.ToString()) +
                         int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[14].Value.ToString()) +
                         int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[15].Value.ToString());


                int sum1 = int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[22].Value.ToString()) +
                        int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[23].Value.ToString()) +
                        int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[24].Value.ToString()) +
                        int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[25].Value.ToString()) +
                        int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[26].Value.ToString()) +
                        int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[27].Value.ToString()) +
                        int.Parse(grd_Employee_Production.Rows[e.RowIndex].Cells[28].Value.ToString());
                if (sum > 0)
                {
                    this.grd_Employee_Production.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.LightPink;
                }
                else if (sum1 > 0)
                {
                    this.grd_Employee_Production.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.LightGreen;
                }
                else
                {
                    this.grd_Employee_Production.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.White;
                }
            }
        }

        private void grd_Rework_Reports_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void grd_My_SuperQc_Report_ChangeUICues(object sender, UICuesEventArgs e)
        {

        }

        private void grd_Employee_Production_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            //DataGridViewColumn newColumn = grd_Employee_Production.Columns[e.ColumnIndex];
            //DataGridViewColumn oldColumn = grd_Employee_Production.SortedColumn;
            //ListSortDirection direction;

            //// If oldColumn is null, then the DataGridView is not sorted.
            //if (oldColumn != null)
            //{
            //    // Sort the same column again, reversing the SortOrder.
            //    if (oldColumn == newColumn &&
            //        grd_Employee_Production.SortOrder == SortOrder.Ascending)
            //    {
            //        direction = ListSortDirection.Descending;
            //    }
            //    else
            //    {
            //        // Sort a new column and remove the old SortGlyph.
            //        direction = ListSortDirection.Ascending;
            //        oldColumn.HeaderCell.SortGlyphDirection = SortOrder.None;
            //    }
            //}
            //else
            //{
            //    direction = ListSortDirection.Ascending;
            //}

            //// Sort the selected column.
            //grd_Employee_Production.Sort(newColumn, direction);
            //newColumn.HeaderCell.SortGlyphDirection =
            //    direction == ListSortDirection.Ascending ?
            //    SortOrder.Ascending : SortOrder.Descending;
        }

        private void grd_Employee_Production_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e)
        {
            //// Put each of the columns into programmatic sort mode.
            //foreach (DataGridViewColumn column in grd_Employee_Production.Columns)
            //{
            //    column.SortMode = DataGridViewColumnSortMode.Programmatic;
            //}
        }

        private void grd_Employee_Production_SortCompare(object sender, DataGridViewSortCompareEventArgs e)
        {

        }

        private void gridclient_DataSourceChanged(object sender, EventArgs e)
        {

        }

        private void Grd_OrderTime_DataSourceChanged(object sender, EventArgs e)
        {
            int R_Current_Day = 0;
            int R_MTD = 0;
            int C_Current_Day = 0;
            int C_MTD = 0;
            int Research = 0;
            int Search = 0; int Tax = 0; int Search_Qc = 0; int Typing = 0; int Typing_QC = 0; int Final_Qc = 0; int Exception_Value = 0; int Upload = 0; int Abstractor = 0; int Vendor = 0;
            int AFA = 0; int WFA = 0; int Clarification = 0; int Hold = 0; int Cancelled = 0; int WFT = 0; int Search_Tax = 0;

            for (int i = 0; i < Grd_OrderTime.Rows.Count - 1; i++)
            {
                if (Grd_OrderTime["R_Current_Day", i].Value != DBNull.Value)
                {
                    R_Current_Day += (int)Grd_OrderTime["R_Current_Day", i].Value;
                }
                if (Grd_OrderTime["R_MTD", i].Value != DBNull.Value)
                {
                    R_MTD += (int)Grd_OrderTime["R_MTD", i].Value;
                }
                if (Grd_OrderTime["C_Current_Day", i].Value != DBNull.Value)
                {

                    C_Current_Day += (int)Grd_OrderTime["C_Current_Day", i].Value;
                }
                if (Grd_OrderTime["C_MTD", i].Value != DBNull.Value)
                {

                    C_MTD += (int)Grd_OrderTime["C_MTD", i].Value;
                }
                if (Grd_OrderTime["Research", i].Value != DBNull.Value)
                {

                    Research += (int)Grd_OrderTime["Research", i].Value;
                }
                if (Grd_OrderTime["Search", i].Value != DBNull.Value)
                {

                    Search += (int)Grd_OrderTime["Search", i].Value;
                }
                if (Grd_OrderTime["Tax", i].Value != DBNull.Value)
                {

                    Tax += (int)Grd_OrderTime["Tax", i].Value;
                }
                if (Grd_OrderTime["Search_Qc", i].Value != DBNull.Value)
                {

                    Search_Qc += (int)Grd_OrderTime["Search_Qc", i].Value;
                }
                if (Grd_OrderTime["Typing", i].Value != DBNull.Value)
                {

                    Typing += (int)Grd_OrderTime["Typing", i].Value;
                }
                if (Grd_OrderTime["Typing_QC", i].Value != DBNull.Value)
                {

                    Typing_QC += (int)Grd_OrderTime["Typing_QC", i].Value;
                }
                if (Grd_OrderTime["Final_QC", i].Value != DBNull.Value)
                {

                    Final_Qc += (int)Grd_OrderTime["Final_QC", i].Value;
                }
                if (Grd_OrderTime["Upload", i].Value != DBNull.Value)
                {

                    Upload += (int)Grd_OrderTime["Upload", i].Value;
                }
                if (Grd_OrderTime["Exception", i].Value != DBNull.Value)
                {

                    Exception_Value += (int)Grd_OrderTime["Exception", i].Value;
                }
                if (Grd_OrderTime["Abstractor", i].Value != DBNull.Value)
                {

                    Abstractor += (int)Grd_OrderTime["Abstractor", i].Value;
                }
                if (Grd_OrderTime["Vendor", i].Value != DBNull.Value)
                {

                    Vendor += (int)Grd_OrderTime["Vendor", i].Value;
                }

                if (Grd_OrderTime["Clarification", i].Value != DBNull.Value)
                {

                    Clarification += (int)Grd_OrderTime["Clarification", i].Value;
                }
                if (Grd_OrderTime["Hold", i].Value != DBNull.Value)
                {

                    Hold += (int)Grd_OrderTime["Hold", i].Value;
                }
                if (Grd_OrderTime["Cancelled", i].Value != DBNull.Value)
                {

                    Cancelled += (int)Grd_OrderTime["Cancelled", i].Value;
                }
                if (Grd_OrderTime["WFT", i].Value != DBNull.Value)
                {

                    WFT += (int)Grd_OrderTime["WFT", i].Value;
                }
                if (Grd_OrderTime["Search_Tax", i].Value != DBNull.Value)
                {

                    Search_Tax += (int)Grd_OrderTime["Search_Tax", i].Value;
                }
            }
            if (User_Role_Id == "1")
            {
                Grd_OrderTime["Client", Grd_OrderTime.Rows.Count - 1].Value = "Total";
            }
            Grd_OrderTime["R_Current_Day", Grd_OrderTime.Rows.Count - 1].Value = R_Current_Day;
            Grd_OrderTime["R_MTD", Grd_OrderTime.Rows.Count - 1].Value = R_MTD;
            Grd_OrderTime["C_Current_Day", Grd_OrderTime.Rows.Count - 1].Value = C_Current_Day;
            Grd_OrderTime["C_MTD", Grd_OrderTime.Rows.Count - 1].Value = C_MTD;
            Grd_OrderTime["Research", Grd_OrderTime.Rows.Count - 1].Value = Research;
            Grd_OrderTime["Search", Grd_OrderTime.Rows.Count - 1].Value = Search;
            Grd_OrderTime["Tax", Grd_OrderTime.Rows.Count - 1].Value = Tax;
            Grd_OrderTime["Search_Qc", Grd_OrderTime.Rows.Count - 1].Value = Search_Qc;
            Grd_OrderTime["Typing", Grd_OrderTime.Rows.Count - 1].Value = Typing;
            Grd_OrderTime["Typing_QC", Grd_OrderTime.Rows.Count - 1].Value = Typing_QC;
            Grd_OrderTime["Final_QC", Grd_OrderTime.Rows.Count - 1].Value = Final_Qc;
            Grd_OrderTime["Exception", Grd_OrderTime.Rows.Count - 1].Value = Exception_Value;
            Grd_OrderTime["Upload", Grd_OrderTime.Rows.Count - 1].Value = Upload;
            Grd_OrderTime["Abstractor", Grd_OrderTime.Rows.Count - 1].Value = Abstractor;
            Grd_OrderTime["Vendor", Grd_OrderTime.Rows.Count - 1].Value = Vendor;
            Grd_OrderTime["Clarification", Grd_OrderTime.Rows.Count - 1].Value = Clarification;
            Grd_OrderTime["Hold", Grd_OrderTime.Rows.Count - 1].Value = Hold;
            Grd_OrderTime["Cancelled", Grd_OrderTime.Rows.Count - 1].Value = Cancelled;
            Grd_OrderTime["WFT", Grd_OrderTime.Rows.Count - 1].Value = WFT;
            Grd_OrderTime["Search_Tax", Grd_OrderTime.Rows.Count - 1].Value = Search_Tax;

        }

        private void Grid_My_Report_DataSourceChanged(object sender, EventArgs e)
        {
            int R_Current_Day = 0;
            int R_MTD = 0;
            int C_Current_Day = 0;
            int C_MTD = 0;
            int ReSearch_Value = 0;
            int Search = 0;
            int Tax = 0; int Search_Qc = 0; int Typing = 0; int Typing_QC = 0; int Final_Qc = 0; int Exception_My_Value = 0; int Upload = 0; int Abstractor = 0; int Vendor = 0;
            int AFA = 0; int WFA = 0; int Clarification = 0; int Hold = 0; int Cancelled = 0; int WFT = 0; int Search_Tax = 0;



            for (int i = 0; i < Grid_My_Report.Rows.Count - 1; i++)
            {
                if (Grid_My_Report["R_Current_Day", i].Value != DBNull.Value)
                {
                    R_Current_Day += (int)Grid_My_Report["R_Current_Day", i].Value;
                }
                if (Grid_My_Report["R_MTD", i].Value != DBNull.Value)
                {
                    R_MTD += (int)Grid_My_Report["R_MTD", i].Value;
                }
                if (Grid_My_Report["C_Current_Day", i].Value != DBNull.Value)
                {

                    C_Current_Day += (int)Grid_My_Report["C_Current_Day", i].Value;
                }
                if (Grid_My_Report["C_MTD", i].Value != DBNull.Value)
                {

                    C_MTD += (int)Grid_My_Report["C_MTD", i].Value;
                }
                if (Grid_My_Report["Research", i].Value != DBNull.Value)
                {

                    ReSearch_Value += (int)Grid_My_Report["Research", i].Value;
                }
                if (Grid_My_Report["Search", i].Value != DBNull.Value)
                {

                    Search += (int)Grid_My_Report["Search", i].Value;
                }
                if (Grid_My_Report["Tax", i].Value != DBNull.Value)
                {

                    Tax += (int)Grid_My_Report["Tax", i].Value;
                }
                if (Grid_My_Report["Search_Qc", i].Value != DBNull.Value)
                {

                    Search_Qc += (int)Grid_My_Report["Search_Qc", i].Value;
                }
                if (Grid_My_Report["Typing", i].Value != DBNull.Value)
                {

                    Typing += (int)Grid_My_Report["Typing", i].Value;
                }
                if (Grid_My_Report["Typing_QC", i].Value != DBNull.Value)
                {

                    Typing_QC += (int)Grid_My_Report["Typing_QC", i].Value;
                }
                if (Grid_My_Report["Final_QC", i].Value != DBNull.Value)
                {


                    Final_Qc += (int)Grid_My_Report["Final_QC", i].Value;
                }
                if (Grid_My_Report["Exception", i].Value != DBNull.Value)
                {


                    Exception_My_Value += (int)Grid_My_Report["Exception", i].Value;
                }
                if (Grid_My_Report["Upload", i].Value != DBNull.Value)
                {

                    Upload += (int)Grid_My_Report["Upload", i].Value;
                }
                if (Grid_My_Report["Abstractor", i].Value != DBNull.Value)
                {

                    Abstractor += (int)Grid_My_Report["Abstractor", i].Value;
                }
                if (Grid_My_Report["Vendor", i].Value != DBNull.Value)
                {

                    Vendor += (int)Grid_My_Report["Vendor", i].Value;
                }

                if (Grid_My_Report["Clarification", i].Value != DBNull.Value)
                {

                    Clarification += (int)Grid_My_Report["Clarification", i].Value;
                }
                if (Grid_My_Report["Hold", i].Value != DBNull.Value)
                {

                    Hold += (int)Grid_My_Report["Hold", i].Value;
                }
                if (Grid_My_Report["Cancelled", i].Value != DBNull.Value)
                {

                    Cancelled += (int)Grid_My_Report["Cancelled", i].Value;
                }
                if (Grid_My_Report["WFT", i].Value != DBNull.Value)
                {

                    WFT += (int)Grid_My_Report["WFT", i].Value;
                }
                if (Grid_My_Report["Search_Tax", i].Value != DBNull.Value)
                {

                    Search_Tax += (int)Grid_My_Report["Search_Tax", i].Value;
                }
            }
            if (User_Role_Id == "1")
            {
                Grid_My_Report["Client", Grid_My_Report.Rows.Count - 1].Value = "Total";
            }
            else
            {


            }
            Grid_My_Report["R_Current_Day", Grid_My_Report.Rows.Count - 1].Value = R_Current_Day;
            Grid_My_Report["R_MTD", Grid_My_Report.Rows.Count - 1].Value = R_MTD;
            Grid_My_Report["C_Current_Day", Grid_My_Report.Rows.Count - 1].Value = C_Current_Day;
            Grid_My_Report["C_MTD", Grid_My_Report.Rows.Count - 1].Value = C_MTD;
            Grid_My_Report["Research", Grid_My_Report.Rows.Count - 1].Value = ReSearch_Value;
            Grid_My_Report["Search", Grid_My_Report.Rows.Count - 1].Value = Search;
            Grid_My_Report["Tax", Grid_My_Report.Rows.Count - 1].Value = Tax;
            Grid_My_Report["Search_Qc", Grid_My_Report.Rows.Count - 1].Value = Search_Qc;
            Grid_My_Report["Typing", Grid_My_Report.Rows.Count - 1].Value = Typing;
            Grid_My_Report["Typing_QC", Grid_My_Report.Rows.Count - 1].Value = Typing_QC;
            Grid_My_Report["Final_QC", Grid_My_Report.Rows.Count - 1].Value = Final_Qc;
            Grid_My_Report["Exception", Grid_My_Report.Rows.Count - 1].Value = Exception_My_Value;
            Grid_My_Report["Upload", Grid_My_Report.Rows.Count - 1].Value = Upload;
            Grid_My_Report["Abstractor", Grid_My_Report.Rows.Count - 1].Value = Abstractor;
            Grid_My_Report["Vendor", Grid_My_Report.Rows.Count - 1].Value = Vendor;

            Grid_My_Report["Clarification", Grid_My_Report.Rows.Count - 1].Value = Clarification;
            Grid_My_Report["Hold", Grid_My_Report.Rows.Count - 1].Value = Hold;
            Grid_My_Report["Cancelled", Grid_My_Report.Rows.Count - 1].Value = Cancelled;
            Grid_My_Report["WFT", Grid_My_Report.Rows.Count - 1].Value = WFT;
            Grid_My_Report["Search_Tax", Grid_My_Report.Rows.Count - 1].Value = Search_Tax;
        }

        private void lbl_Tax_Processing_Count_Click(object sender, EventArgs e)
        {
            Tax.Tax_Inhouse_Order_View taxinv = new Tax.Tax_Inhouse_Order_View("Processing", userid, User_Role_Id);
            taxinv.Show();

            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Tax.Tax_Inhouse_Order_View("Processing", userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 
        }

        private void lbl_Tax_Returned_Click(object sender, EventArgs e)
        {
            Tax.Tax_Inhouse_Order_View taxinv = new Tax.Tax_Inhouse_Order_View("Completed", userid, User_Role_Id);
            taxinv.Show();

            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Tax.Tax_Inhouse_Order_View("Completed", userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start(); 
        }

        private void lbl_tax_Pending_Click(object sender, EventArgs e)
        {
            Tax.Tax_Inhouse_Order_View taxinv = new Tax.Tax_Inhouse_Order_View("Hold", userid, User_Role_Id);
            taxinv.Show();

            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Tax.Tax_Inhouse_Order_View("Hold", userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start();
        }

        private void lbl_Tax_Cancelled_Click(object sender, EventArgs e)
        {
            Tax.Tax_Inhouse_Order_View taxinv = new Tax.Tax_Inhouse_Order_View("Cancelled", userid, User_Role_Id);
            taxinv.Show();

            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Tax.Tax_Inhouse_Order_View("Cancelled", userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start();
        }

        private void emailProposalRequestToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(84) != false)
            {
                Ordermanagement_01.Client_Proposal.Client_Proposal_Email email = new Ordermanagement_01.Client_Proposal.Client_Proposal_Email(userid);
                email.Show();
            }

        }

        private void createProposalClientToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(81) != false)
            {
                Ordermanagement_01.Client_Proposal.Create_Client_Proposal create_cli = new Ordermanagement_01.Client_Proposal.Create_Client_Proposal(userid);
                create_cli.Show();
            }

        }

        private void createProposalAttachmentToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(82) != false)
            {
                Ordermanagement_01.Client_Proposal.Create_Attachements create_att = new Ordermanagement_01.Client_Proposal.Create_Attachements(userid);
                create_att.Show();
            }
        }

        private void emailToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(83) != false)
            {
                Ordermanagement_01.Client_Proposal.Proposal_Email_Settings email = new Ordermanagement_01.Client_Proposal.Proposal_Email_Settings(userid, User_Role_Id);
                email.Show();
            }
        }

        private void employeeAlertNotesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(17) != false)
            {
                Ordermanagement_01.Masters.Employee_Alert_box alert = new Ordermanagement_01.Masters.Employee_Alert_box(userid, User_Role_Id);
                alert.Show();
            }
        }

        private void employeeOrderSourceToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(16) != false)
            {
                Ordermanagement_01.Masters.Employee_Search_Order_Source source = new Ordermanagement_01.Masters.Employee_Search_Order_Source(userid, User_Role_Id, lbl_username.Text);
                source.Show();
            }
        }

        private void Employee_Wise_Effeciency()
        {
            Hashtable htctime = new Hashtable();
            System.Data.DataTable dtctime = new System.Data.DataTable();
            htctime.Add("@Trans", "GET_CUREENT_TIME");
            dtctime = dataaccess.ExecuteSP("Sp_User_24_7_Employee_Production_Report", htctime);

            int Time = int.Parse(dtctime.Rows[0]["c_Time"].ToString());
            DateTime dtc_date = Convert.ToDateTime(dtctime.Rows[0]["c_Date"]);

            if (Time == 0 || Time == 1 || Time == 2 || Time == 3 || Time == 4 || Time == 5 || Time == 6 || Time == 7 || Time == 8)
            {
                dtfirsttime = dtc_date.AddDays(-1);
                dtsecondtime = dtc_date;
            }
            else
            {
                dtfirsttime = dtc_date;
                dtsecondtime = dtc_date.AddDays(1);
            }

            F_Date = dtfirsttime.ToString("MM/dd/yyyy");
            T_Date = dtsecondtime.ToString("MM/dd/yyyy");

            Hashtable htemp = new Hashtable();
            System.Data.DataTable dtemp = new System.Data.DataTable();

            grd_DashEmployee_efficency.Rows.Clear();
            //Inserting the Temp Values 
            Hashtable htinsert = new Hashtable();
            System.Data.DataTable dtinsert = new System.Data.DataTable();
            htinsert.Add("@Trans", "INSERT_INTO_TEMP_ALL_USER_ID_WISE");
            htinsert.Add("@Firstdate", F_Date.ToString());
            htinsert.Add("@Second_Date", T_Date.ToString());
            htinsert.Add("@User_Id", userid);
            dtinsert = dataaccess.ExecuteSP("Sp_User_24_7_Employee_Production_Report", htinsert);

            dtemp.Rows.Clear();
            htemp.Add("@Trans", "SELECT_ALL_USER_ID_WISE");
            htemp.Add("@Firstdate", F_Date.ToString());
            htemp.Add("@Second_Date", T_Date.ToString());
            htemp.Add("@User_Id", userid);
            dtemp = dataaccess.ExecuteSP("Sp_User_24_7_Employee_Production_Report", htemp);

            Hashtable httotal = new Hashtable();
            System.Data.DataTable dttotal = new System.Data.DataTable();
            httotal.Add("@Trans", "GET_TOTAL_COUNT");
            httotal.Add("@User_Id", userid);
            dttotal = dataaccess.ExecuteSP("Sp_User_24_7_Employee_Production_Report", httotal);
            grd_DashEmployee_efficency.Rows.Add();
            grd_DashEmployee_efficency.Rows[0].Cells[3].Value = userid;
            if (dttotal.Rows.Count > 0)
            {
                grd_DashEmployee_efficency.Rows[0].Cells[0].Value = int.Parse(dttotal.Rows[0]["Total_Orders"].ToString());

            }
            else
            {
                grd_DashEmployee_efficency.Rows[0].Cells[0].Value = 0;
            }

            Hashtable htallocated_time = new Hashtable();
            System.Data.DataTable dtallocated_time = new System.Data.DataTable();

            htallocated_time.Add("@Trans", "GET_ORDERS_COUNT_BY_TASK_ORDER_TYPE_USER_WISE");
            htallocated_time.Add("@User_Id", userid);
            dtallocated_time = dataaccess.ExecuteSP("Sp_User_24_7_Employee_Production_Report", htallocated_time);

            if (dtallocated_time.Rows.Count > 0)
            {
                Total_Allocated_Time = 0; Total_Working_Time = 0; Effiececncy = 0;
                for (int j = 0; j < dtallocated_time.Rows.Count; j++)
                {
                    Hashtable ht_time = new Hashtable();
                    System.Data.DataTable dt_time = new System.Data.DataTable();

                    ht_time.Add("@Trans", "GET_ORDERS_COUNT_BY_TASK_ORDER_TYPE_WISE");
                    ht_time.Add("@User_Id", userid);
                    ht_time.Add("@Order_Status_Id", dtallocated_time.Rows[j]["Order_Status_Id"].ToString());
                    ht_time.Add("@Order_Type_Abbreviation", dtallocated_time.Rows[j]["OrderType_ABS_Id"].ToString());
                    dt_time = dataaccess.ExecuteSP("Sp_User_24_7_Employee_Production_Report", ht_time);

                    if (dt_time.Rows.Count > 0)
                    {

                        Hashtable ht_tasktime = new Hashtable();
                        System.Data.DataTable dt_tasktime = new System.Data.DataTable();
                        ht_tasktime.Add("@Trans", "GET_EMPLOYEE_TASK_WISE_TIME");
                        string Order_Type_Abbrivation = dtallocated_time.Rows[j]["OrderType_ABS_Id"].ToString();
                        ht_tasktime.Add("@Order_Status_Id", dtallocated_time.Rows[j]["Order_Status_Id"].ToString());
                        ht_tasktime.Add("@Order_Type_Abbreviation", Order_Type_Abbrivation);
                        dt_tasktime = dataaccess.ExecuteSP("Sp_User_24_7_Employee_Production_Report", ht_tasktime);
                        if (dt_tasktime.Rows.Count > 0)
                        {

                            int T_Al_Time = int.Parse(dt_tasktime.Rows[0]["Allocated_Time"].ToString()) * 60;
                            Total_Allocated_Time += double.Parse(dt_time.Rows[0]["No_Of_Orders"].ToString()) * double.Parse(T_Al_Time.ToString());
                        }
                        Total_Working_Time += double.Parse(dt_time.Rows[0]["Total_Time"].ToString());
                    }
                    else
                    {
                        //Total_Allocated_Time = 0; Total_Working_Time = 0; Effiececncy = 0;
                    }
                    Hashtable htUser_Hold_Time = new Hashtable();
                    System.Data.DataTable dtUser_Hold_Time = new System.Data.DataTable();

                    htUser_Hold_Time.Add("@Trans", "GET_USER_HOLD_CLARIFICATION_TIME");
                    htUser_Hold_Time.Add("@User_Id", userid);
                    dtUser_Hold_Time = dataaccess.ExecuteSP("Sp_User_24_7_Employee_Production_Report", htUser_Hold_Time);
                    if (dtUser_Hold_Time.Rows.Count > 0)
                    {

                        Totla_User_Hold_Time = double.Parse(dtUser_Hold_Time.Rows[0]["Total_Time"].ToString());
                    }
                    else
                    {
                        Totla_User_Hold_Time = 0;
                    }
                    Total_Working_Time += Totla_User_Hold_Time;
                    Totla_User_Exception_Time = 0;

                    Hashtable htUser_Exception_Time = new Hashtable();
                    System.Data.DataTable dtUser_Exception_Time = new System.Data.DataTable();

                    htUser_Exception_Time.Add("@Trans", "GET_EXCEPTION_TOTAL_TIME");
                    htUser_Exception_Time.Add("@User_Id", userid);
                    dtUser_Exception_Time = dataaccess.ExecuteSP("Sp_User_24_7_Employee_Production_Report", htUser_Exception_Time);
                    if (dtUser_Exception_Time.Rows.Count > 0)
                    {
                        Totla_User_Exception_Time = double.Parse(dtUser_Exception_Time.Rows[0]["Total_Time"].ToString());
                    }
                    else
                    {
                        Totla_User_Exception_Time = 0;
                    }

                    double Day_Wise_Total_Time = 8 * 60 * 60;
                    Exception_Effeciency = (Totla_User_Exception_Time / Day_Wise_Total_Time) * 100;
                    //Effeciency Formula
                    TimeSpan t;
                    t = TimeSpan.FromSeconds(Total_Working_Time + Totla_User_Exception_Time);
                    string formatedTime = string.Format("{0:D2}H:{1:D2}M:{2:D2}S",
                           t.Hours,
                           t.Minutes,
                           t.Seconds);
                    grd_DashEmployee_efficency.Rows[0].Cells[1].Value = formatedTime.ToString();

                    // Effiececncy = (Total_Working_Time / Total_Allocated_Time)*100;
                    Effiececncy = (Total_Allocated_Time / Day_Wise_Total_Time) * 100;

                    Total_Effeciency = Effiececncy + Exception_Effeciency;

                    double ouputValue = Math.Round(Total_Effeciency, 2);

                    grd_DashEmployee_efficency.Rows[0].Cells[2].Value = Convert.ToDouble(ouputValue.ToString());

                }
            }
        }

        private void Populate_Production_Date()
        {
            Hashtable htget_day = new Hashtable();
            System.Data.DataTable dtget_Day = new System.Data.DataTable();

            htget_day.Add("@Trans", "GET_WEEK_END_DAY");
            dtget_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_day);
            if (dtget_Day.Rows.Count > 0)
            {
                Day = int.Parse(dtget_Day.Rows[0]["Day"].ToString());
            }

            Hashtable htget_Hour = new Hashtable();
            System.Data.DataTable dtget_Hour = new System.Data.DataTable();

            htget_Hour.Add("@Trans", "GET_HOUR");
            dtget_Hour = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Hour);
            if (dtget_Hour.Rows.Count > 0)
            {
                Hour = int.Parse(dtget_Hour.Rows[0]["Hour"].ToString());
            }
            if (Day != null && Hour != null)
            {
                //Check Day in Week days
                //Tuesday To Friday For day Shift
                if (Day == 3 || Day == 4 || Day == 5 || Day == 6)
                {
                    //Check Hours
                    //For Day Shift
                    if (Hour == 7 || Hour == 8 || Hour == 9 || Hour == 10 || Hour == 11 || Hour == 12 || Hour == 13 || Hour == 14 || Hour == 15 || Hour == 16)
                    {
                        //Check the Current Day is Holiday 
                        Hashtable htcheck_Holiday = new Hashtable();
                        System.Data.DataTable dtcheck_Holiday = new System.Data.DataTable();
                        htcheck_Holiday.Add("@Trans", "GET_HOLIDAY_BY_CURRENT_DATE");
                        dtcheck_Holiday = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htcheck_Holiday);
                        Current_Holiday = 0;
                        if (dtcheck_Holiday.Rows.Count > 0)
                        {
                            Hashtable htget_Current_day = new Hashtable();
                            System.Data.DataTable dtget_Current_Day = new System.Data.DataTable();
                            htget_Current_day.Add("@Trans", "GET_CURRENT_DAY");
                            dtget_Current_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Current_day);
                            if (dtget_Current_Day.Rows.Count > 0)
                            {
                                Current_Holiday = 1;
                                Production_Date = dtget_Current_Day.Rows[0]["Production_Date"].ToString();
                            }
                        }
                        else
                        {
                            // Check the previous Day is Holiday or not 
                            //Checking 

                            Previous_Holiday = 0;
                            Hashtable htget_Day_prod_date = new Hashtable();
                            System.Data.DataTable dtget_Day_Prod_Date = new System.Data.DataTable();

                            htget_Day_prod_date.Add("@Trans", "GET_DAY_SHIFT_PRV_DAY");
                            dtget_Day_Prod_Date = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date);

                            if (dtget_Day_Prod_Date.Rows.Count > 0)
                            {
                                // Production_Date = dtget_Day_Prod_Date.Rows[0]["Production_Date"].ToString();
                                htcheck_Holiday.Clear();
                                htcheck_Holiday.Add("@Trans", "GET_HOLIDAY_BY_DATE");
                                htcheck_Holiday.Add("@Date", dtget_Day_Prod_Date.Rows[0]["Production_Date"]);
                                dtcheck_Holiday = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htcheck_Holiday);

                                if (dtcheck_Holiday.Rows.Count > 0)
                                {
                                    //if the Previous Day is Holiday
                                    Previous_Holiday = 1;
                                    Hashtable htget_day1 = new Hashtable();
                                    System.Data.DataTable dtget_Day1 = new System.Data.DataTable();

                                    htget_day1.Add("@Trans", "GET_DAY_NO_BY_DATE");
                                    htget_day1.Add("@Date", dtcheck_Holiday.Rows[0]["Holiday_date"].ToString());
                                    dtget_Day1 = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_day1);
                                    if (dtget_Day1.Rows.Count > 0)
                                    {
                                        Prv_day = int.Parse(dtget_Day1.Rows[0]["Day"].ToString());
                                    }
                                    if (Prv_day == 3 || Prv_day == 4 || Prv_day == 5 || Prv_day == 6)
                                    {

                                        //If its Weekdays ====== Prod.date=Holiday.Date-1
                                        Hashtable htget_Day_prod_date1 = new Hashtable();
                                        System.Data.DataTable dtget_Day_prod_date1 = new System.Data.DataTable();

                                        htget_Day_prod_date1.Add("@Trans", "GET_DAY_SHIFT_PRV_DAY_BY_HOLIDAYDATE");
                                        htget_Day_prod_date1.Add("@Date", dtcheck_Holiday.Rows[0]["Holiday_date"].ToString());
                                        dtget_Day_prod_date1 = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date1);

                                        if (dtget_Day_prod_date1.Rows.Count > 0)
                                        {
                                            Production_Date = dtget_Day_prod_date1.Rows[0]["Production_Date"].ToString();
                                        }
                                    }
                                    else if (Prv_day == 2)
                                    {
                                        //For Day Shift
                                        if (Hour == 7 || Hour == 8 || Hour == 9 || Hour == 10 || Hour == 11 || Hour == 12 || Hour == 13 || Hour == 14 || Hour == 15 || Hour == 16)
                                        {
                                            //Gettting Friday Day if the day is monday
                                            htget_Day_prod_date.Clear();
                                            dtget_Day_Prod_Date.Clear();
                                            htget_Day_prod_date.Add("@Trans", "GET_FRIDAY_DATE_FOR_MONDAY_DAY_SHIFT");
                                            dtget_Day_Prod_Date = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date);

                                            if (dtget_Day_Prod_Date.Rows.Count > 0)
                                            {
                                                //Check The Friday Is Holiday Or Not
                                                htcheck_Holiday.Clear();
                                                htcheck_Holiday.Add("@Trans", "GET_HOLIDAY_BY_DATE");
                                                htcheck_Holiday.Add("@Date", dtget_Day_Prod_Date.Rows[0]["Production_Date"]);
                                                dtcheck_Holiday = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htcheck_Holiday);

                                                if (dtcheck_Holiday.Rows.Count > 0)
                                                {
                                                    htget_Day_prod_date.Clear();
                                                    dtget_Day_Prod_Date.Clear();
                                                    htget_Day_prod_date.Add("@Trans", "GET_FRIDAY_DATE_LEAVE_ON_MONDAY");
                                                    dtget_Day_Prod_Date = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date);

                                                    if (dtget_Day_Prod_Date.Rows.Count > 0)
                                                    {
                                                        Production_Date = dtget_Day_Prod_Date.Rows[0]["Production_Date"].ToString();
                                                    }
                                                }
                                                else
                                                {
                                                    htget_Day_prod_date.Clear();
                                                    dtget_Day_Prod_Date.Clear();
                                                    htget_Day_prod_date.Add("@Trans", "GET_FRIDAY_DATE_FOR_MONDAY_DAY_SHIFT");
                                                    dtget_Day_Prod_Date = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date);
                                                    if (dtget_Day_Prod_Date.Rows.Count > 0)
                                                    {
                                                        Production_Date = dtget_Day_Prod_Date.Rows[0]["Production_Date"].ToString();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (Previous_Holiday == 0 && Current_Holiday == 0)
                                    {
                                        //This IS Current Day is Not holiday and Previous day is not Holiday Then
                                        //This is from Tuesday-Friday
                                        if (Day == 3 || Day == 4 || Day == 5 || Day == 6)
                                        {
                                            //Check Hours
                                            //For Day Shift
                                            if (Hour == 7 || Hour == 8 || Hour == 9 || Hour == 10 || Hour == 11 || Hour == 12 || Hour == 13 || Hour == 14 || Hour == 15 || Hour == 16)
                                            {
                                                Hashtable htget_Day_prod_date1 = new Hashtable();
                                                System.Data.DataTable dtget_Day_prod_date1 = new System.Data.DataTable();

                                                htget_Day_prod_date1.Add("@Trans", "GET_DAY_SHIFT_PRV_DAY");
                                                dtget_Day_prod_date1 = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date1);

                                                if (dtget_Day_prod_date1.Rows.Count > 0)
                                                {
                                                    Production_Date = dtget_Day_prod_date1.Rows[0]["Production_Date"].ToString();
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        //If not Prvious Day Holiday Then Prd.date=Prv.Day
                                        if (Prv_day == 3 || Prv_day == 4 || Prv_day == 5 || Prv_day == 6)
                                        {
                                            Hashtable htget_Day_prod_date1 = new Hashtable();
                                            System.Data.DataTable dtget_Day_prod_date1 = new System.Data.DataTable();

                                            htget_Day_prod_date1.Add("@Trans", "GET_DAY_SHIFT_PRV_DAY");
                                            dtget_Day_prod_date1 = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date1);

                                            if (dtget_Day_prod_date1.Rows.Count > 0)
                                            {
                                                Production_Date = dtget_Day_prod_date1.Rows[0]["Production_Date"].ToString();
                                            }
                                        }
                                        else if (Prv_day == 2)
                                        {
                                            //For Day Shift
                                            if (Hour == 7 || Hour == 8 || Hour == 9 || Hour == 10 || Hour == 11 || Hour == 12 || Hour == 13 || Hour == 14 || Hour == 15 || Hour == 16)
                                            {
                                                //Gettting Friday Day if the day is monday
                                                htget_Day_prod_date.Clear();
                                                dtget_Day_Prod_Date.Clear();
                                                htget_day.Add("@Trans", "GET_FRIDAY_DATE_FOR_MONDAY_DAY_SHIFT");
                                                dtget_Day_Prod_Date = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date);

                                                if (dtget_Day_Prod_Date.Rows.Count > 0)
                                                {
                                                    Production_Date = dtget_Day_Prod_Date.Rows[0]["Production_Date"].ToString();
                                                }
                                            }
                                        }
                                    }

                                }
                            }
                        }
                    }
                    //This is For Night Shift
                    else if (Hour == 19 || Hour == 20 || Hour == 21 || Hour == 22 || Hour == 23 || Hour == 0 || Hour == 1 || Hour == 2 || Hour == 3 || Hour == 4 || Hour == 5 || Hour == 6)
                    {
                        Hashtable htcheck_Holiday = new Hashtable();
                        System.Data.DataTable dtcheck_Holiday = new System.Data.DataTable();
                        htcheck_Holiday.Add("@Trans", "GET_HOLIDAY_BY_CURRENT_DATE_FOR_NIGHT_SHIFT");
                        dtcheck_Holiday = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htcheck_Holiday);
                        Current_Holiday = 0;
                        if (dtcheck_Holiday.Rows.Count > 0)
                        {
                            Hashtable htget_Current_day = new Hashtable();
                            System.Data.DataTable dtget_Current_Day = new System.Data.DataTable();
                            htget_Current_day.Add("@Trans", "GET_NIGHT_SHIFT_DATE");
                            dtget_Current_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Current_day);

                            if (dtget_Current_Day.Rows.Count > 0)
                            {
                                Production_Date = dtget_Current_Day.Rows[0]["Production_Date"].ToString();
                            }
                        }
                        else
                        {
                            Hashtable htget_Current_day = new Hashtable();
                            System.Data.DataTable dtget_Current_Day = new System.Data.DataTable();
                            htget_Current_day.Add("@Trans", "GET_NIGHT_SHIFT_DATE");
                            dtget_Current_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Current_day);

                            if (dtget_Current_Day.Rows.Count > 0)
                            {
                                Production_Date = dtget_Current_Day.Rows[0]["Production_Date"].ToString();
                            }
                        }
                    }

                    else if (Hour == 17 || Hour == 18)
                    {
                        // This is Day Shift Ending and Nightshfit begining

                        // Check the User Logged in this Production Date

                        Hashtable htcheck_Holiday = new Hashtable();
                        System.Data.DataTable dtcheck_Holiday = new System.Data.DataTable();
                        htcheck_Holiday.Add("@Trans", "GET_HOLIDAY_BY_CURRENT_DATE_FOR_NIGHT_SHIFT");
                        dtcheck_Holiday = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htcheck_Holiday);
                        Current_Holiday = 0;
                        if (dtcheck_Holiday.Rows.Count > 0)
                        {
                            Hashtable htget_Current_day = new Hashtable();
                            System.Data.DataTable dtget_Current_Day = new System.Data.DataTable();
                            htget_Current_day.Add("@Trans", "GET_NIGHT_SHIFT_DATE");
                            dtget_Current_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Current_day);

                            if (dtget_Current_Day.Rows.Count > 0)
                            {
                                Production_Date = dtget_Current_Day.Rows[0]["Production_Date"].ToString();
                            }
                        }
                        else
                        {
                            Hashtable htget_Current_day = new Hashtable();
                            System.Data.DataTable dtget_Current_Day = new System.Data.DataTable();
                            htget_Current_day.Add("@Trans", "GET_NIGHT_SHIFT_DATE");
                            dtget_Current_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Current_day);

                            if (dtget_Current_Day.Rows.Count > 0)
                            {
                                Production_Date = dtget_Current_Day.Rows[0]["Production_Date"].ToString();
                            }
                        }
                    }
                }
                //For Monday Day Shift
                else if (Day == 2)
                {
                    //Check Hours
                    //For Day Shift
                    if (Hour == 7 || Hour == 8 || Hour == 9 || Hour == 10 || Hour == 11 || Hour == 12 || Hour == 13 || Hour == 14 || Hour == 15 || Hour == 16)
                    {
                        Hashtable htget_Day_prod_date = new Hashtable();
                        System.Data.DataTable dtget_Day_Prod_Date = new System.Data.DataTable();

                        Hashtable htcheck_Holiday = new Hashtable();
                        System.Data.DataTable dtcheck_Holiday = new System.Data.DataTable();
                        //Gettting Friday Day if the day is monday

                        htget_Day_prod_date.Clear();
                        dtget_Day_Prod_Date.Clear();
                        htget_Day_prod_date.Add("@Trans", "GET_FRIDAY_DATE_FOR_MONDAY_DAY_SHIFT");
                        dtget_Day_Prod_Date = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date);

                        if (dtget_Day_Prod_Date.Rows.Count > 0)
                        {
                            //Check The Friday Is Holiday Or Not

                            htcheck_Holiday.Clear();
                            htcheck_Holiday.Add("@Trans", "GET_HOLIDAY_BY_DATE");
                            htcheck_Holiday.Add("@Date", dtget_Day_Prod_Date.Rows[0]["Production_Date"]);
                            dtcheck_Holiday = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htcheck_Holiday);

                            if (dtcheck_Holiday.Rows.Count > 0)
                            {
                                htget_Day_prod_date.Clear();
                                dtget_Day_Prod_Date.Clear();
                                htget_Day_prod_date.Add("@Trans", "GET_FRIDAY_DATE_LEAVE_ON_MONDAY");
                                dtget_Day_Prod_Date = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date);

                                if (dtget_Day_Prod_Date.Rows.Count > 0)
                                {
                                    Production_Date = dtget_Day_Prod_Date.Rows[0]["Production_Date"].ToString();
                                }
                            }
                            else
                            {
                                htget_Day_prod_date.Clear();
                                dtget_Day_Prod_Date.Clear();
                                htget_Day_prod_date.Add("@Trans", "GET_FRIDAY_DATE_FOR_MONDAY_DAY_SHIFT");
                                dtget_Day_Prod_Date = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date);

                                if (dtget_Day_Prod_Date.Rows.Count > 0)
                                {
                                    Production_Date = dtget_Day_Prod_Date.Rows[0]["Production_Date"].ToString();
                                }
                            }
                        }
                    }
                    //This is For Night Shift
                    else if (Hour == 19 || Hour == 20 || Hour == 21 || Hour == 22 || Hour == 23 || Hour == 0 || Hour == 1 || Hour == 2 || Hour == 3 || Hour == 4 || Hour == 5 || Hour == 6)
                    {
                        Hashtable htget_Current_day = new Hashtable();
                        System.Data.DataTable dtget_Current_Day = new System.Data.DataTable();
                        htget_Current_day.Add("@Trans", "GET_NIGHT_SHIFT_DATE");
                        dtget_Current_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Current_day);

                        if (dtget_Current_Day.Rows.Count > 0)
                        {
                            Production_Date = dtget_Current_Day.Rows[0]["Production_Date"].ToString();
                        }
                    }

                    else if (Hour == 17 || Hour == 18)
                    {
                        // This is Day Shift Ending and Nightshfit begining

                        // Check the User Logged in this Production Date

                        Hashtable htcheck_Holiday = new Hashtable();
                        System.Data.DataTable dtcheck_Holiday = new System.Data.DataTable();
                        htcheck_Holiday.Add("@Trans", "GET_HOLIDAY_BY_CURRENT_DATE_FOR_NIGHT_SHIFT");
                        dtcheck_Holiday = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htcheck_Holiday);
                        Current_Holiday = 0;
                        if (dtcheck_Holiday.Rows.Count > 0)
                        {
                            Hashtable htget_Current_day = new Hashtable();
                            System.Data.DataTable dtget_Current_Day = new System.Data.DataTable();
                            htget_Current_day.Add("@Trans", "GET_NIGHT_SHIFT_DATE");
                            dtget_Current_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Current_day);

                            if (dtget_Current_Day.Rows.Count > 0)
                            {
                                Production_Date = dtget_Current_Day.Rows[0]["Production_Date"].ToString();
                            }
                        }
                        else
                        {
                            Hashtable htget_Current_day = new Hashtable();
                            System.Data.DataTable dtget_Current_Day = new System.Data.DataTable();
                            htget_Current_day.Add("@Trans", "GET_NIGHT_SHIFT_DATE");
                            dtget_Current_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Current_day);

                            if (dtget_Current_Day.Rows.Count > 0)
                            {
                                Production_Date = dtget_Current_Day.Rows[0]["Production_Date"].ToString();
                            }
                        }
                    }
                }
                //For Sat-Sunday Day Shift
                else if (Day == 7 || Day == 1)
                {
                    //Check Hours
                    //For Day Shift
                    if (Hour == 7 || Hour == 8 || Hour == 9 || Hour == 10 || Hour == 11 || Hour == 12 || Hour == 13 || Hour == 14 || Hour == 15 || Hour == 16)
                    {
                        //Prod.Date=Current.Date
                        Hashtable htget_Current_day = new Hashtable();
                        System.Data.DataTable dtget_Current_Day = new System.Data.DataTable();
                        htget_Current_day.Add("@Trans", "GET_CURRENT_DAY");
                        dtget_Current_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Current_day);

                        if (dtget_Current_Day.Rows.Count > 0)
                        {
                            Current_Holiday = 1;
                            Production_Date = dtget_Current_Day.Rows[0]["Production_Date"].ToString();
                        }
                    }
                    if (Hour == 19 || Hour == 20 || Hour == 21 || Hour == 22 || Hour == 23 || Hour == 0 || Hour == 1 || Hour == 2 || Hour == 3 || Hour == 4 || Hour == 5 || Hour == 6)
                    {
                        Hashtable htget_Current_day = new Hashtable();
                        System.Data.DataTable dtget_Current_Day = new System.Data.DataTable();
                        htget_Current_day.Add("@Trans", "GET_NIGHT_SHIFT_DATE");
                        dtget_Current_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Current_day);

                        if (dtget_Current_Day.Rows.Count > 0)
                        {
                            Production_Date = dtget_Current_Day.Rows[0]["Production_Date"].ToString();
                        }
                    }

                    else if (Hour == 17 || Hour == 18)
                    {
                        // This is Day Shift Ending and Nightshfit begining

                        // Check the User Logged in this Production Date

                        Hashtable htcheck_Holiday = new Hashtable();
                        System.Data.DataTable dtcheck_Holiday = new System.Data.DataTable();
                        htcheck_Holiday.Add("@Trans", "GET_HOLIDAY_BY_CURRENT_DATE_FOR_NIGHT_SHIFT");
                        dtcheck_Holiday = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htcheck_Holiday);
                        Current_Holiday = 0;
                        if (dtcheck_Holiday.Rows.Count > 0)
                        {
                            Hashtable htget_Current_day = new Hashtable();
                            System.Data.DataTable dtget_Current_Day = new System.Data.DataTable();
                            htget_Current_day.Add("@Trans", "GET_NIGHT_SHIFT_DATE");
                            dtget_Current_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Current_day);

                            if (dtget_Current_Day.Rows.Count > 0)
                            {
                                Production_Date = dtget_Current_Day.Rows[0]["Production_Date"].ToString();
                            }
                        }
                        else
                        {
                            Hashtable htget_Current_day = new Hashtable();
                            System.Data.DataTable dtget_Current_Day = new System.Data.DataTable();
                            htget_Current_day.Add("@Trans", "GET_NIGHT_SHIFT_DATE");
                            dtget_Current_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Current_day);

                            if (dtget_Current_Day.Rows.Count > 0)
                            {
                                Production_Date = dtget_Current_Day.Rows[0]["Production_Date"].ToString();
                            }
                        }
                    }
                }
            }

            Date_Production_Date = Convert.ToDateTime(Production_Date.ToString());
            string pd_date = Date_Production_Date.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture);
            Production_Date = pd_date.ToString();
        }

        private void Populate_Login_Production_Date()
        {
            Hashtable htget_day = new Hashtable();
            System.Data.DataTable dtget_Day = new System.Data.DataTable();

            htget_day.Add("@Trans", "GET_WEEK_END_DAY");
            dtget_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_day);
            if (dtget_Day.Rows.Count > 0)
            {
                Day = int.Parse(dtget_Day.Rows[0]["Day"].ToString());
            }

            Hashtable htget_Hour = new Hashtable();
            System.Data.DataTable dtget_Hour = new System.Data.DataTable();

            htget_Hour.Add("@Trans", "GET_HOUR");
            dtget_Hour = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Hour);
            if (dtget_Hour.Rows.Count > 0)
            {
                Hour = int.Parse(dtget_Hour.Rows[0]["Hour"].ToString());
            }
            if (Day != null && Hour != null)
            {
                //Check Day in Week days

                //Tuesday To Friday For day Shift
                if (Day == 3 || Day == 4 || Day == 5 || Day == 6)
                {
                    //Check Hours
                    //For Day Shift

                    if (Hour == 7 || Hour == 8 || Hour == 9 || Hour == 10 || Hour == 11 || Hour == 12 || Hour == 13 || Hour == 14 || Hour == 15 || Hour == 16)
                    {
                        //Check the Current Day is Holiday 
                        Hashtable htcheck_Holiday = new Hashtable();
                        System.Data.DataTable dtcheck_Holiday = new System.Data.DataTable();
                        htcheck_Holiday.Add("@Trans", "GET_HOLIDAY_BY_CURRENT_DATE");
                        dtcheck_Holiday = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htcheck_Holiday);
                        Current_Holiday = 0;
                        if (dtcheck_Holiday.Rows.Count > 0)
                        {
                            Hashtable htget_Current_day = new Hashtable();
                            System.Data.DataTable dtget_Current_Day = new System.Data.DataTable();
                            htget_Current_day.Add("@Trans", "GET_CURRENT_DAY");
                            dtget_Current_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Current_day);
                            if (dtget_Current_Day.Rows.Count > 0)
                            {
                                Current_Holiday = 1;
                                Login_Production_Date = dtget_Current_Day.Rows[0]["Production_Date"].ToString();
                            }
                        }
                        else
                        {
                            // Check the previous Day is Holiday or not 
                            //Checking 

                            Previous_Holiday = 0;
                            Hashtable htget_Day_prod_date = new Hashtable();
                            System.Data.DataTable dtget_Day_Prod_Date = new System.Data.DataTable();

                            htget_Day_prod_date.Add("@Trans", "GET_DAY_SHIFT_PRV_DAY");
                            dtget_Day_Prod_Date = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date);

                            if (dtget_Day_Prod_Date.Rows.Count > 0)
                            {
                                // Production_Date = dtget_Day_Prod_Date.Rows[0]["Production_Date"].ToString();
                                htcheck_Holiday.Clear();
                                htcheck_Holiday.Add("@Trans", "GET_HOLIDAY_BY_DATE");
                                htcheck_Holiday.Add("@Date", dtget_Day_Prod_Date.Rows[0]["Production_Date"]);
                                dtcheck_Holiday = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htcheck_Holiday);

                                if (dtcheck_Holiday.Rows.Count > 0)
                                {
                                    //if the Previous Day is Holiday
                                    Previous_Holiday = 1;
                                    Hashtable htget_day1 = new Hashtable();
                                    System.Data.DataTable dtget_Day1 = new System.Data.DataTable();

                                    htget_day1.Add("@Trans", "GET_DAY_NO_BY_DATE");
                                    htget_day1.Add("@Date", dtcheck_Holiday.Rows[0]["Holiday_date"].ToString());
                                    dtget_Day1 = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_day1);
                                    if (dtget_Day1.Rows.Count > 0)
                                    {
                                        Prv_day = int.Parse(dtget_Day1.Rows[0]["Day"].ToString());
                                    }
                                    if (Prv_day == 3 || Prv_day == 4 || Prv_day == 5 || Prv_day == 6)
                                    {

                                        //If its Weekdays ====== Prod.date=Holiday.Date-1
                                        Hashtable htget_Day_prod_date1 = new Hashtable();
                                        System.Data.DataTable dtget_Day_prod_date1 = new System.Data.DataTable();

                                        htget_Day_prod_date1.Add("@Trans", "GET_DAY_SHIFT_PRV_DAY_BY_HOLIDAYDATE");
                                        htget_Day_prod_date1.Add("@Date", dtcheck_Holiday.Rows[0]["Holiday_date"].ToString());
                                        dtget_Day_prod_date1 = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date1);

                                        if (dtget_Day_prod_date1.Rows.Count > 0)
                                        {
                                            Login_Production_Date = dtget_Day_prod_date1.Rows[0]["Production_Date"].ToString();
                                        }
                                    }
                                    else if (Prv_day == 2)
                                    {
                                        //For Day Shift
                                        if (Hour == 7 || Hour == 8 || Hour == 9 || Hour == 10 || Hour == 11 || Hour == 12 || Hour == 13 || Hour == 14 || Hour == 15 || Hour == 16)
                                        {
                                            //Gettting Friday Day if the day is monday
                                            htget_Day_prod_date.Clear();
                                            dtget_Day_Prod_Date.Clear();
                                            htget_Day_prod_date.Add("@Trans", "GET_FRIDAY_DATE_FOR_MONDAY_DAY_SHIFT");
                                            dtget_Day_Prod_Date = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date);

                                            if (dtget_Day_Prod_Date.Rows.Count > 0)
                                            {
                                                //Check The Friday Is Holiday Or Not
                                                htcheck_Holiday.Clear();
                                                htcheck_Holiday.Add("@Trans", "GET_HOLIDAY_BY_DATE");
                                                htcheck_Holiday.Add("@Date", dtget_Day_Prod_Date.Rows[0]["Production_Date"]);
                                                dtcheck_Holiday = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htcheck_Holiday);

                                                if (dtcheck_Holiday.Rows.Count > 0)
                                                {
                                                    htget_Day_prod_date.Clear();
                                                    dtget_Day_Prod_Date.Clear();
                                                    htget_Day_prod_date.Add("@Trans", "GET_FRIDAY_DATE_LEAVE_ON_MONDAY");
                                                    dtget_Day_Prod_Date = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date);

                                                    if (dtget_Day_Prod_Date.Rows.Count > 0)
                                                    {
                                                        Login_Production_Date = dtget_Day_Prod_Date.Rows[0]["Production_Date"].ToString();
                                                    }
                                                }
                                                else
                                                {
                                                    htget_Day_prod_date.Clear();
                                                    dtget_Day_Prod_Date.Clear();
                                                    htget_Day_prod_date.Add("@Trans", "GET_FRIDAY_DATE_FOR_MONDAY_DAY_SHIFT");
                                                    dtget_Day_Prod_Date = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date);
                                                    if (dtget_Day_Prod_Date.Rows.Count > 0)
                                                    {
                                                        Login_Production_Date = dtget_Day_Prod_Date.Rows[0]["Production_Date"].ToString();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (Previous_Holiday == 0 && Current_Holiday == 0)
                                    {
                                        //This IS Current Day is Not holiday and Previous day is not Holiday Then
                                        //This is from Tuesday-Friday
                                        if (Day == 3 || Day == 4 || Day == 5 || Day == 6)
                                        {
                                            //Check Hours
                                            //For Day Shift
                                            if (Hour == 7 || Hour == 8 || Hour == 9 || Hour == 10 || Hour == 11 || Hour == 12 || Hour == 13 || Hour == 14 || Hour == 15 || Hour == 16 || Hour == 17 || Hour == 18)
                                            {
                                                Hashtable htget_Day_prod_date1 = new Hashtable();
                                                System.Data.DataTable dtget_Day_prod_date1 = new System.Data.DataTable();

                                                htget_Day_prod_date1.Add("@Trans", "GET_DAY_SHIFT_PRV_DAY");
                                                dtget_Day_prod_date1 = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date1);

                                                if (dtget_Day_prod_date1.Rows.Count > 0)
                                                {
                                                    Login_Production_Date = dtget_Day_prod_date1.Rows[0]["Production_Date"].ToString();
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        //If not Prvious Day Holiday Then Prd.date=Prv.Day
                                        if (Prv_day == 3 || Prv_day == 4 || Prv_day == 5 || Prv_day == 6)
                                        {
                                            Hashtable htget_Day_prod_date1 = new Hashtable();
                                            System.Data.DataTable dtget_Day_prod_date1 = new System.Data.DataTable();

                                            htget_Day_prod_date1.Add("@Trans", "GET_DAY_SHIFT_PRV_DAY");
                                            dtget_Day_prod_date1 = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date1);

                                            if (dtget_Day_prod_date1.Rows.Count > 0)
                                            {
                                                Login_Production_Date = dtget_Day_prod_date1.Rows[0]["Production_Date"].ToString();
                                            }
                                        }
                                        else if (Prv_day == 2)
                                        {
                                            //For Day Shift
                                            if (Hour == 7 || Hour == 8 || Hour == 9 || Hour == 10 || Hour == 11 || Hour == 12 || Hour == 13 || Hour == 14 || Hour == 15 || Hour == 16 || Hour == 17 || Hour == 18)
                                            {
                                                //Gettting Friday Day if the day is monday
                                                htget_Day_prod_date.Clear();
                                                dtget_Day_Prod_Date.Clear();
                                                htget_day.Add("@Trans", "GET_FRIDAY_DATE_FOR_MONDAY_DAY_SHIFT");
                                                dtget_Day_Prod_Date = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date);

                                                if (dtget_Day_Prod_Date.Rows.Count > 0)
                                                {
                                                    Login_Production_Date = dtget_Day_Prod_Date.Rows[0]["Production_Date"].ToString();
                                                }
                                            }
                                        }
                                    }

                                }
                            }
                        }
                    }
                    //This is For Night Shift
                    else if (Hour == 19 || Hour == 20 || Hour == 21 || Hour == 22 || Hour == 23 || Hour == 0 || Hour == 1 || Hour == 2 || Hour == 3 || Hour == 4 || Hour == 5 || Hour == 6)
                    {
                        Hashtable htcheck_Holiday = new Hashtable();
                        System.Data.DataTable dtcheck_Holiday = new System.Data.DataTable();
                        htcheck_Holiday.Add("@Trans", "GET_HOLIDAY_BY_CURRENT_DATE_FOR_NIGHT_SHIFT");
                        dtcheck_Holiday = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htcheck_Holiday);
                        Current_Holiday = 0;
                        if (dtcheck_Holiday.Rows.Count > 0)
                        {
                            Hashtable htget_Current_day = new Hashtable();
                            System.Data.DataTable dtget_Current_Day = new System.Data.DataTable();
                            htget_Current_day.Add("@Trans", "GET_NIGHT_SHIFT_DATE");
                            dtget_Current_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Current_day);

                            if (dtget_Current_Day.Rows.Count > 0)
                            {
                                Login_Production_Date = dtget_Current_Day.Rows[0]["Production_Date"].ToString();
                            }
                        }
                        else
                        {
                            Hashtable htget_Current_day = new Hashtable();
                            System.Data.DataTable dtget_Current_Day = new System.Data.DataTable();
                            htget_Current_day.Add("@Trans", "GET_NIGHT_SHIFT_DATE");
                            dtget_Current_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Current_day);

                            if (dtget_Current_Day.Rows.Count > 0)
                            {
                                Login_Production_Date = dtget_Current_Day.Rows[0]["Production_Date"].ToString();
                            }
                        }
                    }

                    else if (Hour == 17 || Hour == 18)
                    {
                        // This is Day Shift Ending and Nightshfit begining

                        // Check the User Logged in this Production Date

                        Hashtable htget_Current_day = new Hashtable();
                        System.Data.DataTable dtget_Current_Day = new System.Data.DataTable();
                        htget_Current_day.Add("@Trans", "GET_NIGHT_SHIFT_DATE");
                        dtget_Current_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Current_day);

                        if (dtget_Current_Day.Rows.Count > 0)
                        {
                            Login_Production_Date = dtget_Current_Day.Rows[0]["Production_Date"].ToString();
                        }

                    }
                }
                //For Monday Day Shift
                else if (Day == 2)
                {
                    //Check Hours
                    //For Day Shift
                    if (Hour == 7 || Hour == 8 || Hour == 9 || Hour == 10 || Hour == 11 || Hour == 12 || Hour == 13 || Hour == 14 || Hour == 15 || Hour == 16)
                    {
                        Hashtable htget_Day_prod_date = new Hashtable();
                        System.Data.DataTable dtget_Day_Prod_Date = new System.Data.DataTable();

                        Hashtable htcheck_Holiday = new Hashtable();
                        System.Data.DataTable dtcheck_Holiday = new System.Data.DataTable();
                        //Gettting Friday Day if the day is monday

                        htget_Day_prod_date.Clear();
                        dtget_Day_Prod_Date.Clear();
                        htget_Day_prod_date.Add("@Trans", "GET_FRIDAY_DATE_FOR_MONDAY_DAY_SHIFT");
                        dtget_Day_Prod_Date = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date);

                        if (dtget_Day_Prod_Date.Rows.Count > 0)
                        {
                            //Check The Friday Is Holiday Or Not

                            htcheck_Holiday.Clear();
                            htcheck_Holiday.Add("@Trans", "GET_HOLIDAY_BY_DATE");
                            htcheck_Holiday.Add("@Date", dtget_Day_Prod_Date.Rows[0]["Production_Date"]);
                            dtcheck_Holiday = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htcheck_Holiday);

                            if (dtcheck_Holiday.Rows.Count > 0)
                            {
                                htget_Day_prod_date.Clear();
                                dtget_Day_Prod_Date.Clear();
                                htget_Day_prod_date.Add("@Trans", "GET_FRIDAY_DATE_LEAVE_ON_MONDAY");
                                dtget_Day_Prod_Date = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date);

                                if (dtget_Day_Prod_Date.Rows.Count > 0)
                                {
                                    Login_Production_Date = dtget_Day_Prod_Date.Rows[0]["Production_Date"].ToString();
                                }
                            }
                            else
                            {
                                htget_Day_prod_date.Clear();
                                dtget_Day_Prod_Date.Clear();
                                htget_Day_prod_date.Add("@Trans", "GET_FRIDAY_DATE_FOR_MONDAY_DAY_SHIFT");
                                dtget_Day_Prod_Date = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Day_prod_date);

                                if (dtget_Day_Prod_Date.Rows.Count > 0)
                                {
                                    Login_Production_Date = dtget_Day_Prod_Date.Rows[0]["Production_Date"].ToString();
                                }
                            }
                        }
                    }
                    //This is For Night Shift
                    else if (Hour == 19 || Hour == 20 || Hour == 21 || Hour == 22 || Hour == 23 || Hour == 0 || Hour == 1 || Hour == 2 || Hour == 3 || Hour == 4 || Hour == 5 || Hour == 6)
                    {
                        Hashtable htget_Current_day = new Hashtable();
                        System.Data.DataTable dtget_Current_Day = new System.Data.DataTable();
                        htget_Current_day.Add("@Trans", "GET_NIGHT_SHIFT_DATE");
                        dtget_Current_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Current_day);

                        if (dtget_Current_Day.Rows.Count > 0)
                        {
                            Login_Production_Date = dtget_Current_Day.Rows[0]["Production_Date"].ToString();
                        }
                    }

                    else if (Hour == 17 || Hour == 18)
                    {
                        // This is Day Shift Ending and Nightshfit begining

                        // Check the User Logged in this Production Date

                        Hashtable htget_Current_day = new Hashtable();
                        System.Data.DataTable dtget_Current_Day = new System.Data.DataTable();
                        htget_Current_day.Add("@Trans", "GET_NIGHT_SHIFT_DATE");
                        dtget_Current_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Current_day);

                        if (dtget_Current_Day.Rows.Count > 0)
                        {
                            Login_Production_Date = dtget_Current_Day.Rows[0]["Production_Date"].ToString();
                        }
                    }
                }
                //For Sat-Sunday Day Shift
                else if (Day == 7 || Day == 1)
                {
                    //Check Hours
                    //For Day Shift
                    if (Hour == 7 || Hour == 8 || Hour == 9 || Hour == 10 || Hour == 11 || Hour == 12 || Hour == 13 || Hour == 14 || Hour == 15 || Hour == 16)
                    {
                        //Prod.Date=Current.Date
                        Hashtable htget_Current_day = new Hashtable();
                        System.Data.DataTable dtget_Current_Day = new System.Data.DataTable();
                        htget_Current_day.Add("@Trans", "GET_CURRENT_DAY");
                        dtget_Current_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Current_day);

                        if (dtget_Current_Day.Rows.Count > 0)
                        {
                            Current_Holiday = 1;
                            Login_Production_Date = dtget_Current_Day.Rows[0]["Production_Date"].ToString();
                        }
                    }
                    if (Hour == 19 || Hour == 20 || Hour == 21 || Hour == 22 || Hour == 23 || Hour == 0 || Hour == 1 || Hour == 2 || Hour == 3 || Hour == 4 || Hour == 5 || Hour == 6)
                    {
                        Hashtable htget_Current_day = new Hashtable();
                        System.Data.DataTable dtget_Current_Day = new System.Data.DataTable();
                        htget_Current_day.Add("@Trans", "GET_NIGHT_SHIFT_DATE");
                        dtget_Current_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Current_day);

                        if (dtget_Current_Day.Rows.Count > 0)
                        {
                            Login_Production_Date = dtget_Current_Day.Rows[0]["Production_Date"].ToString();
                        }
                    }

                    else if (Hour == 17 || Hour == 18)
                    {
                        // This is Day Shift Ending and Nightshfit begining

                        // Check the User Logged in this Production Date

                        Hashtable htget_Current_day = new Hashtable();
                        System.Data.DataTable dtget_Current_Day = new System.Data.DataTable();
                        htget_Current_day.Add("@Trans", "GET_NIGHT_SHIFT_DATE");
                        dtget_Current_Day = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Current_day);

                        if (dtget_Current_Day.Rows.Count > 0)
                        {
                            Login_Production_Date = dtget_Current_Day.Rows[0]["Production_Date"].ToString();
                        }

                    }
                }
            }

            Date_Production_Date = Convert.ToDateTime(Login_Production_Date.ToString());
            string pd_date = Date_Production_Date.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture);
            Login_Production_Date = pd_date.ToString();
        }

        private void Employee_New_effeciency()
        {


            Hashtable htctime = new Hashtable();
            System.Data.DataTable dtctime = new System.Data.DataTable();
            htctime.Add("@Trans", "GET_CUREENT_TIME");
            dtctime = dataaccess.ExecuteSP("Sp_User_24_7_Employee_Production_Report", htctime);

            int Time = int.Parse(dtctime.Rows[0]["c_Time"].ToString());
            DateTime dtc_date = Convert.ToDateTime(dtctime.Rows[0]["c_Date"]);

            if (Time == 0 || Time == 1 || Time == 2 || Time == 3 || Time == 4 || Time == 5 || Time == 6 || Time == 7 || Time == 8)
            {
                dtfirsttime = dtc_date.AddDays(-1);
                dtsecondtime = dtc_date;

            }
            else
            {
                dtfirsttime = dtc_date;
                dtsecondtime = dtc_date.AddDays(1);



            }


            Hashtable htget_est_time = new Hashtable();
            System.Data.DataTable dtget_est_time = new System.Data.DataTable();

            htget_est_time.Add("@Trans", "GET_PST_TIME");
            dtget_est_time = dataaccess.ExecuteSP("Sp_Score_Board", htget_est_time);



            F_Date = dtfirsttime.ToString("MM/dd/yyyy");
            T_Date = dtsecondtime.ToString("MM/dd/yyyy");

            Hashtable htemp = new Hashtable();
            System.Data.DataTable dtemp = new System.Data.DataTable();


            grd_DashEmployee_efficency.Rows.Clear();
            grd_DashEmployee_efficency.Rows.Add();
            Hashtable htuser_Order_Details = new Hashtable();
            System.Data.DataTable dtOrder_Details = new System.Data.DataTable();


            htuser_Order_Details.Add("@Trans", "DAILY_USER_EFF");
            htuser_Order_Details.Add("@User_Id", userid);
            DateTime Prd_Date = Convert.ToDateTime(Production_Date.ToString());
            string Prd_Date1 = Prd_Date.ToString("MM/dd/yyyy");
            htuser_Order_Details.Add("@Production_Date", Prd_Date1);
            dtOrder_Details = dataaccess.ExecuteSP("Sp_Score_Board", htuser_Order_Details);
            if (dtOrder_Details.Rows.Count > 0)
            {

                grd_DashEmployee_efficency.Rows[0].Cells[0].Value = int.Parse(dtOrder_Details.Rows[0]["Total_Orders"].ToString());

                grd_DashEmployee_efficency.Rows[0].Cells[2].Value = int.Parse(dtOrder_Details.Rows[0]["Order_User_Effeciency"].ToString());
                grd_DashEmployee_efficency.Rows[0].Cells[3].Value = int.Parse(dtOrder_Details.Rows[0]["User_ID"].ToString());

                TimeSpan t;
                Total_Working_Time = int.Parse(dtOrder_Details.Rows[0]["Total_Time"].ToString());

                t = TimeSpan.FromSeconds(Total_Working_Time);



                string formatedTime = string.Format("{0:D2}H:{1:D2}M:{2:D2}S",
                       t.Hours,
                       t.Minutes,
                       t.Seconds);
                grd_DashEmployee_efficency.Rows[0].Cells[1].Value = formatedTime.ToString();


            }




        }

        private void Employee_New_Update_effeciency()
        {
            Hashtable htemp = new Hashtable();
            System.Data.DataTable dtemp = new System.Data.DataTable();


            Hashtable htuser_Order_Details = new Hashtable();
            System.Data.DataTable dtOrder_Details = new System.Data.DataTable();



            Hashtable htget_Emp_Eff = new Hashtable();
            System.Data.DataTable dtget_Emp_Eff = new System.Data.DataTable();

            htget_Emp_Eff.Add("@Trans", "DAILY_USER_NEW_UPDATED_EFF");
            htget_Emp_Eff.Add("@User_Id", userid);
            DateTime Prd_Date = Convert.ToDateTime(Production_Date.ToString());
            string Prd_Date1 = Prd_Date.ToString("MM/dd/yyyy");
            htget_Emp_Eff.Add("@Production_Date", Prd_Date1);
            dtget_Emp_Eff = dataaccess.ExecuteSP("Sp_Score_Board_Updated", htget_Emp_Eff);



            Hashtable htget_Emp_Prod_Idel_Time = new Hashtable();
            System.Data.DataTable dtget_Emp_Prod_Idel_Time = new System.Data.DataTable();

            htget_Emp_Prod_Idel_Time.Add("@Trans", "GET_BREAK_HOURS");
            htget_Emp_Prod_Idel_Time.Add("@User_Id", userid);
            htget_Emp_Prod_Idel_Time.Add("@Production_Date", Prd_Date1);
            dtget_Emp_Prod_Idel_Time = dataaccess.ExecuteSP("Sp_Score_Board", htget_Emp_Prod_Idel_Time);

            if (dtget_Emp_Prod_Idel_Time.Rows.Count > 0)
            {
                Break_Time = int.Parse(dtget_Emp_Prod_Idel_Time.Rows[0]["Total_Break_Time"].ToString());
            }
            else
            {
                Break_Time = 0;
            }

            Hashtable htget_Emp_Prod_Idel_Time1 = new Hashtable();
            System.Data.DataTable dtget_Emp_Prod_Idel_Time1 = new System.Data.DataTable();

            htget_Emp_Prod_Idel_Time1.Add("@Trans", "GET_IDEAL_HOURS");
            htget_Emp_Prod_Idel_Time1.Add("@User_Id", userid);
            htget_Emp_Prod_Idel_Time1.Add("@Production_Date", Prd_Date1);
            dtget_Emp_Prod_Idel_Time1 = dataaccess.ExecuteSP("Sp_Score_Board", htget_Emp_Prod_Idel_Time1);

            if (dtget_Emp_Prod_Idel_Time1.Rows.Count > 0)
            {
                Ideal_Time = int.Parse(dtget_Emp_Prod_Idel_Time1.Rows[0]["Total_Ideal_Time"].ToString());
            }
            else
            {
                Ideal_Time = 0;
            }

            Hashtable htget_Emp_Prod_Idel_Time2 = new Hashtable();
            System.Data.DataTable dtget_Emp_Prod_Idel_Time2 = new System.Data.DataTable();

            htget_Emp_Prod_Idel_Time2.Add("@Trans", "GET_PRODUCTION_HOURS");
            htget_Emp_Prod_Idel_Time2.Add("@User_Id", userid);
            htget_Emp_Prod_Idel_Time2.Add("@Production_Date", Prd_Date1);
            dtget_Emp_Prod_Idel_Time2 = dataaccess.ExecuteSP("Sp_Score_Board", htget_Emp_Prod_Idel_Time2);

            if (dtget_Emp_Prod_Idel_Time2.Rows.Count > 0)
            {
                Production_Time = int.Parse(dtget_Emp_Prod_Idel_Time2.Rows[0]["Total_Production_Time"].ToString());
            }
            else
            {
                Production_Time = 0;
            }


            if (InvokeRequired)
            {

                this.Invoke(new MethodInvoker(delegate
                {
                    grd_DashEmployee_efficency.Rows.Clear();
                    grd_DashEmployee_efficency.Rows.Add();


                    if (dtget_Emp_Eff.Rows.Count > 0)
                    {
                        grd_DashEmployee_efficency.Rows[0].Cells[0].Value = int.Parse(dtget_Emp_Eff.Rows[0]["Total_Orders"].ToString());
                        grd_DashEmployee_efficency.Rows[0].Cells[5].Value = int.Parse(dtget_Emp_Eff.Rows[0]["Effecinecy"].ToString());
                        grd_DashEmployee_efficency.Rows[0].Cells[6].Value = int.Parse(dtget_Emp_Eff.Rows[0]["User_Id"].ToString());
                    }
                    else
                    {
                        grd_DashEmployee_efficency.Rows[0].Cells[0].Value = "0";
                        grd_DashEmployee_efficency.Rows[0].Cells[5].Value = "0";
                        grd_DashEmployee_efficency.Rows[0].Cells[6].Value = userid;

                    }
                    Total_Time = Production_Time + Break_Time + Ideal_Time;
                    Total_t = TimeSpan.FromSeconds(Total_Time);
                    string Total_formatedTime = string.Format("{0:D2}H:{1:D2}M:{2:D2}S",
                     Total_t.Hours,
                     Total_t.Minutes,
                     Total_t.Seconds);
                    grd_DashEmployee_efficency.Rows[0].Cells[1].Value = Total_formatedTime.ToString();

                    prod_t = TimeSpan.FromSeconds(Production_Time);
                    string Prd_formatedTime = string.Format("{0:D2}H:{1:D2}M:{2:D2}S",
                           prod_t.Hours,
                           prod_t.Minutes,
                           prod_t.Seconds);
                    grd_DashEmployee_efficency.Rows[0].Cells[2].Value = Prd_formatedTime.ToString();

                    Ideal_t = TimeSpan.FromSeconds(Ideal_Time);
                    string idl_formatedTime = string.Format("{0:D2}H:{1:D2}M:{2:D2}S",
                       Ideal_t.Hours,
                       Ideal_t.Minutes,
                       Ideal_t.Seconds);
                    grd_DashEmployee_efficency.Rows[0].Cells[3].Value = idl_formatedTime.ToString();

                    Break_t = TimeSpan.FromSeconds(Break_Time);
                    string brk_formatedTime = string.Format("{0:D2}H:{1:D2}M:{2:D2}S",
                       Break_t.Hours,
                       Break_t.Minutes,
                       Break_t.Seconds);
                    grd_DashEmployee_efficency.Rows[0].Cells[4].Value = brk_formatedTime.ToString();
                }));

            }
            else
            {

                grd_DashEmployee_efficency.Rows.Clear();
                grd_DashEmployee_efficency.Rows.Add();


                if (dtget_Emp_Eff.Rows.Count > 0)
                {
                    grd_DashEmployee_efficency.Rows[0].Cells[0].Value = int.Parse(dtget_Emp_Eff.Rows[0]["Total_Orders"].ToString());
                    grd_DashEmployee_efficency.Rows[0].Cells[5].Value = int.Parse(dtget_Emp_Eff.Rows[0]["Effecinecy"].ToString());
                    grd_DashEmployee_efficency.Rows[0].Cells[6].Value = int.Parse(dtget_Emp_Eff.Rows[0]["User_Id"].ToString());
                }
                else
                {
                    grd_DashEmployee_efficency.Rows[0].Cells[0].Value = "0";
                    grd_DashEmployee_efficency.Rows[0].Cells[5].Value = "0";
                    grd_DashEmployee_efficency.Rows[0].Cells[6].Value = userid;

                }
                Total_Time = Production_Time + Break_Time + Ideal_Time;
                Total_t = TimeSpan.FromSeconds(Total_Time);
                string Total_formatedTime = string.Format("{0:D2}H:{1:D2}M:{2:D2}S",
                 Total_t.Hours,
                 Total_t.Minutes,
                 Total_t.Seconds);
                grd_DashEmployee_efficency.Rows[0].Cells[1].Value = Total_formatedTime.ToString();

                prod_t = TimeSpan.FromSeconds(Production_Time);
                string Prd_formatedTime = string.Format("{0:D2}H:{1:D2}M:{2:D2}S",
                       prod_t.Hours,
                       prod_t.Minutes,
                       prod_t.Seconds);
                grd_DashEmployee_efficency.Rows[0].Cells[2].Value = Prd_formatedTime.ToString();

                Ideal_t = TimeSpan.FromSeconds(Ideal_Time);
                string idl_formatedTime = string.Format("{0:D2}H:{1:D2}M:{2:D2}S",
                   Ideal_t.Hours,
                   Ideal_t.Minutes,
                   Ideal_t.Seconds);
                grd_DashEmployee_efficency.Rows[0].Cells[3].Value = idl_formatedTime.ToString();

                Break_t = TimeSpan.FromSeconds(Break_Time);
                string brk_formatedTime = string.Format("{0:D2}H:{1:D2}M:{2:D2}S",
                   Break_t.Hours,
                   Break_t.Minutes,
                   Break_t.Seconds);
                grd_DashEmployee_efficency.Rows[0].Cells[4].Value = brk_formatedTime.ToString();
            }


        }

        private void grd_DashEmployee_efficency_CellClick(object sender, DataGridViewCellEventArgs e)
        {


            if (e.RowIndex != -1)
            {
                SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);
                try
                {
                    if (e.ColumnIndex == 0)
                    {

                        Employee_24_7_Production_user_id = userid.ToString();

                        Employee_24_7_Production_Value = 0;
                        Employee_24_7_Hour = "0";

                        Hashtable htinsert = new Hashtable();
                        System.Data.DataTable dtinsert = new System.Data.DataTable();

                        // Old Production Report Details
                        //htinsert.Add("@Trans", "INSERT_INTO_TEMP");
                        //htinsert.Add("@Firstdate", F_Date.ToString());
                        //htinsert.Add("@Second_Date", T_Date.ToString());
                        //htinsert.Add("@User_Id", Employee_24_7_Production_user_id.ToString());
                        //dtinsert = dataaccess.ExecuteSP("Sp_User_24_7_Employee_Production_Report", htinsert);

                        // New Production Details

                        htinsert.Add("@Trans", "INSERT_INTO_TEMP_USER");

                        DateTime Prd_Date = Convert.ToDateTime(Production_Date.ToString());
                        string Prd_Date1 = Prd_Date.ToString("MM/dd/yyyy");
                        htinsert.Add("@Production_Date", Prd_Date1.ToString());
                        htinsert.Add("@User_Id", Employee_24_7_Production_user_id.ToString());
                        dtinsert = dataaccess.ExecuteSP("Sp_Employee_Production_Score_Board", htinsert);



                        Ordermanagement_01.Dashboard.Emp_Production_Score_Board TargeDashboard = new Ordermanagement_01.Dashboard.Emp_Production_Score_Board(int.Parse(Employee_24_7_Production_user_id), User_Role_Id, Prd_Date1.ToString(), "");
                        TargeDashboard.Show();
                    }
                    else if (e.ColumnIndex == 3)
                    {
                        Ordermanagement_01.Employee.Employee_View_Break_Details emb = new Employee.Employee_View_Break_Details(Production_Date, userid, "Ideal");
                        emb.Show();
                    }
                    else if (e.ColumnIndex == 2)
                    {
                        Ordermanagement_01.Employee.Employee_View_Break_Details emb = new Employee.Employee_View_Break_Details(Production_Date, userid, "Production");
                        emb.Show();
                    }
                    else if (e.ColumnIndex == 4)
                    {
                        Ordermanagement_01.Employee.Employee_View_Break_Details emb = new Employee.Employee_View_Break_Details(Production_Date, userid, "Break");
                        emb.Show();
                    }
                    else if (e.ColumnIndex == 5)
                    {
                        Employee_24_7_Production_user_id = userid.ToString();

                        Employee_24_7_Production_Value = 0;
                        Employee_24_7_Hour = "0";

                        Hashtable htinsert = new Hashtable();
                        System.Data.DataTable dtinsert = new System.Data.DataTable();

                        // Old Production Report Details
                        //htinsert.Add("@Trans", "INSERT_INTO_TEMP");
                        //htinsert.Add("@Firstdate", F_Date.ToString());
                        //htinsert.Add("@Second_Date", T_Date.ToString());
                        //htinsert.Add("@User_Id", Employee_24_7_Production_user_id.ToString());
                        //dtinsert = dataaccess.ExecuteSP("Sp_User_24_7_Employee_Production_Report", htinsert);

                        // New Production Details

                        htinsert.Add("@Trans", "INSERT_INTO_TEMP_USER");
                        DateTime Prd_Date = Convert.ToDateTime(Production_Date.ToString());
                        string Prd_Date1 = Prd_Date.ToString("MM/dd/yyyy");
                        htinsert.Add("@Production_Date", Prd_Date1.ToString());
                        htinsert.Add("@User_Id", Employee_24_7_Production_user_id.ToString());
                        dtinsert = dataaccess.ExecuteSP("Sp_Employee_Production_Score_Board", htinsert);
                        Ordermanagement_01.Dashboard.Emp_Production_Score_Board TargeDashboard = new Ordermanagement_01.Dashboard.Emp_Production_Score_Board(int.Parse(Employee_24_7_Production_user_id), User_Role_Id, Prd_Date1.ToString(), "");
                        TargeDashboard.Show();

                    }
                }
                catch (Exception ex)
                {

                    //Close Wait Form
                    SplashScreenManager.CloseForm(false);

                    MessageBox.Show("Error Occured Please Check With Administrator");
                }
                finally
                {
                    //Close Wait Form
                    SplashScreenManager.CloseForm(false);
                }
            }
        }

        private void toolStripMenuItem1_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Tax.Tax_Invoice_List invoice = new Ordermanagement_01.Tax.Tax_Invoice_List(userid, User_Role_Id);
            invoice.Show();
        }

        private void btn_Order_Cost_Eamil_Click(object sender, EventArgs e)
        {
            InvoiceRep.Order_Cost oc = new InvoiceRep.Order_Cost(userid, User_Role_Id);
            oc.Show();
        }

        private void clientWiseTaskRestrictionToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(18) != false)
            {
                Ordermanagement_01.Masters.Client_Wise_Task_Restriction cwt = new Masters.Client_Wise_Task_Restriction(userid, User_Role_Id);
                cwt.Show();
            }
        }

        private void clientWiseUserProfileToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void setupUserProfileToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(88) != false)
            {
                Ordermanagement_01.AutoAllocation.Auto_Allocation_User_Profile au = new AutoAllocation.Auto_Allocation_User_Profile(0);
                au.Show();
            }
        }

        private void stateCountyListToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(85) != false)
            {
                Ordermanagement_01.AutoAllocation.State_County_Setup state = new AutoAllocation.State_County_Setup();
                state.Show();
            }
            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.AutoAllocation.State_County_Setup()); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start();


        }

        private void grid_User_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex != -1)
            {
                if (e.ColumnIndex == 0)
                {
                    int User_Id = int.Parse(grid_User.Rows[e.RowIndex].Cells[2].Value.ToString());
                    string value = "False";

                    if (grid_User.CurrentCell.Value != null)
                    {
                        if (bool.Parse(grid_User.CurrentCell.Value.ToString()) == true)
                        {
                            value = "False";
                        }
                        else
                        {
                            value = "True";
                        }
                    }
                    else
                    {
                        value = "True";
                    }

                    Hashtable htupdate_Production = new Hashtable();
                    System.Data.DataTable dtupdate_Production = new System.Data.DataTable();

                    htupdate_Production.Add("@Trans", "UPDTAE_PRODUCTION_LIST");
                    htupdate_Production.Add("@User_Id", User_Id);
                    htupdate_Production.Add("@Production_Set", value);
                    dtupdate_Production = dataaccess.ExecuteSP("Sp_Auto_Allocation_User_Profile", htupdate_Production);
                    Auto_Allocation_Scrol_Postion = grid_User.FirstDisplayedScrollingRowIndex;
                    Bind_Auto_Allocation_Users_List();
                }

            }
        }

        private void ClientUserTeamtoolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(86) != false)
            {
                Ordermanagement_01.AutoAllocation.Auto_Alloaction_Team_Setup at = new AutoAllocation.Auto_Alloaction_Team_Setup(User_Role_Id);
                at.Show();
            }
            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.AutoAllocation.Auto_Alloaction_Team_Setup()); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start();
        }

        private void userWiseClientProfileToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(87) != false)
            {
                Ordermanagement_01.AutoAllocation.Auto_Allocation_User_Client_Profile ac = new AutoAllocation.Auto_Allocation_User_Client_Profile(User_Role_Id);
                ac.Show();
            }

            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.AutoAllocation.Auto_Allocation_User_Client_Profile()); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start();
        }

        private void lbl_Final_Qc_Orders_Allocation_Count_Click(object sender, EventArgs e)
        {

            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);
            try
            {
                Ordermanagement_01.Order_Allocate Orderallocate = new Order_Allocate("FINAL_QC_ORDERS_ALLOCATE", 23, userid, User_Role_Id, Production_Date);
                Orderallocate.Show();

            }

            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }

            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Order_Allocate("FINAL_QC_ORDERS_ALLOCATE", 23, userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start();
        }

        private void lbl_Final_Qc_Orders_Work_Count_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);

            try
            {

                Ordermanagement_01.Employee_View Emp_view = new Ordermanagement_01.Employee_View(23, "Final QC", userid, User_Role_Id, "Live", 1);
                Emp_view.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
        }

        private void grd_My_Client_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void grd_Rework_MyReport_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void Bind_Auto_Not_Assigned_Orders()
        {

            Hashtable htAutoNotAssgined_Order = new Hashtable();

            dtAuto_Not_Assigned_Order.Clear();
            htAutoNotAssgined_Order.Add("@Trans", "GET_NOT_ASSIGNED_ORDER_FOR_AUTO_PRIORITY");
            dtAuto_Not_Assigned_Order = dataaccess.ExecuteSP("Sp_Auto_Allocation_Orders", htAutoNotAssgined_Order);
            if (dtAuto_Not_Assigned_Order.Rows.Count > 0)
            {

                Grid_Auto_Not_Assigned_Orders.Columns[0].Width = 60;
                Grid_Auto_Not_Assigned_Orders.Columns[1].Width = 125;
                Grid_Auto_Not_Assigned_Orders.Columns[2].Width = 180;
                Grid_Auto_Not_Assigned_Orders.Columns[3].Width = 180;
                Grid_Auto_Not_Assigned_Orders.Columns[4].Width = 180;
                Grid_Auto_Not_Assigned_Orders.Columns[5].Width = 100;
                Grid_Auto_Not_Assigned_Orders.Columns[6].Width = 110;
                Grid_Auto_Not_Assigned_Orders.Columns[7].Width = 100;

                if (dtAuto_Not_Assigned_Order.Rows.Count > 0)
                {
                    Grid_Auto_Not_Assigned_Orders.Rows.Clear();

                    for (int i = 0; i < dtAuto_Not_Assigned_Order.Rows.Count; i++)
                    {
                        Grid_Auto_Not_Assigned_Orders.Rows.Add();
                        bool expidate = Convert.ToBoolean(dtAuto_Not_Assigned_Order.Rows[i]["Expidate"].ToString());
                        Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[0].Value = expidate;
                        Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[1].Value = dtAuto_Not_Assigned_Order.Rows[i]["Client_Order_Number"].ToString();
                        if (User_Role_Id == "1")
                        {
                            Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[2].Value = dtAuto_Not_Assigned_Order.Rows[i]["Client_Name"].ToString();
                            Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[3].Value = dtAuto_Not_Assigned_Order.Rows[i]["Sub_ProcessName"].ToString();
                        }
                        else
                        {
                            Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[2].Value = dtAuto_Not_Assigned_Order.Rows[i]["Client_Number"].ToString();
                            Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[3].Value = dtAuto_Not_Assigned_Order.Rows[i]["Subprocess_Number"].ToString();

                        }

                        Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[4].Value = dtAuto_Not_Assigned_Order.Rows[i]["Order_Type"].ToString();
                        Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[5].Value = dtAuto_Not_Assigned_Order.Rows[i]["Date"].ToString();
                        Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[6].Value = dtAuto_Not_Assigned_Order.Rows[i]["State"].ToString();
                        Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[7].Value = dtAuto_Not_Assigned_Order.Rows[i]["County"].ToString();
                        Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[8].Value = dtAuto_Not_Assigned_Order.Rows[i]["Order_ID"].ToString();

                    }
                }
                else
                {
                    Grid_Auto_Not_Assigned_Orders.DataSource = null;
                    Grid_Auto_Not_Assigned_Orders.Rows.Clear();
                    //grd_Assigned_Orders.EmptyDataText = "No Orders Are Avilable";
                    //grd_Assigned_Orders.DataBind();
                }





            }




        }

        private void Bind_Auto_Assigned_Orders()
        {

            Hashtable htAutoAssgined_Order = new Hashtable();
            dtAuto_Assigned_Order.Clear();
            htAutoAssgined_Order.Add("@Trans", "GET_USER_ASSIGNED_ORDER_FOR_AUTO_PRIORITY");
            dtAuto_Assigned_Order = dataaccess.ExecuteSP("Sp_Auto_Allocation_Orders", htAutoAssgined_Order);
            if (dtAuto_Assigned_Order.Rows.Count > 0)
            {

                Grid_Auto_Assigned_Order.Columns[0].Width = 50;
                Grid_Auto_Assigned_Order.Columns[1].Width = 125;
                Grid_Auto_Assigned_Order.Columns[2].Width = 180;
                Grid_Auto_Assigned_Order.Columns[3].Width = 180;
                Grid_Auto_Assigned_Order.Columns[4].Width = 180;
                Grid_Auto_Assigned_Order.Columns[5].Width = 100;
                Grid_Auto_Assigned_Order.Columns[6].Width = 110;
                Grid_Auto_Assigned_Order.Columns[7].Width = 150;
                Grid_Auto_Assigned_Order.Columns[8].Width = 150;

                if (dtAuto_Assigned_Order.Rows.Count > 0)
                {
                    Grid_Auto_Assigned_Order.Rows.Clear();

                    for (int i = 0; i < dtAuto_Assigned_Order.Rows.Count; i++)
                    {
                        Grid_Auto_Assigned_Order.Rows.Add();
                        bool expidate = Convert.ToBoolean(dtAuto_Assigned_Order.Rows[i]["Expidate"].ToString());
                        Grid_Auto_Assigned_Order.Rows[i].Cells[0].Value = expidate;
                        Grid_Auto_Assigned_Order.Rows[i].Cells[1].Value = dtAuto_Assigned_Order.Rows[i]["Client_Order_Number"].ToString();


                        if (User_Role_Id == "1")
                        {
                            Grid_Auto_Assigned_Order.Rows[i].Cells[2].Value = dtAuto_Assigned_Order.Rows[i]["Client_Name"].ToString();
                            Grid_Auto_Assigned_Order.Rows[i].Cells[3].Value = dtAuto_Assigned_Order.Rows[i]["Sub_ProcessName"].ToString();
                        }
                        else
                        {
                            Grid_Auto_Assigned_Order.Rows[i].Cells[2].Value = dtAuto_Assigned_Order.Rows[i]["Client_Number"].ToString();
                            Grid_Auto_Assigned_Order.Rows[i].Cells[3].Value = dtAuto_Assigned_Order.Rows[i]["Subprocess_Number"].ToString();


                        }
                        Grid_Auto_Assigned_Order.Rows[i].Cells[4].Value = dtAuto_Assigned_Order.Rows[i]["Order_Type"].ToString();
                        Grid_Auto_Assigned_Order.Rows[i].Cells[5].Value = dtAuto_Assigned_Order.Rows[i]["Date"].ToString();
                        Grid_Auto_Assigned_Order.Rows[i].Cells[6].Value = dtAuto_Assigned_Order.Rows[i]["State"].ToString();
                        Grid_Auto_Assigned_Order.Rows[i].Cells[7].Value = dtAuto_Assigned_Order.Rows[i]["County"].ToString();
                        Grid_Auto_Assigned_Order.Rows[i].Cells[8].Value = dtAuto_Assigned_Order.Rows[i]["User_Name"].ToString();
                        Grid_Auto_Assigned_Order.Rows[i].Cells[9].Value = dtAuto_Assigned_Order.Rows[i]["Order_ID"].ToString();

                    }
                }
                else
                {
                    Grid_Auto_Assigned_Order.DataSource = null;
                    Grid_Auto_Assigned_Order.Rows.Clear();
                    //grd_Assigned_Orders.EmptyDataText = "No Orders Are Avilable";
                    //grd_Assigned_Orders.DataBind();
                }





            }




        }

        private void btn_Auto_Assigned_Refresh_Click(object sender, EventArgs e)
        {
            Bind_Auto_Assigned_Orders();
        }

        private void btn_Auto_Not_Assigned_Refresh_Click(object sender, EventArgs e)
        {
            Bind_Auto_Not_Assigned_Orders();
        }

        private void txt_Search_Auto_Not_Assgined_Click(object sender, EventArgs e)
        {
            txt_Search_Auto_Not_Assgined.ForeColor = Color.Black;
            txt_Search_Auto_Not_Assgined.Text = "";
        }

        private void txt_Search_Auto_Assgined_Click(object sender, EventArgs e)
        {
            txt_Search_Auto_Assgined.ForeColor = Color.Black;
            txt_Search_Auto_Assgined.Text = "";
        }

        private void btn_Auto_Not_Assigned_Submit_Click(object sender, EventArgs e)
        {

            if (Grid_Auto_Not_Assigned_Orders.Rows.Count > 0)
            {

                for (int i = 0; i < Grid_Auto_Not_Assigned_Orders.Rows.Count; i++)
                {
                    bool isChecked = (bool)Grid_Auto_Not_Assigned_Orders[0, i].FormattedValue;
                    int Order_Id = int.Parse(Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[8].Value.ToString());

                    // chk = (CheckBox)row.Cells[0].FormattedValue("chkBxSelect");
                    //  CheckBox chkId = (row.Cells[0].FormattedValue as CheckBox);
                    if (isChecked == true)
                    {

                        Hashtable htupdateOrder = new Hashtable();
                        System.Data.DataTable dtupdateorder = new System.Data.DataTable();
                        htupdateOrder.Add("@Trans", "UPDATE_EXPIDATE");
                        htupdateOrder.Add("@Expidate", "True");
                        htupdateOrder.Add("@Order_ID", Order_Id);
                        dtupdateorder = dataaccess.ExecuteSP("Sp_Order", htupdateOrder);

                    }
                    else
                    {
                        Hashtable htupdateOrder = new Hashtable();
                        System.Data.DataTable dtupdateorder = new System.Data.DataTable();
                        htupdateOrder.Add("@Trans", "UPDATE_EXPIDATE");
                        htupdateOrder.Add("@Expidate", "False");
                        htupdateOrder.Add("@Order_ID", Order_Id);
                        dtupdateorder = dataaccess.ExecuteSP("Sp_Order", htupdateOrder);


                    }









                }
                Bind_Auto_Not_Assigned_Orders();
                MessageBox.Show("Record Updated Sucessfully");



            }


        }

        private void btn_Auto_Assigned_Submit_Click(object sender, EventArgs e)
        {
            if (Grid_Auto_Assigned_Order.Rows.Count > 0)
            {

                for (int i = 0; i < Grid_Auto_Assigned_Order.Rows.Count; i++)
                {
                    bool isChecked = (bool)Grid_Auto_Assigned_Order[0, i].FormattedValue;
                    int Order_Id = int.Parse(Grid_Auto_Assigned_Order.Rows[i].Cells[9].Value.ToString());

                    // chk = (CheckBox)row.Cells[0].FormattedValue("chkBxSelect");
                    //  CheckBox chkId = (row.Cells[0].FormattedValue as CheckBox);
                    if (isChecked == true)
                    {

                        Hashtable htupdateOrder = new Hashtable();
                        System.Data.DataTable dtupdateorder = new System.Data.DataTable();
                        htupdateOrder.Add("@Trans", "UPDATE_EXPIDATE");
                        htupdateOrder.Add("@Expidate", "True");
                        htupdateOrder.Add("@Order_ID", Order_Id);
                        dtupdateorder = dataaccess.ExecuteSP("Sp_Order", htupdateOrder);

                    }
                    else
                    {
                        Hashtable htupdateOrder = new Hashtable();
                        System.Data.DataTable dtupdateorder = new System.Data.DataTable();
                        htupdateOrder.Add("@Trans", "UPDATE_EXPIDATE");
                        htupdateOrder.Add("@Expidate", "False");
                        htupdateOrder.Add("@Order_ID", Order_Id);
                        dtupdateorder = dataaccess.ExecuteSP("Sp_Order", htupdateOrder);


                    }



                }

                Bind_Auto_Assigned_Orders();
                MessageBox.Show("Record Updated Sucessfully");

            }
        }

        private void txt_Search_Auto_Not_Assgined_TextChanged(object sender, EventArgs e)
        {
            DataView dtsearch = new DataView(dtAuto_Not_Assigned_Order);
            dtsearch.RowFilter = "Client_Order_Number like '%" + txt_Search_Auto_Not_Assgined.Text.ToString() + "%'";
            System.Data.DataTable dt = new System.Data.DataTable();
            dt = dtsearch.ToTable();
            if (dt.Rows.Count > 0)
            {

                Grid_Auto_Not_Assigned_Orders.Columns[0].Width = 60;
                Grid_Auto_Not_Assigned_Orders.Columns[1].Width = 125;
                Grid_Auto_Not_Assigned_Orders.Columns[2].Width = 180;
                Grid_Auto_Not_Assigned_Orders.Columns[3].Width = 180;
                Grid_Auto_Not_Assigned_Orders.Columns[4].Width = 180;
                Grid_Auto_Not_Assigned_Orders.Columns[5].Width = 100;
                Grid_Auto_Not_Assigned_Orders.Columns[6].Width = 110;
                Grid_Auto_Not_Assigned_Orders.Columns[7].Width = 100;

                if (dt.Rows.Count > 0)
                {
                    Grid_Auto_Not_Assigned_Orders.Rows.Clear();

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        Grid_Auto_Not_Assigned_Orders.Rows.Add();
                        bool expidate = Convert.ToBoolean(dt.Rows[i]["Expidate"].ToString());
                        Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[0].Value = expidate;
                        Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[1].Value = dt.Rows[i]["Client_Order_Number"].ToString();


                        if (User_Role_Id == "1")
                        {
                            Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[2].Value = dt.Rows[i]["Client_Name"].ToString();
                            Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[3].Value = dt.Rows[i]["Sub_ProcessName"].ToString();
                        }
                        else
                        {
                            Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[2].Value = dt.Rows[i]["Client_Number"].ToString();
                            Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[3].Value = dt.Rows[i]["Subprocess_Number"].ToString();

                        }

                        Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[4].Value = dt.Rows[i]["Order_Type"].ToString();
                        Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[5].Value = dt.Rows[i]["Date"].ToString();
                        Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[6].Value = dt.Rows[i]["State"].ToString();
                        Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[7].Value = dt.Rows[i]["County"].ToString();
                        Grid_Auto_Not_Assigned_Orders.Rows[i].Cells[8].Value = dt.Rows[i]["Order_ID"].ToString();

                    }
                }
                else
                {
                    Grid_Auto_Not_Assigned_Orders.DataSource = null;
                    Grid_Auto_Not_Assigned_Orders.Rows.Clear();
                    //grd_Assigned_Orders.EmptyDataText = "No Orders Are Avilable";
                    //grd_Assigned_Orders.DataBind();
                }

            }
        }

        private void txt_Search_Auto_Assgined_TextChanged(object sender, EventArgs e)
        {
            DataView dtsearch = new DataView(dtAuto_Assigned_Order);
            dtsearch.RowFilter = "Client_Order_Number like '%" + txt_Search_Auto_Assgined.Text.ToString() + "%'";
            System.Data.DataTable dt = new System.Data.DataTable();
            dt = dtsearch.ToTable();

            if (dt.Rows.Count > 0)
            {

                Grid_Auto_Assigned_Order.Columns[0].Width = 50;
                Grid_Auto_Assigned_Order.Columns[1].Width = 125;
                Grid_Auto_Assigned_Order.Columns[2].Width = 180;
                Grid_Auto_Assigned_Order.Columns[3].Width = 180;
                Grid_Auto_Assigned_Order.Columns[4].Width = 180;
                Grid_Auto_Assigned_Order.Columns[5].Width = 100;
                Grid_Auto_Assigned_Order.Columns[6].Width = 110;
                Grid_Auto_Assigned_Order.Columns[7].Width = 150;
                Grid_Auto_Assigned_Order.Columns[8].Width = 150;

                if (dt.Rows.Count > 0)
                {
                    Grid_Auto_Assigned_Order.Rows.Clear();

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        Grid_Auto_Assigned_Order.Rows.Add();
                        bool expidate = Convert.ToBoolean(dt.Rows[i]["Expidate"].ToString());
                        Grid_Auto_Assigned_Order.Rows[i].Cells[0].Value = expidate;
                        Grid_Auto_Assigned_Order.Rows[i].Cells[1].Value = dt.Rows[i]["Client_Order_Number"].ToString();

                        if (User_Role_Id == "1")
                        {
                            Grid_Auto_Assigned_Order.Rows[i].Cells[2].Value = dt.Rows[i]["Client_Name"].ToString();
                            Grid_Auto_Assigned_Order.Rows[i].Cells[3].Value = dt.Rows[i]["Sub_ProcessName"].ToString();
                        }
                        else
                        {
                            Grid_Auto_Assigned_Order.Rows[i].Cells[2].Value = dt.Rows[i]["Client_Number"].ToString();
                            Grid_Auto_Assigned_Order.Rows[i].Cells[3].Value = dt.Rows[i]["Subprocess_Number"].ToString();


                        }
                        Grid_Auto_Assigned_Order.Rows[i].Cells[4].Value = dt.Rows[i]["Order_Type"].ToString();
                        Grid_Auto_Assigned_Order.Rows[i].Cells[5].Value = dt.Rows[i]["Date"].ToString();
                        Grid_Auto_Assigned_Order.Rows[i].Cells[6].Value = dt.Rows[i]["State"].ToString();
                        Grid_Auto_Assigned_Order.Rows[i].Cells[7].Value = dt.Rows[i]["County"].ToString();
                        Grid_Auto_Assigned_Order.Rows[i].Cells[8].Value = dt.Rows[i]["User_Name"].ToString();
                        Grid_Auto_Assigned_Order.Rows[i].Cells[9].Value = dt.Rows[i]["Order_ID"].ToString();

                    }
                }
                else
                {
                    Grid_Auto_Assigned_Order.DataSource = null;
                    Grid_Auto_Assigned_Order.Rows.Clear();
                    //grd_Assigned_Orders.EmptyDataText = "No Orders Are Avilable";
                    //grd_Assigned_Orders.DataBind();
                }





            }
        }

        private void Grid_Auto_Not_Assigned_Orders_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex != -1)
            {
                if (e.ColumnIndex == 1)
                {

                    Ordermanagement_01.Order_Entry Order_Entry = new Ordermanagement_01.Order_Entry(int.Parse(Grid_Auto_Not_Assigned_Orders.Rows[e.RowIndex].Cells[8].Value.ToString()), int.Parse(userid.ToString()), User_Role_Id.ToString(), Production_Date);
                    Order_Entry.Show();
                }
            }
        }

        private void Grid_Auto_Assigned_Order_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex != -1)
            {
                if (e.ColumnIndex == 1)
                {

                    Ordermanagement_01.Order_Entry Order_Entry = new Ordermanagement_01.Order_Entry(int.Parse(Grid_Auto_Assigned_Order.Rows[e.RowIndex].Cells[9].Value.ToString()), int.Parse(userid.ToString()), User_Role_Id.ToString(), Production_Date);
                    Order_Entry.Show();
                }
            }
        }

        private void timer2_Tick(object sender, EventArgs e)
        {
            Update_User_Last_Login_Date();
        }

        private void grid_User_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            foreach (DataGridViewRow myrow in grid_User.Rows)
            {

                int Diff = int.Parse(grid_User.Rows[e.RowIndex].Cells[3].Value.ToString());

                if (Diff == 0)
                {

                    this.grid_User.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.LightPink;

                }
                else if (Diff == 1)
                {
                    this.grid_User.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.LightGreen;
                }

            }
        }

        private void lbl_Exception_Orders_Allocation_Count_Click(object sender, EventArgs e)
        {

            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);
            try
            {
                Ordermanagement_01.Order_Allocate Orderallocate = new Order_Allocate("EXCEPTION_ORDERS_ALLOCATE", 24, userid, User_Role_Id, Production_Date);
                Orderallocate.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }

            //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Order_Allocate("EXCEPTION_ORDERS_ALLOCATE", 24, userid, User_Role_Id)); });
            //t.SetApartmentState(ApartmentState.STA);
            //t.Start();
        }

        private void lbl_Exception_Orders_Work_Count_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);

            try
            {

                Ordermanagement_01.Employee_View Emp_view = new Ordermanagement_01.Employee_View(24, "Exception", userid, User_Role_Id, "Live", 1);
                Emp_view.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
        }

        private void btn_Vendort_Report_Click(object sender, EventArgs e)
        {
            Vendors.Vendor_Report vr = new Vendors.Vendor_Report(userid, int.Parse(User_Role_Id));
            vr.Show();
        }

        private void genralUpdatesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(19) != false)
            {
                Ordermanagement_01.Masters.General_Updates generalUpdate = new Ordermanagement_01.Masters.General_Updates(userid);
                generalUpdate.Show();
            }
        }

        private void Grid_Message_Bind()
        {
            GridView_General_Updates.Rows.Clear();
            Hashtable ht_Select = new Hashtable();
            System.Data.DataTable dt_Select = new System.Data.DataTable();

            ht_Select.Add("@Trans", "SELECT_GRID");
            dt_Select = dataaccess.ExecuteSP("Sp_General_Updates", ht_Select);
            if (dt_Select.Rows.Count > 0)
            {
                for (int i = 0; i < dt_Select.Rows.Count; i++)
                {
                    GridView_General_Updates.Rows.Add();
                    // GridView_General_Updates.Rows[i].Cells[0].Value = i + 1;
                    GridView_General_Updates.Rows[i].Cells[0].Value = dt_Select.Rows[i]["Gen_Update_ID"].ToString();
                    GridView_General_Updates.Rows[i].Cells[1].Value = dt_Select.Rows[i]["Message"].ToString();
                    GridView_General_Updates.Rows[i].Cells[2].Value = dt_Select.Rows[i]["Modified_Date"].ToString();
                    //  GridView_General_Updates.Rows[i].Cells[3].Value = "View";
                    // GridView_General_Updates.Rows[i].Cells[4].Value = "Delete";
                }
            }
            else
            {
                GridView_General_Updates.DataSource = null;
            }
        }

        private void popmesg()
        {
            Hashtable ht_mesg = new Hashtable();
            System.Data.DataTable dt_msg = new System.Data.DataTable();

            ht_mesg.Add("@Trans", "GET_EXIST_DATE");
            // ht_mesg.Add("@", "GET_EXIST_DATE");
            dt_msg = dataaccess.ExecuteSP("Sp_General_Updates", ht_mesg);
            if (dt_msg.Rows.Count > 0)
            {
                Hashtable ht_getdate = new Hashtable();
                System.Data.DataTable dt_getdate = new System.Data.DataTable();

                ht_getdate.Add("@Trans", "GET_DATE");

                dt_getdate = dataaccess.ExecuteSP("Sp_General_Updates", ht_getdate);

                string date = dt_getdate.Rows[0]["Date"].ToString();

                string modifieddate = dt_msg.Rows[0]["Date"].ToString();

                if (modifieddate == date)
                {

                    Hashtable ht_message = new Hashtable();
                    System.Data.DataTable dt_message = new System.Data.DataTable();

                    ht_message.Add("@Trans", "GET_MODIFIED_DATE_MESG");
                    ht_message.Add("@Modified_Date", modifieddate);
                    dt_msg = dataaccess.ExecuteSP("Sp_General_Updates", ht_message);


                    Ordermanagement_01.Employee.Genral_Message_View alertmesgview = new Ordermanagement_01.Employee.Genral_Message_View(dt_msg, "");
                    alertmesgview.Show();
                }
            }
        }

        private void GridView_General_Updates_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex != -1)
            {
                if (e.ColumnIndex == 1)
                {
                    string msg = GridView_General_Updates.Rows[e.RowIndex].Cells[1].Value.ToString();
                    Ordermanagement_01.Employee.Genral_Message_View alertmesgview = new Ordermanagement_01.Employee.Genral_Message_View(null, msg);
                    alertmesgview.Show();
                }

            }
        }

        private void timer5_Tick(object sender, EventArgs e)
        {
            //popmesg();
        }

        private void label22_Click(object sender, EventArgs e)
        {

        }

        private void buttonIdleReports_Click(object sender, EventArgs e)
        {
            Reports.BreakIdleReports IReports = new Reports.BreakIdleReports(userid, Convert.ToInt32(User_Role_Id));
            IReports.Show();
        }

        private void buttonIdleMode_Click(object sender, EventArgs e)
        {
            Dashboard.IdleTrack iTrack = new Dashboard.IdleTrack(userid, Production_Date, true);
            Invoke(new MethodInvoker(delegate { iTrack.Show(); }));
        }

        private void breakIdleTypesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Masters.BreakIdleModeType breakIdleType = new Masters.BreakIdleModeType(userid);
            breakIdleType.Show();
        }

        private void autoAllocationToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void grid_User_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void Grid_Auto_Not_Assigned_Orders_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void cr_Rework_ReportsViewer_Load(object sender, EventArgs e)
        {

        }

        private void GridView_General_Updates_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void tabControl2_KeyPress(object sender, KeyPressEventArgs e)
        {
            txt_Fromdate.Value = DateTime.Now;
            txt_Todate.Value = DateTime.Now;
        }

        private void emailSettingsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (User_Role_Id == "1")
            {
                Ordermanagement_01.New_Dashboard.Settings.EmailSetting emailsettings = new New_Dashboard.Settings.EmailSetting();
                emailsettings.Show();
            }
        }

        private void processSettingsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);
            try
            {
                Ordermanagement_01.Opp.Opp_Master.Project_Type_Order_Task pt = new Opp.Opp_Master.Project_Type_Order_Task();
                pt.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
        }

        private void btn_Image_req_Allocation_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);
            try
            {
                //   Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Order_Allocate("SEARCH_ORDER_ALLOCATE", 2, userid, User_Role_Id)); });
                //   t.SetApartmentState(ApartmentState.STA);
                //   t.Start();
                Ordermanagement_01.Order_Allocate Orderallocate = new Order_Allocate("ORDER_ALLOCATE", 27, userid, User_Role_Id, Production_Date);
                Orderallocate.Show();
            }
            catch (Exception ex)

            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
        }

        private void btn_DataDepth_Allocation_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);
            try
            {
                //   Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Order_Allocate("SEARCH_ORDER_ALLOCATE", 2, userid, User_Role_Id)); });
                //   t.SetApartmentState(ApartmentState.STA);
                //   t.Start();
                Ordermanagement_01.Order_Allocate Orderallocate = new Order_Allocate("ORDER_ALLOCATE", 28, userid, User_Role_Id, Production_Date);
                Orderallocate.Show();
            }
            catch (Exception ex)

            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
        }

        private void btn_Tax_Req_Allocation_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);
            try
            {
                //   Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Order_Allocate("SEARCH_ORDER_ALLOCATE", 2, userid, User_Role_Id)); });
                //   t.SetApartmentState(ApartmentState.STA);
                //   t.Start();
                Ordermanagement_01.Order_Allocate Orderallocate = new Order_Allocate("ORDER_ALLOCATE", 29, userid, User_Role_Id, Production_Date);
                Orderallocate.Show();
            }
            catch (Exception ex)

            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
        }

        private void btn_Image_Request_Processing_Click(object sender, EventArgs e)
        {

            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);

            try
            {

                Ordermanagement_01.Employee_View Emp_view = new Ordermanagement_01.Employee_View(27, "Image_Request", userid, User_Role_Id, "Live", 1);
                Emp_view.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }

        }

        private void btn_DataDepth_Processing_Click(object sender, EventArgs e)
        {

            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);

            try
            {

                Ordermanagement_01.Employee_View Emp_view = new Ordermanagement_01.Employee_View(28, "Data_Depth", userid, User_Role_Id, "Live", 1);
                Emp_view.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
        }

        private void btn_Tax_Req_Processing_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);

            try
            {

                Ordermanagement_01.Employee_View Emp_view = new Ordermanagement_01.Employee_View(29, "Tax_Request", userid, User_Role_Id, "Live", 1);
                Emp_view.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
        }

        private void notificationToolStripbtn_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.New_Dashboard.Employee.General_Notification note = new General_Notification(userid,Application_Login_Type);
            note.Show();
        }

        private void AdminDashboard_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
        {
            if (((Keyboard.IsKeyDown(Key.RightAlt)) || (Keyboard.IsKeyDown(Key.LeftAlt))) && (Keyboard.IsKeyDown(Key.L)))
            {
                try
                {
                    FormCollection collection = System.Windows.Forms.Application.OpenForms;
                    foreach (Form form in collection)
                    {
                        form.Invoke(new MethodInvoker(delegate { form.Hide(); }));
                    }
                    Ordermanagement_01.New_Dashboard.LockScreen lk = new Ordermanagement_01.New_Dashboard.LockScreen(lbl_username.Text, Password, "profile.png");

                    lk.Show();


                }
                catch (Exception ex)
                {

                }
            }
        }

        private void lb_ReSearch_Order_ALlocate_count_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);
            try
            {
                Ordermanagement_01.ReSearch_Order_Allocate res = new Ordermanagement_01.ReSearch_Order_Allocate(userid, User_Role_Id);
                res.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
        }

        private void btn_Break_Click(object sender, EventArgs e)
        {
            this.Enabled = false;
            Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Employee.Break_Details(int.Parse(userid.ToString()), F_Date, T_Date, Production_Date)); });
            t.SetApartmentState(ApartmentState.STA);
            t.Start();





            //brek.Show();
        }

        private void lbl_Tax_Order_Email_Sended_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Tax.Tax_Summary ts = new Tax.Tax_Summary(Convert.ToInt32(userid), User_Role_Id);
            ts.Show();
        }

        private void orderTaskToolStripMenuItem_Click(object sender, EventArgs e)
        {
           
                Ordermanagement_01.Opp.Opp_Master.Project_Type_OrderStatus_Settings os = new Opp.Opp_Master.Project_Type_OrderStatus_Settings(userid, Convert.ToInt32(User_Role_Id));
            os.Show();
           
        }

        //private void orderStatusToolStripMenuItem1_Click(object sender, EventArgs e)
        //{

        //    Ordermanagement_01.Opp.Opp_Master.Error_Setting _errorsetting = new Opp.Opp_Master.Error_Setting(userid, int.Parse(User_Role_Id.ToString()));
        //    _errorsetting.Show();
        //}

        private void projectTypeSettingsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            
            Ordermanagement_01.New_Dashboard.Settings.Process_Settings processsettings = new New_Dashboard.Settings.Process_Settings();
            processsettings.Show();
        }

        private void errorTabSettingsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Opp.Opp_Master.Order_SourceType_View sourcetype = new Opp.Opp_Master.Order_SourceType_View(Convert.ToInt32(User_Role_Id));
            sourcetype.Show();

        }

        private void effiecincyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Opp.Opp_Efficiency.Efficiency_View eff = new Opp.Opp_Efficiency.Efficiency_View(userid, Convert.ToInt32(User_Role_Id));
            eff.Show();
        }

        private void orderEntryToolStripMenuItem_Click(object sender, EventArgs e)
        {
            
            Ordermanagement_01.Opp.Opp_Master.Product_Type_Settings pr = new Opp.Opp_Master.Product_Type_Settings();
             pr.Show();
        }

        private void Error_Settings_Click(object sender, EventArgs e)
        {
            Opp.Opp_Master.Error_Settings errorsettings = new Opp.Opp_Master.Error_Settings();
            errorsettings.Show();
        }

        private void Efficiency_Salary_Bracket_Click(object sender, EventArgs e)
        {
            Opp.Opp_Efficiency.Category_Salary_Bracket_ProjectWise salary = new Opp.Opp_Efficiency.Category_Salary_Bracket_ProjectWise();
            salary.Show();
        }

        private void Efficiecy_Source_Type_and_Project_Type_Click(object sender, EventArgs e)
        {
            Opp.Opp_Efficiency.Efficiency_Order_Source_Type effview = new Opp.Opp_Efficiency.Efficiency_Order_Source_Type(Convert.ToInt32(User_Role_Id));
            effview.Show();
        }

        private void Order_Imports_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.New_Dashboard.Orders.ImportOrders importorder = new New_Dashboard.Orders.ImportOrders();
            importorder.Show();
        }

        private void OrderEntrytoolStripMenuItem_Click_1(object sender, EventArgs e)
        {
            Ordermanagement_01.New_Dashboard.Orders.OrderEntry orderentry = new New_Dashboard.Orders.OrderEntry();
            orderentry.Show();
        }

        private void Sub_Product_Type_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Opp.Opp_Master.Sub_Product_Type_View sub = new Opp.Opp_Master.Sub_Product_Type_View(userid);
            sub.Show();
        }

        private void Client_Tat_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Opp.Opp_Efficiency.Client_TAT_View entry = new Opp.Opp_Efficiency.Client_TAT_View(userid, User_Role_Id);
            entry.Show();
        }

        private void Checklist_Question_Entry_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Opp.Opp_CheckList.CheckLists Q_Entry = new Opp.Opp_CheckList.CheckLists(1,1,1,200226,4,24,3,1);
            Q_Entry.Show();
        }

        private void Checklist_Master_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Opp.Opp_CheckList.CheckList_Master_View view = new Opp.Opp_CheckList.CheckList_Master_View();
            view.Show();
        }

        private void Checklist_Settings_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Opp.Opp_CheckList.Checklist_Settings_View settingsview = new Opp.Opp_CheckList.Checklist_Settings_View();
            settingsview.Show();
        }

        private void Alert_Settings_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Opp.Opp_Efficiency.Alert_Setings alert = new Opp.Opp_Efficiency.Alert_Setings(userid);
            alert.Show();
        }

        private void Project_Type_Notificationsettings_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Opp.Opp_Master.ProjectType_Notification_Settings_View notify = new Opp.Opp_Master.ProjectType_Notification_Settings_View(userid);
            notify.Show();
        }

        private void errorEntryToolStripMenuItem_Click(object sender, EventArgs e)
        {           
            Ordermanagement_01.Opp.Opp_Accuracy.Error_Entry.master_Employee_Error_Entry_View eee = new Opp.Opp_Accuracy.Error_Entry.master_Employee_Error_Entry_View(1, 1, 197, 1, 1, 25, "", "1", 10, 99870, "", "4");
            eee.Show();
        }

        private void orderPriorityToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Masters.Order_Priority op = new Masters.Order_Priority();
            op.Show();
        }

        private void efficiencySourceTypeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Opp.Opp_Efficiency.Efficiency_Source_Type est = new Opp.Opp_Efficiency.Efficiency_Source_Type(1);
            est.Show();
        }

        private void btn_Internal_Tax_Allocation_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);
            try
            {
                Ordermanagement_01.Order_Allocate Orderallocate = new Order_Allocate("TAX_ORDERS_ALLOCATE", 22, userid, User_Role_Id, Production_Date);
                Orderallocate.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
        }

        private void btn_tax_Order_Processing_Click(object sender, EventArgs e)
        {
            SplashScreenManager.ShowForm(this, typeof(Ordermanagement_01.Masters.WaitForm1), true, true, false);

            try
            {

                Ordermanagement_01.Employee_View Emp_view = new Ordermanagement_01.Employee_View(22, "TAX", userid, User_Role_Id, "Live", 1);
                Emp_view.Show();
            }
            catch (Exception ex)
            {

                //Close Wait Form
                SplashScreenManager.CloseForm(false);

                MessageBox.Show("Error Occured Please Check With Administrator");
            }
            finally
            {
                //Close Wait Form
                SplashScreenManager.CloseForm(false);
            }
        }

        private void timer6_Tick(object sender, EventArgs e)
        {


        }

        private void employeeSalBracktToolStripMenuItem_Click(object sender, EventArgs e)
        {

            if (Validate_User_Access(28) != false)
            {
                Ordermanagement_01.Matrix.Category cc = new Matrix.Category(lbl_username.Text, userid);
                cc.Show();
            }
        }

        private void employeeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Employee.Emp_ClientWise_CatSalCracket_TAT empcs = new Ordermanagement_01.Employee.Emp_ClientWise_CatSalCracket_TAT(lbl_username.Text, userid);
            empcs.Show();

        }

        private void employeeCategorySourcetypeMatrixToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Employee.Emp_CatSalBracket_TAT emps = new Ordermanagement_01.Employee.Emp_CatSalBracket_TAT(lbl_username.Text, userid);
            emps.Show();
        }

        private void orderSourceAndClientWiseToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(27) != false)
            {
                Ordermanagement_01.Employee.Emp_Eff_Matrix_Order_Source_Detail emporders = new Ordermanagement_01.Employee.Emp_Eff_Matrix_Order_Source_Detail(lbl_username.Text, userid, User_Role_Id);
                emporders.Show();
            }
        }

        private void toolStripButton4_Click(object sender, EventArgs e)
        {

        }

        private void pxtFileMasterToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(20) != false)
            {
                Ordermanagement_01.Employee.PXT_File_Form_Master pxtfile = new Ordermanagement_01.Employee.PXT_File_Form_Master(0, 0, "0", "0", "0");
                pxtfile.Show();
            }
        }

        private void employeeNewEffeciencyMatrixToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(29) != false)
            {
                Ordermanagement_01.Employee.Cleint_Wise_Effeciency emptask = new Ordermanagement_01.Employee.Cleint_Wise_Effeciency(lbl_username.Text, userid, User_Role_Id);
                emptask.Show();

                //Thread t = new Thread((ThreadStart)delegate { System.Windows.Forms.Application.Run(new Ordermanagement_01.Employee.Cleint_Wise_Effeciency(lbl_username.Text, userid)); });
                //t.SetApartmentState(ApartmentState.STA);
                //t.Start();
            }
        }

        private void cr_MyViewer_Load(object sender, EventArgs e)
        {

        }

        private void tabPage9_Click(object sender, EventArgs e)
        {

        }

        private void holidayMasterToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(21) != false)
            {
                Holiday holi = new Holiday(userid, lbl_username.Text);
                holi.Show();
            }
        }

        private void btn_Eff_Export_Click(object sender, EventArgs e)
        {
            Export_Effeciency_ReportData();
        }

        private void Grid_Score_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex != -1)
            {
                score_board = "SCORE BOARD";
                TAT = "SCORE BOARD";
                if (e.ColumnIndex != 1 && e.ColumnIndex != 2 && e.ColumnIndex != 3 && e.ColumnIndex != 4 && e.ColumnIndex != 5 && e.ColumnIndex != 6 && e.ColumnIndex != 7)
                {
                    string Date_Header = Grid_Score.Columns[e.ColumnIndex].HeaderText;
                    string Comb_Date = Date_Header + "/" + ddl_Year.SelectedValue.ToString();
                    DateTime date = DateTime.ParseExact(Comb_Date, "dd/MM/yyyy", null);

                    //DateTime date = DateTime.ParseExact(Comb_Date, "MM/dd/yyyy", null);
                    // this is old one
                    // Ordermanagement_01.TargetDashboard TargeDashboard = new Ordermanagement_01.TargetDashboard(Order_Target, Time_Zone, OrderViewType, 2, int.Parse(Grid_Score.Rows[e.RowIndex].Cells[0].Value.ToString()), TAT, score_board, header_Pending, Comb_Date, userid, User_Role_Id, "Current");
                    // TargeDashboard.Show();

                    Hashtable htinsert = new Hashtable();
                    System.Data.DataTable dtinsert = new System.Data.DataTable();
                    // New Production Details
                    string Dd = date.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture);
                    htinsert.Add("@Trans", "INSERT_INTO_TEMP_USER");
                    htinsert.Add("@Production_Date", Dd.ToString());
                    htinsert.Add("@User_Id", int.Parse(Grid_Score.Rows[e.RowIndex].Cells[0].Value.ToString()));
                    dtinsert = dataaccess.ExecuteSP("Sp_Employee_Production_Score_Board", htinsert);

                    Ordermanagement_01.Dashboard.Emp_Production_Score_Board TargeDashboard = new Ordermanagement_01.Dashboard.Emp_Production_Score_Board(int.Parse(Grid_Score.Rows[e.RowIndex].Cells[0].Value.ToString()), User_Role_Id, Dd.ToString(), "");
                    TargeDashboard.Show();
                }

            }
        }

        private void lbl_COmpleted_Order_Count_Click(object sender, EventArgs e)
        {

        }

        private void checkListMasterToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(150) != false)
            {
                Ordermanagement_01.Masters.Checklist_Master Chk_ListMaster = new Ordermanagement_01.Masters.Checklist_Master(userid, User_Role_Id);
                Chk_ListMaster.Show();
            }

        }

        private void checkListSetupToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(151) != false)
            {
                Ordermanagement_01.Cheklist_Question_Entry Check_List_Question_Settings = new Cheklist_Question_Entry(userid, User_Role_Id);
                Check_List_Question_Settings.Show();

            }
        }

        private void client_proposaltoolStripMenuItem1_Click(object sender, EventArgs e)
        {

        }

        private void group_box_abstractor_Enter(object sender, EventArgs e)
        {

        }

        private void btn_Error_Processing_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Employee.Error_Dashboard Error_Dashboard = new Ordermanagement_01.Employee.Error_Dashboard(userid, int.Parse(User_Role_Id.ToString()), Production_Date);
            Error_Dashboard.Show();

        }

        private void btn_Errors_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Employee.Error_Dashboard Error_Dashboard = new Ordermanagement_01.Employee.Error_Dashboard(userid, int.Parse(User_Role_Id.ToString()), Production_Date);
            Error_Dashboard.Show();
        }

        private void userAndRoleWiseAccessToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(5) != false)
            {
                Ordermanagement_01.User_Wise_Access userwiseAccess = new Ordermanagement_01.User_Wise_Access(userid, User_Role_Id, lbl_username.Text);
                userwiseAccess.Show();
            }
        }

        private void mainMenuToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Validate_User_Access(153) != false)
            {
                Ordermanagement_01.Main_Menu mainmenu = new Ordermanagement_01.Main_Menu(userid);
                mainmenu.Show();
            }

        }

        private void User_Access()
        {
            Hashtable htcheck = new Hashtable();
            System.Data.DataTable dtcheck = new System.Data.DataTable();

            int Check = 0;

            htcheck.Add("@Trans", "CHECK_BY_USER_WISE");
            htcheck.Add("@User_ID", userid);
            dtcheck = dataaccess.ExecuteSP("SP_UserAccess_Control_Trans", htcheck);
            if (dtcheck.Rows.Count > 0)
            {

                Check = int.Parse(dtcheck.Rows[0]["count"].ToString());
            }
            else
            {

                Check = 0;

            }

            if (Check > 0)
            {

                Hashtable ht_View = new Hashtable();
                System.Data.DataTable dt_View = new System.Data.DataTable();
                ht_View.Add("@Trans", "SELECT_BY_USER_WISE");
                ht_View.Add("@User_ID", userid);
                dt_View = dataaccess.ExecuteSP("SP_UserAccess_Control_Trans", ht_View);
                if (dt_View.Rows.Count > 0)
                {
                    int User_Access_Id;
                    for (int i = 0; i < dt_View.Rows.Count; i++)
                    {
                        User_Access_Id = int.Parse(dt_View.Rows[i]["Sub_Menu_ID"].ToString());
                        string Checked = dt_View.Rows[i]["Control_ChkDefault"].ToString();
                        // =======================================================================Main Menu========================================================================================================================================
                        if (User_Access_Id == 131 && Checked == "True") { MastersToolStripMenuItem.Enabled = true; } else if (User_Access_Id == 131 && Checked == "False") { MastersToolStripMenuItem.Enabled = false; }
                        // Matrix
                        if (User_Access_Id == 132 && Checked == "True") { MatrixToolStripMenuItem.Enabled = true; } else if (User_Access_Id == 132 && Checked == "False") { MatrixToolStripMenuItem.Enabled = false; }
                        // Checklist
                        if (User_Access_Id == 116 && Checked == "True") { checkToolStripMenuItem.Enabled = true; } else if (User_Access_Id == 116 && Checked == "False") { checkToolStripMenuItem.Enabled = false; }
                        // Reports
                        if (User_Access_Id == 133 && Checked == "True") { ReportsToolStripMenuItem.Enabled = true; } else if (User_Access_Id == 133 && Checked == "False") { ReportsToolStripMenuItem.Enabled = false; }
                        // ADMINSTRATION
                        if (User_Access_Id == 134 && Checked == "True") { AdminstrationToolStripMenuItem.Enabled = true; } else if (User_Access_Id == 134 && Checked == "False") { AdminstrationToolStripMenuItem.Enabled = false; }
                        // Help
                        //  if (User_Access_Id == 141 && Checked == "True") { AboutUsToolStripMenuItem.Enabled = true; } else if (User_Access_Id == 141 && Checked == "False") { AboutUsToolStripMenuItem.Enabled = false; }
                        // Websearch
                        if (User_Access_Id == 135 && Checked == "True") { webSearcherToolStripMenuItem1.Enabled = true; } else if (User_Access_Id == 135 && Checked == "False") { webSearcherToolStripMenuItem1.Enabled = false; }
                        // ABSTRACTOR
                        if (User_Access_Id == 115 && Checked == "True") { abastractorToolStripMenuItem.Enabled = true; } else if (User_Access_Id == 115 && Checked == "False") { abastractorToolStripMenuItem.Enabled = false; }
                        //  TAX INVOICE
                        if (User_Access_Id == 136 && Checked == "True") { Tax_toolStripMenuItem1.Enabled = true; } else if (User_Access_Id == 136 && Checked == "False") { Tax_toolStripMenuItem1.Enabled = false; }
                        //  INVOICE
                        if (User_Access_Id == 112 && Checked == "True") { invoiceToolStripMenuItem.Enabled = true; } else if (User_Access_Id == 112 && Checked == "False") { invoiceToolStripMenuItem.Enabled = false; }
                        //  ORDER COST
                        if (User_Access_Id == 113 && Checked == "True") { orderCostToolStripMenuItem.Enabled = true; } else if (User_Access_Id == 113 && Checked == "False") { orderCostToolStripMenuItem.Enabled = false; }
                        //  VENDORS
                        if (User_Access_Id == 114 && Checked == "True") { vendorsToolStripMenuItem.Enabled = true; } else if (User_Access_Id == 114 && Checked == "False") { vendorsToolStripMenuItem.Enabled = false; }
                        //  SOFTWARE
                        if (User_Access_Id == 138 && Checked == "True") { softwareToolStripMenuItem.Enabled = true; } else if (User_Access_Id == 138 && Checked == "False") { softwareToolStripMenuItem.Enabled = false; }
                        //  CLIENT PROPOSAL
                        if (User_Access_Id == 141 && Checked == "True") { client_proposaltoolStripMenuItem1.Enabled = true; } else if (User_Access_Id == 141 && Checked == "False") { client_proposaltoolStripMenuItem1.Enabled = false; }
                        //  CLIENT PROPOSAL
                        if (User_Access_Id == 139 && Checked == "True") { autoAllocationToolStripMenuItem.Enabled = true; } else if (User_Access_Id == 139 && Checked == "False") { autoAllocationToolStripMenuItem.Enabled = false; }

                        // =======================================================================Sub Menu========================================================================================================================================   

                        //  ORDERS
                        if (User_Access_Id == 117 && Checked == "True") { OrdersToolStripButton.Enabled = true; } else if (User_Access_Id == 117 && Checked == "False") { OrdersToolStripButton.Enabled = false; }
                        //  ORDER ENTRY
                        if (User_Access_Id == 118 && Checked == "True") { ToolStripButton11.Enabled = true; } else if (User_Access_Id == 118 && Checked == "False") { ToolStripButton11.Enabled = false; }
                        // IMPORT ORDERS
                        if (User_Access_Id == 119 && Checked == "True") { toolStripButton1.Enabled = true; } else if (User_Access_Id == 119 && Checked == "False") { toolStripButton1.Enabled = false; }
                        // MY PROFILE
                        if (User_Access_Id == 120 && Checked == "True") { ToolStripButton12.Enabled = true; } else if (User_Access_Id == 120 && Checked == "False") { ToolStripButton12.Enabled = false; }
                        // REPORTS
                        if (User_Access_Id == 121 && Checked == "True") { ToolStripButton14.Enabled = true; } else if (User_Access_Id == 121 && Checked == "False") { ToolStripButton14.Enabled = false; }
                        // REPORTS
                        if (User_Access_Id == 121 && Checked == "True") { ToolStripButton14.Enabled = true; } else if (User_Access_Id == 121 && Checked == "False") { ToolStripButton14.Enabled = false; }
                        //  BACKUP
                        if (User_Access_Id == 122 && Checked == "True") { ToolStripButton15.Enabled = true; } else if (User_Access_Id == 122 && Checked == "False") { ToolStripButton15.Enabled = false; }
                        //  WEB SEARCHER
                        if (User_Access_Id == 123 && Checked == "True") { toolStripButton2.Enabled = true; } else if (User_Access_Id == 123 && Checked == "False") { toolStripButton2.Enabled = false; }
                        //  ABOUT
                        if (User_Access_Id == 124 && Checked == "True") { ToolStripButton16.Enabled = true; } else if (User_Access_Id == 124 && Checked == "False") { ToolStripButton16.Enabled = false; }
                        //  LOGOUT
                        if (User_Access_Id == 125 && Checked == "True") { ToolStripButton17.Enabled = true; } else if (User_Access_Id == 125 && Checked == "False") { ToolStripButton17.Enabled = false; }

                        // =======================================================================DASHBOARD========================================================================================================================================   

                        //  ========================================================================PROCESSING===================================================================================================================
                        //  PROCESSING -- SEARCH
                        if (User_Access_Id == 35 && Checked == "True") { lbl_Search_Work_Orders_Count.Enabled = true; } else if (User_Access_Id == 35 && Checked == "False") { lbl_Search_Work_Orders_Count.Enabled = false; }
                        //  PROCESSING -- SEARCH QC
                        if (User_Access_Id == 36 && Checked == "True") { lbl_Search_orders_Qc_Count.Enabled = true; } else if (User_Access_Id == 36 && Checked == "False") { lbl_Search_orders_Qc_Count.Enabled = false; }
                        //  PROCESSING -- TYPING 
                        if (User_Access_Id == 37 && Checked == "True") { lbl_Typing_work_Count.Enabled = true; } else if (User_Access_Id == 37 && Checked == "False") { lbl_Typing_work_Count.Enabled = false; }
                        //  PROCESSING -- TYPING QC
                        if (User_Access_Id == 38 && Checked == "True") { lbl_Typing_Qc_Orders_Work_Count.Enabled = true; } else if (User_Access_Id == 38 && Checked == "False") { lbl_Typing_Qc_Orders_Work_Count.Enabled = false; }
                        //  PROCESSING -- FINAL QC
                        if (User_Access_Id == 39 && Checked == "True") { lbl_Final_Qc_Orders_Work_Count.Enabled = true; } else if (User_Access_Id == 39 && Checked == "False") { lbl_Final_Qc_Orders_Work_Count.Enabled = false; }
                        //  PROCESSING -- UPLOAD
                        if (User_Access_Id == 40 && Checked == "True") { lbl_Upload_Order_Work_Count.Enabled = true; } else if (User_Access_Id == 40 && Checked == "False") { lbl_Upload_Order_Work_Count.Enabled = false; }
                        //  PROCESSING -- EXCEPTION
                        if (User_Access_Id == 41 && Checked == "True") { lbl_Exception_Orders_Work_Count.Enabled = true; } else if (User_Access_Id == 41 && Checked == "False") { lbl_Exception_Orders_Work_Count.Enabled = false; }
                        //  PROCESSING -- ABSTRACTOR
                        if (User_Access_Id == 42 && Checked == "True") { lbl_Oms_Abstractor_Processing_Que.Enabled = true; } else if (User_Access_Id == 42 && Checked == "False") { lbl_Oms_Abstractor_Processing_Que.Enabled = false; }
                        //  PROCESSING -- TAX
                        if (User_Access_Id == 43 && Checked == "True") { btn_tax_Order_Processing.Enabled = true; } else if (User_Access_Id == 43 && Checked == "False") { btn_tax_Order_Processing.Enabled = false; }
                        //  PROCESSING -- REWORK
                        if (User_Access_Id == 44 && Checked == "True") { lbl_Rework_Count.Enabled = true; } else if (User_Access_Id == 44 && Checked == "False") { lbl_Rework_Count.Enabled = false; }
                        //  PROCESSING -- SUPER QC
                        if (User_Access_Id == 45 && Checked == "True") { lbl_Exam_Qc.Enabled = true; } else if (User_Access_Id == 45 && Checked == "False") { lbl_Exam_Qc.Enabled = false; }
                        //  PROCESSING --  RUSH/DUE
                        if (User_Access_Id == 46 && Checked == "True") { lbl_Rus_Order_Work_COunt.Enabled = true; } else if (User_Access_Id == 46 && Checked == "False") { lbl_Rus_Order_Work_COunt.Enabled = false; }

                        //  ========================================================================ALLOCATION===================================================================================================================
                        //  ALLOCATION -- RESEARCH
                        if (User_Access_Id == 47 && Checked == "True") { lb_ReSearch_Order_ALlocate_count.Enabled = true; } else if (User_Access_Id == 47 && Checked == "False") { lb_ReSearch_Order_ALlocate_count.Enabled = false; }
                        //  ALLOCATION -- SEARCH
                        if (User_Access_Id == 48 && Checked == "True") { lb_Search_Order_ALlocate_count.Enabled = true; } else if (User_Access_Id == 48 && Checked == "False") { lb_Search_Order_ALlocate_count.Enabled = false; }
                        //  ALLOCATION -- SEARCH QC
                        if (User_Access_Id == 49 && Checked == "True") { lbl_search_Qc_Allocate_Count.Enabled = true; } else if (User_Access_Id == 49 && Checked == "False") { lbl_search_Qc_Allocate_Count.Enabled = false; }
                        //  ALLOCATION -- TYPING 
                        if (User_Access_Id == 50 && Checked == "True") { lbl_typing_Allocate_Count.Enabled = true; } else if (User_Access_Id == 50 && Checked == "False") { lbl_typing_Allocate_Count.Enabled = false; }
                        //  ALLOCATION -- TYPING QC
                        if (User_Access_Id == 51 && Checked == "True") { lbl_Typing_Allocate_Qc_Count.Enabled = true; } else if (User_Access_Id == 51 && Checked == "False") { lbl_Typing_Allocate_Qc_Count.Enabled = false; }
                        //  ALLOCATION -- FINAL QC
                        if (User_Access_Id == 52 && Checked == "True") { lbl_Final_Qc_Orders_Allocation_Count.Enabled = true; } else if (User_Access_Id == 52 && Checked == "False") { lbl_Final_Qc_Orders_Allocation_Count.Enabled = false; }
                        //  ALLOCATION --  UPLOAD
                        if (User_Access_Id == 53 && Checked == "True") { lbl_Upload_Orders_Allocate_Count.Enabled = true; } else if (User_Access_Id == 53 && Checked == "False") { lbl_Upload_Orders_Allocate_Count.Enabled = false; }
                        //  ALLOCATION -- EXCEPTION
                        if (User_Access_Id == 54 && Checked == "True") { lbl_Exception_Orders_Allocation_Count.Enabled = true; } else if (User_Access_Id == 54 && Checked == "False") { lbl_Exception_Orders_Allocation_Count.Enabled = false; }
                        //  ALLOCATION -- ABSTRACTOR
                        if (User_Access_Id == 55 && Checked == "True") { lbl_Appstraction.Enabled = true; } else if (User_Access_Id == 55 && Checked == "False") { lbl_Appstraction.Enabled = false; }
                        //  ALLOCATION -- TAX
                        if (User_Access_Id == 56 && Checked == "True") { btn_Internal_Tax_Allocation.Enabled = true; } else if (User_Access_Id == 56 && Checked == "False") { btn_Internal_Tax_Allocation.Enabled = false; }
                        //  ALLOCATION -- REWORK
                        if (User_Access_Id == 57 && Checked == "True") { lbl_Rework_Allocation.Enabled = true; } else if (User_Access_Id == 57 && Checked == "False") { lbl_Rework_Allocation.Enabled = false; }
                        //  ALLOCATION -- SUPER QC
                        if (User_Access_Id == 58 && Checked == "True") { lbl_SearchSuper_Qc_Allocation.Enabled = true; } else if (User_Access_Id == 58 && Checked == "False") { lbl_SearchSuper_Qc_Allocation.Enabled = false; }

                        //  ========================================================================PENDING===================================================================================================================
                        //  PENDING --  CLARIFICATION
                        if (User_Access_Id == 59 && Checked == "True") { Lbl_Clarification_orders.Enabled = true; } else if (User_Access_Id == 59 && Checked == "False") { Lbl_Clarification_orders.Enabled = false; }
                        //  PENDING --  HOLD
                        if (User_Access_Id == 60 && Checked == "True") { lbl_Hold.Enabled = true; } else if (User_Access_Id == 60 && Checked == "False") { lbl_Hold.Enabled = false; }
                        //  PENDING --  CANCELLED
                        if (User_Access_Id == 61 && Checked == "True") { lbl_CANCELLED.Enabled = true; } else if (User_Access_Id == 61 && Checked == "False") { lbl_CANCELLED.Enabled = false; }
                        //  PENDING --  COMPLETED
                        if (User_Access_Id == 62 && Checked == "True") { lbl_COmpleted_Order_Count.Enabled = true; } else if (User_Access_Id == 62 && Checked == "False") { lbl_COmpleted_Order_Count.Enabled = false; }
                        //  PENDING --  REASSIGNED
                        if (User_Access_Id == 63 && Checked == "True") { lbl_Reassigned.Enabled = true; } else if (User_Access_Id == 63 && Checked == "False") { lbl_Reassigned.Enabled = false; }
                        //  PENDING --  RUSH
                        if (User_Access_Id == 64 && Checked == "True") { lbl_Rus_Order_Count.Enabled = true; } else if (User_Access_Id == 64 && Checked == "False") { lbl_Rus_Order_Count.Enabled = false; }
                        //  PENDING --  OVER DUE
                        if (User_Access_Id == 65 && Checked == "True") { lbl_Over_Due_Count.Enabled = true; } else if (User_Access_Id == 65 && Checked == "False") { lbl_Over_Due_Count.Enabled = false; }
                        //  PENDING --  REWORK
                        if (User_Access_Id == 66 && Checked == "True") { lbl_Rework_Pending_Allocation.Enabled = true; } else if (User_Access_Id == 66 && Checked == "False") { lbl_Rework_Pending_Allocation.Enabled = false; }

                        //  ========================================================================PENDING===================================================================================================================
                        //  PENDING --  CLARIFICATION
                        if (User_Access_Id == 59 && Checked == "True") { Lbl_Clarification_orders.Enabled = true; } else if (User_Access_Id == 59 && Checked == "False") { Lbl_Clarification_orders.Enabled = false; }
                        //  PENDING --  HOLD
                        if (User_Access_Id == 60 && Checked == "True") { lbl_Hold.Enabled = true; } else if (User_Access_Id == 60 && Checked == "False") { lbl_Hold.Enabled = false; }
                        //  PENDING --  CANCELLED
                        if (User_Access_Id == 61 && Checked == "True") { lbl_CANCELLED.Enabled = true; } else if (User_Access_Id == 61 && Checked == "False") { lbl_CANCELLED.Enabled = false; }
                        //  PENDING --  COMPLETED
                        if (User_Access_Id == 62 && Checked == "True") { lbl_COmpleted_Order_Count.Enabled = true; } else if (User_Access_Id == 62 && Checked == "False") { lbl_COmpleted_Order_Count.Enabled = false; }
                        //  PENDING --  REASSIGNED
                        if (User_Access_Id == 63 && Checked == "True") { lbl_Reassigned.Enabled = true; } else if (User_Access_Id == 63 && Checked == "False") { lbl_Reassigned.Enabled = false; }
                        //  PENDING --  RUSH
                        if (User_Access_Id == 64 && Checked == "True") { lbl_Rus_Order_Count.Enabled = true; } else if (User_Access_Id == 64 && Checked == "False") { lbl_Rus_Order_Count.Enabled = false; }
                        //  PENDING --  OVER DUE
                        if (User_Access_Id == 65 && Checked == "True") { lbl_Over_Due_Count.Enabled = true; } else if (User_Access_Id == 65 && Checked == "False") { lbl_Over_Due_Count.Enabled = false; }
                        //  PENDING --  REWORK
                        if (User_Access_Id == 66 && Checked == "True") { lbl_Rework_Pending_Allocation.Enabled = true; } else if (User_Access_Id == 66 && Checked == "False") { lbl_Rework_Pending_Allocation.Enabled = false; }



                        //  ========================================================================ABSTRACTOR===================================================================================================================
                        //  ABSTRACTOR -- ALLOCATION
                        if (User_Access_Id == 67 && Checked == "True") { lbl_Abstractor_Allocation_Que.Enabled = true; } else if (User_Access_Id == 67 && Checked == "False") { lbl_Abstractor_Allocation_Que.Enabled = false; }
                        //  ABSTRACTOR -- PROCESSING
                        if (User_Access_Id == 68 && Checked == "True") { lbl_Abstarctor_Processing_Que.Enabled = true; } else if (User_Access_Id == 68 && Checked == "False") { lbl_Abstarctor_Processing_Que.Enabled = false; }
                        //  ABSTRACTOR -- RETURNED
                        if (User_Access_Id == 69 && Checked == "True") { lbl_Abstractor_Returned_Que.Enabled = true; } else if (User_Access_Id == 69 && Checked == "False") { lbl_Abstractor_Returned_Que.Enabled = false; }
                        //  ABSTRACTOR -- CANCELLED
                        if (User_Access_Id == 70 && Checked == "True") { lbl_Abstractor_Cancelled_Que.Enabled = true; } else if (User_Access_Id == 70 && Checked == "False") { lbl_Abstractor_Cancelled_Que.Enabled = false; }
                        //  ABSTRACTOR -- DEALLOCATE
                        if (User_Access_Id == 71 && Checked == "True") { btn_Abstractor_Deallocate.Enabled = true; } else if (User_Access_Id == 71 && Checked == "False") { btn_Abstractor_Deallocate.Enabled = false; }


                        //  ========================================================================VENDOR===================================================================================================================

                        //  VENDOR -- WAITING FOR ACCEPT
                        if (User_Access_Id == 72 && Checked == "True") { lbl_Vendor_Waiting_for_Acceptance.Enabled = true; } else if (User_Access_Id == 72 && Checked == "False") { lbl_Vendor_Waiting_for_Acceptance.Enabled = false; }
                        //  VENDOR -- PROCESSING
                        if (User_Access_Id == 73 && Checked == "True") { lbl_Vendor_Processing.Enabled = true; } else if (User_Access_Id == 73 && Checked == "False") { lbl_Vendor_Processing.Enabled = false; }
                        //  VENDOR -- RETURNED
                        if (User_Access_Id == 74 && Checked == "True") { lbl_Vendor_Returned.Enabled = true; } else if (User_Access_Id == 74 && Checked == "False") { lbl_Vendor_Returned.Enabled = false; }
                        //  VENDOR -- REJECTED
                        if (User_Access_Id == 75 && Checked == "True") { lbl_Vendor_Rejected.Enabled = true; } else if (User_Access_Id == 75 && Checked == "False") { lbl_Vendor_Rejected.Enabled = false; }
                        //  VENDOR -- REPORT
                        if (User_Access_Id == 76 && Checked == "True") { btn_Vendort_Report.Enabled = true; } else if (User_Access_Id == 76 && Checked == "False") { btn_Vendort_Report.Enabled = false; }


                        //  ========================================================================TAX===================================================================================================================

                        //  TAX -- PROCESSING
                        if (User_Access_Id == 77 && Checked == "True") { lbl_Tax_Processing_Count.Enabled = true; } else if (User_Access_Id == 77 && Checked == "False") { lbl_Tax_Processing_Count.Enabled = false; }
                        // TAX -- HOLD
                        if (User_Access_Id == 78 && Checked == "True") { lbl_tax_Hold.Enabled = true; } else if (User_Access_Id == 78 && Checked == "False") { lbl_tax_Hold.Enabled = false; }
                        // TAX -- CANCELLED
                        if (User_Access_Id == 79 && Checked == "True") { lbl_Tax_Cancelled.Enabled = true; } else if (User_Access_Id == 79 && Checked == "False") { lbl_Tax_Cancelled.Enabled = false; }
                        // TAX -- REPORTS
                        if (User_Access_Id == 80 && Checked == "True") { lbl_Tax_Reports.Enabled = true; } else if (User_Access_Id == 80 && Checked == "False") { lbl_Tax_Reports.Enabled = false; }


                        //  ========================================================================DASH BOARD TOP ITEMS===================================================================================================================

                        //  DASHBOARD -- ORDER MOVEMENT


                        if (User_Access_Id == 126 && Checked == "True") { button2.Enabled = true; } else if (User_Access_Id == 126 && Checked == "False") { button2.Enabled = false; }
                        // DASHBOARD -- REALLOCATE
                        if (User_Access_Id == 127 && Checked == "True") { btn_reallocate.Enabled = true; } else if (User_Access_Id == 127 && Checked == "False") { btn_reallocate.Enabled = false; }
                        // DASHBOARD -- SEARCH
                        if (User_Access_Id == 128 && Checked == "True") { button4.Enabled = true; } else if (User_Access_Id == 128 && Checked == "False") { button4.Enabled = false; }
                        // DASHBOARD --  TAKE A BREAK
                        if (User_Access_Id == 129 && Checked == "True") { btn_Break.Enabled = true; } else if (User_Access_Id == 129 && Checked == "False") { btn_Break.Enabled = false; }
                        // DASHBOARD --  ERRORS
                        if (User_Access_Id == 130 && Checked == "True") { btn_Errors.Enabled = true; } else if (User_Access_Id == 130 && Checked == "False") { btn_Errors.Enabled = false; }
                        // DASHBOARD --   ORDER TAT/ETA
                        if (User_Access_Id == 137 && Checked == "True") { Grp_TAT.Visible = true; } else if (User_Access_Id == 137 && Checked == "False") { Grp_TAT.Visible = false; }

                        // DASHBOARD --   Reports
                        if (User_Access_Id == 142 && Checked == "True") { } else if (User_Access_Id == 142 && Checked == "False") { tabControl1.TabPages.Remove(tabPage2); }
                        // DASHBOARD --   MY REPORTS
                        if (User_Access_Id == 143 && Checked == "True") { } else if (User_Access_Id == 143 && Checked == "False") { tabControl1.TabPages.Remove(tabPage5); }
                        // DASHBOARD --   MY ALERTS                                                                                        
                        if (User_Access_Id == 144 && Checked == "True") { } else if (User_Access_Id == 144 && Checked == "False") { tabControl1.TabPages.Remove(tabPage8); }
                        // DASHBOARD --   SCORE BOARD                                                                                      
                        if (User_Access_Id == 145 && Checked == "True") { } else if (User_Access_Id == 145 && Checked == "False") { tabControl1.TabPages.Remove(tabPage10); }
                        // DASHBOARD --   REWORK                                                                                   
                        if (User_Access_Id == 146 && Checked == "True") { } else if (User_Access_Id == 146 && Checked == "False") { tabControl1.TabPages.Remove(tabPage11); }
                        // DASHBOARD --   Super Qc                                                                                       
                        if (User_Access_Id == 147 && Checked == "True") { } else if (User_Access_Id == 147 && Checked == "False") { tabControl1.TabPages.Remove(tabPage12); }
                        // DASHBOARD --   Production Score                                                                               
                        if (User_Access_Id == 148 && Checked == "True") { } else if (User_Access_Id == 148 && Checked == "False") { tabControl1.TabPages.Remove(tabPage19); }
                        // DASHBOARD --   Auto Allocation                                                                                
                        if (User_Access_Id == 149 && Checked == "True") { } else if (User_Access_Id == 149 && Checked == "False") { tabControl1.TabPages.Remove(tabPage20); }




                    }

                    // int Main_Sub_id = int.Parse(dt_View.Rows[]);

                }



            }
            else
            {

                MessageBox.Show("User Access Setup has not done; please check with administrator");
                this.Enabled = false;

            }


        }

        private void User_Role_Wise_Access()
        {

            if (User_Role_Id == "2")
            {
                // Rework tab
                tabControl4.TabPages.Remove(tabPage14);
                tabControl4.TabPages.Remove(tabPage15);

                // Super qc tab
                tabControl5.TabPages.Remove(tabPage17);
                tabControl5.TabPages.Remove(tabPage18);

                tabControl1.TabPages.Remove(tabPage5);

            }
            else if (User_Role_Id == "3")
            {

                // Rework tab
                //tabControl4.TabPages.Remove(tabPage14);
                //tabControl4.TabPages.Remove(tabPage15);

                // Super qc tab
                tabControl5.TabPages.Remove(tabPage17);
                tabControl5.TabPages.Remove(tabPage18);

            }

        }

        private void OrdersToolStripButton_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Orders_Queue OrderQueue = new Ordermanagement_01.Orders_Queue(userid, User_Role_Id, Production_Date);
            OrderQueue.Show();
        }

        private bool Validate_User_Access(int Access_Id)
        {
            Hashtable htcheck = new Hashtable();
            System.Data.DataTable dtcheck = new System.Data.DataTable();

            int Check = 0;

            htcheck.Add("@Trans", "CHECK_BY_USER_ACCEES");
            htcheck.Add("@User_ID", userid);
            htcheck.Add("@Sub_Menu_ID", Access_Id);

            dtcheck = dataaccess.ExecuteSP("SP_UserAccess_Control_Trans", htcheck);
            if (dtcheck.Rows.Count > 0)
            {

                Check = int.Parse(dtcheck.Rows[0]["count"].ToString());
            }
            else
            {

                Check = 0;

            }

            if (Check > 0)
            {

                return true;
            }
            else
            {
                MessageBox.Show("You do not have permission to access; Check with administrator");
                return false;
            }



        }

        private void cr_Rework_AllReportsViewer_Load(object sender, EventArgs e)
        {

        }

        private void ddl_MySubprocess_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void lbl_Rework_Mysubpro_Click(object sender, EventArgs e)
        {

        }

        private void txt_Search_By_Employee_Name_TextChanged(object sender, EventArgs e)
        {
            //  load_Progressbar.Start_progres();
            Search_By_EmployeeName();
        }

        private void Search_By_EmployeeName()
        {
            if (txt_Search_By_Employee_Name.Text != "")
            {
                if (dt_Final_Score.Rows.Count > 0)
                {
                    DataView dt_Search = new DataView(dt_Final_Score);
                    dt_Search.RowFilter = "User_Name like '%" + txt_Search_By_Employee_Name.Text.ToString() + "%'";

                    System.Data.DataTable dtSearch_UserName = new System.Data.DataTable();
                    dtSearch_UserName = dt_Search.ToTable();
                    if (dtSearch_UserName.Rows.Count > 0)
                    {
                        //  Grid_Score.Rows.Clear();
                        Grid_Score.DataSource = null;
                        Grid_Score.ColumnCount = 35;
                        Grid_Score.Columns[0].Name = "User_Id";
                        Grid_Score.Columns[0].HeaderText = "User_Id";
                        Grid_Score.Columns[0].DataPropertyName = "User_Id";
                        Grid_Score.Columns[0].Width = 60;
                        Grid_Score.Columns[0].Visible = false;

                        Grid_Score.Columns[1].Name = "User_Name";
                        Grid_Score.Columns[1].HeaderText = "Employee name";
                        Grid_Score.Columns[1].DataPropertyName = "User_Name";
                        Grid_Score.Columns[1].Width = 120;

                        Grid_Score.Columns[2].Name = "Grand_Eff";
                        Grid_Score.Columns[2].HeaderText = "G.T";
                        Grid_Score.Columns[2].DataPropertyName = "Grand_Eff";
                        Grid_Score.Columns[2].Width = 100;
                        Grid_Score.Columns[2].Visible = false;

                        Grid_Score.Columns[3].Name = "Avg_Eff";
                        Grid_Score.Columns[3].HeaderText = "AVG";
                        Grid_Score.Columns[3].DataPropertyName = "Avg_Eff";
                        Grid_Score.Columns[3].Width = 50;

                        Grid_Score.Columns[4].Name = "1";
                        Grid_Score.Columns[4].HeaderText = "D1";
                        Grid_Score.Columns[4].DataPropertyName = "D1";
                        Grid_Score.Columns[4].Width = 37;


                        Grid_Score.Columns[5].Name = "2";
                        Grid_Score.Columns[5].HeaderText = "D2";
                        Grid_Score.Columns[5].DataPropertyName = "D2";
                        Grid_Score.Columns[5].Width = 37;

                        Grid_Score.Columns[6].Name = "3";
                        Grid_Score.Columns[6].HeaderText = "D3";
                        Grid_Score.Columns[6].DataPropertyName = "D3";
                        Grid_Score.Columns[6].Width = 37;

                        Grid_Score.Columns[7].Name = "4";
                        Grid_Score.Columns[7].HeaderText = "D4";
                        Grid_Score.Columns[7].DataPropertyName = "D4";
                        Grid_Score.Columns[7].Width = 37;

                        Grid_Score.Columns[8].Name = "5";
                        Grid_Score.Columns[8].HeaderText = "D5";
                        Grid_Score.Columns[8].DataPropertyName = "D5";
                        Grid_Score.Columns[8].Width = 37;

                        Grid_Score.Columns[9].Name = "6";
                        Grid_Score.Columns[9].HeaderText = "D6";
                        Grid_Score.Columns[9].DataPropertyName = "D6";
                        Grid_Score.Columns[9].Width = 37;

                        Grid_Score.Columns[10].Name = "7";
                        Grid_Score.Columns[10].HeaderText = "D7";
                        Grid_Score.Columns[10].DataPropertyName = "D7";
                        Grid_Score.Columns[10].Width = 37;

                        Grid_Score.Columns[11].Name = "8";
                        Grid_Score.Columns[11].HeaderText = "D8";
                        Grid_Score.Columns[11].DataPropertyName = "D8";
                        Grid_Score.Columns[11].Width = 37;

                        Grid_Score.Columns[12].Name = "9";
                        Grid_Score.Columns[12].HeaderText = "D9";
                        Grid_Score.Columns[12].DataPropertyName = "D9";
                        Grid_Score.Columns[12].Width = 37;

                        Grid_Score.Columns[13].Name = "10";
                        Grid_Score.Columns[13].HeaderText = "D10";
                        Grid_Score.Columns[13].DataPropertyName = "D10";
                        Grid_Score.Columns[13].Width = 37;

                        Grid_Score.Columns[14].Name = "11";
                        Grid_Score.Columns[14].HeaderText = "D11";
                        Grid_Score.Columns[14].DataPropertyName = "D11";
                        Grid_Score.Columns[14].Width = 37;

                        Grid_Score.Columns[15].Name = "12";
                        Grid_Score.Columns[15].HeaderText = "D12";
                        Grid_Score.Columns[15].DataPropertyName = "D12";
                        Grid_Score.Columns[15].Width = 37;

                        Grid_Score.Columns[16].Name = "13";
                        Grid_Score.Columns[16].HeaderText = "D13";
                        Grid_Score.Columns[16].DataPropertyName = "D13";
                        Grid_Score.Columns[16].Width = 37;

                        Grid_Score.Columns[17].Name = "14";
                        Grid_Score.Columns[17].HeaderText = "D14";
                        Grid_Score.Columns[17].DataPropertyName = "D14";
                        Grid_Score.Columns[17].Width = 37;

                        Grid_Score.Columns[18].Name = "15";
                        Grid_Score.Columns[18].HeaderText = "D15";
                        Grid_Score.Columns[18].DataPropertyName = "D15";
                        Grid_Score.Columns[18].Width = 37;

                        Grid_Score.Columns[19].Name = "16";
                        Grid_Score.Columns[19].HeaderText = "D16";
                        Grid_Score.Columns[19].DataPropertyName = "D16";
                        Grid_Score.Columns[19].Width = 37;

                        Grid_Score.Columns[20].Name = "17";
                        Grid_Score.Columns[20].HeaderText = "D17";
                        Grid_Score.Columns[20].DataPropertyName = "D17";
                        Grid_Score.Columns[20].Width = 37;

                        Grid_Score.Columns[21].Name = "18";
                        Grid_Score.Columns[21].HeaderText = "D18";
                        Grid_Score.Columns[21].DataPropertyName = "D18";
                        Grid_Score.Columns[21].Width = 37;

                        Grid_Score.Columns[22].Name = "19";
                        Grid_Score.Columns[22].HeaderText = "D19";
                        Grid_Score.Columns[22].DataPropertyName = "D19";
                        Grid_Score.Columns[22].Width = 37;

                        Grid_Score.Columns[23].Name = "20";
                        Grid_Score.Columns[23].HeaderText = "D20";
                        Grid_Score.Columns[23].DataPropertyName = "D20";
                        Grid_Score.Columns[23].Width = 37;

                        Grid_Score.Columns[24].Name = "21";
                        Grid_Score.Columns[24].HeaderText = "D21";
                        Grid_Score.Columns[24].DataPropertyName = "D21";
                        Grid_Score.Columns[24].Width = 37;

                        Grid_Score.Columns[25].Name = "22";
                        Grid_Score.Columns[25].HeaderText = "D22";
                        Grid_Score.Columns[25].DataPropertyName = "D22";
                        Grid_Score.Columns[25].Width = 37;

                        Grid_Score.Columns[26].Name = "23";
                        Grid_Score.Columns[26].HeaderText = "D23";
                        Grid_Score.Columns[26].DataPropertyName = "D23";
                        Grid_Score.Columns[26].Width = 37;

                        Grid_Score.Columns[27].Name = "24";
                        Grid_Score.Columns[27].HeaderText = "D24";
                        Grid_Score.Columns[27].DataPropertyName = "D24";
                        Grid_Score.Columns[27].Width = 37;

                        Grid_Score.Columns[28].Name = "25";
                        Grid_Score.Columns[28].HeaderText = "D25";
                        Grid_Score.Columns[28].DataPropertyName = "D25";
                        Grid_Score.Columns[28].Width = 37;

                        Grid_Score.Columns[29].Name = "26";
                        Grid_Score.Columns[29].HeaderText = "D26";
                        Grid_Score.Columns[29].DataPropertyName = "D26";
                        Grid_Score.Columns[29].Width = 37;

                        Grid_Score.Columns[30].Name = "27";
                        Grid_Score.Columns[30].HeaderText = "D27";
                        Grid_Score.Columns[30].DataPropertyName = "D27";
                        Grid_Score.Columns[30].Width = 37;

                        Grid_Score.Columns[31].Name = "28";
                        Grid_Score.Columns[31].HeaderText = "D28";
                        Grid_Score.Columns[31].DataPropertyName = "D28";
                        Grid_Score.Columns[31].Width = 37;

                        Grid_Score.Columns[32].Name = "29";
                        Grid_Score.Columns[32].HeaderText = "D29";
                        Grid_Score.Columns[32].DataPropertyName = "D29";
                        Grid_Score.Columns[32].Width = 37;

                        Grid_Score.Columns[33].Name = "30";
                        Grid_Score.Columns[33].HeaderText = "D30";
                        Grid_Score.Columns[33].DataPropertyName = "D30";
                        Grid_Score.Columns[33].Width = 37;

                        Grid_Score.Columns[34].Name = "31";
                        Grid_Score.Columns[34].HeaderText = "D31";
                        Grid_Score.Columns[34].DataPropertyName = "D31";
                        Grid_Score.Columns[34].Width = 37;

                        Grid_Score.Visible = true;
                        Grid_Score.DataSource = dtSearch_UserName;
                    }
                    else
                    {

                        string Emp = "Empty!";
                        MessageBox.Show("No Record Found", Emp);

                        //  New_Score_Board1();
                    }
                }
                else
                {
                    Grid_Score.DataSource = null;
                    Grid_Score.Rows.Clear();
                }
            }
        }

        private void Search_By_Employee_Name()
        {
            DataView dt_Search = new DataView(dt_Final_Score);
            dt_Search.RowFilter = "User_Name like '%" + txt_Search_By_Employee_Name.Text.ToString() + "%'";
            System.Data.DataTable dtSearch_UserName = new System.Data.DataTable();
            dtSearch_UserName = dt_Search.ToTable();
            if (dtSearch_UserName.Rows.Count > 0)
            {
                //  Grid_Score.Rows.Clear();
                Grid_Score.DataSource = null;
                Grid_Score.ColumnCount = 35;

                Grid_Score.Columns[0].Name = "User_Id";
                Grid_Score.Columns[0].HeaderText = "User_Id";
                Grid_Score.Columns[0].DataPropertyName = "User_Id";
                Grid_Score.Columns[0].Width = 60;
                Grid_Score.Columns[0].Visible = false;


                Grid_Score.Columns[1].Name = "User_Name";
                Grid_Score.Columns[1].HeaderText = "Employee name";
                Grid_Score.Columns[1].DataPropertyName = "User_Name";
                Grid_Score.Columns[1].Width = 120;

                Grid_Score.Columns[2].Name = "Grand_Eff";
                Grid_Score.Columns[2].HeaderText = "G.T";
                Grid_Score.Columns[2].DataPropertyName = "Grand_Eff";
                Grid_Score.Columns[2].Width = 100;
                Grid_Score.Columns[2].Visible = false;

                Grid_Score.Columns[3].Name = "Avg_Eff";
                Grid_Score.Columns[3].HeaderText = "AVG";
                Grid_Score.Columns[3].DataPropertyName = "Avg_Eff";
                Grid_Score.Columns[3].Width = 50;

                Grid_Score.Columns[4].Name = "1";
                Grid_Score.Columns[4].HeaderText = "D1";
                Grid_Score.Columns[4].DataPropertyName = "D1";
                Grid_Score.Columns[4].Width = 37;

                Grid_Score.Columns[5].Name = "2";
                Grid_Score.Columns[5].HeaderText = "D2";
                Grid_Score.Columns[5].DataPropertyName = "D2";
                Grid_Score.Columns[5].Width = 37;

                Grid_Score.Columns[6].Name = "3";
                Grid_Score.Columns[6].HeaderText = "D3";
                Grid_Score.Columns[6].DataPropertyName = "D3";
                Grid_Score.Columns[6].Width = 37;

                Grid_Score.Columns[7].Name = "4";
                Grid_Score.Columns[7].HeaderText = "D4";
                Grid_Score.Columns[7].DataPropertyName = "D4";
                Grid_Score.Columns[7].Width = 37;

                Grid_Score.Columns[8].Name = "5";
                Grid_Score.Columns[8].HeaderText = "D5";
                Grid_Score.Columns[8].DataPropertyName = "D5";
                Grid_Score.Columns[8].Width = 37;

                Grid_Score.Columns[9].Name = "6";
                Grid_Score.Columns[9].HeaderText = "D6";
                Grid_Score.Columns[9].DataPropertyName = "D6";
                Grid_Score.Columns[9].Width = 37;

                Grid_Score.Columns[10].Name = "7";
                Grid_Score.Columns[10].HeaderText = "D7";
                Grid_Score.Columns[10].DataPropertyName = "D7";
                Grid_Score.Columns[10].Width = 37;

                Grid_Score.Columns[11].Name = "8";
                Grid_Score.Columns[11].HeaderText = "D8";
                Grid_Score.Columns[11].DataPropertyName = "D8";
                Grid_Score.Columns[11].Width = 37;

                Grid_Score.Columns[12].Name = "9";
                Grid_Score.Columns[12].HeaderText = "D9";
                Grid_Score.Columns[12].DataPropertyName = "D9";
                Grid_Score.Columns[12].Width = 37;

                Grid_Score.Columns[13].Name = "10";
                Grid_Score.Columns[13].HeaderText = "D10";
                Grid_Score.Columns[13].DataPropertyName = "D10";
                Grid_Score.Columns[13].Width = 37;

                Grid_Score.Columns[14].Name = "11";
                Grid_Score.Columns[14].HeaderText = "D11";
                Grid_Score.Columns[14].DataPropertyName = "D11";
                Grid_Score.Columns[14].Width = 37;

                Grid_Score.Columns[15].Name = "12";
                Grid_Score.Columns[15].HeaderText = "D12";
                Grid_Score.Columns[15].DataPropertyName = "D12";
                Grid_Score.Columns[15].Width = 37;

                Grid_Score.Columns[16].Name = "13";
                Grid_Score.Columns[16].HeaderText = "D13";
                Grid_Score.Columns[16].DataPropertyName = "D13";
                Grid_Score.Columns[16].Width = 37;

                Grid_Score.Columns[17].Name = "14";
                Grid_Score.Columns[17].HeaderText = "D14";
                Grid_Score.Columns[17].DataPropertyName = "D14";
                Grid_Score.Columns[17].Width = 37;

                Grid_Score.Columns[18].Name = "15";
                Grid_Score.Columns[18].HeaderText = "D15";
                Grid_Score.Columns[18].DataPropertyName = "D15";
                Grid_Score.Columns[18].Width = 37;

                Grid_Score.Columns[19].Name = "16";
                Grid_Score.Columns[19].HeaderText = "D16";
                Grid_Score.Columns[19].DataPropertyName = "D16";
                Grid_Score.Columns[19].Width = 37;

                Grid_Score.Columns[20].Name = "17";
                Grid_Score.Columns[20].HeaderText = "D17";
                Grid_Score.Columns[20].DataPropertyName = "D17";
                Grid_Score.Columns[20].Width = 37;

                Grid_Score.Columns[21].Name = "18";
                Grid_Score.Columns[21].HeaderText = "D18";
                Grid_Score.Columns[21].DataPropertyName = "D18";
                Grid_Score.Columns[21].Width = 37;

                Grid_Score.Columns[22].Name = "19";
                Grid_Score.Columns[22].HeaderText = "D19";
                Grid_Score.Columns[22].DataPropertyName = "D19";
                Grid_Score.Columns[22].Width = 37;

                Grid_Score.Columns[23].Name = "20";
                Grid_Score.Columns[23].HeaderText = "D20";
                Grid_Score.Columns[23].DataPropertyName = "D20";
                Grid_Score.Columns[23].Width = 37;

                Grid_Score.Columns[24].Name = "21";
                Grid_Score.Columns[24].HeaderText = "D21";
                Grid_Score.Columns[24].DataPropertyName = "D21";
                Grid_Score.Columns[24].Width = 37;

                Grid_Score.Columns[25].Name = "22";
                Grid_Score.Columns[25].HeaderText = "D22";
                Grid_Score.Columns[25].DataPropertyName = "D22";
                Grid_Score.Columns[25].Width = 37;

                Grid_Score.Columns[26].Name = "23";
                Grid_Score.Columns[26].HeaderText = "D23";
                Grid_Score.Columns[26].DataPropertyName = "D23";
                Grid_Score.Columns[26].Width = 37;

                Grid_Score.Columns[27].Name = "24";
                Grid_Score.Columns[27].HeaderText = "D24";
                Grid_Score.Columns[27].DataPropertyName = "D24";
                Grid_Score.Columns[27].Width = 37;

                Grid_Score.Columns[28].Name = "25";
                Grid_Score.Columns[28].HeaderText = "D25";
                Grid_Score.Columns[28].DataPropertyName = "D25";
                Grid_Score.Columns[28].Width = 37;

                Grid_Score.Columns[29].Name = "26";
                Grid_Score.Columns[29].HeaderText = "D26";
                Grid_Score.Columns[29].DataPropertyName = "D26";
                Grid_Score.Columns[29].Width = 37;

                Grid_Score.Columns[30].Name = "27";
                Grid_Score.Columns[30].HeaderText = "D27";
                Grid_Score.Columns[30].DataPropertyName = "D27";
                Grid_Score.Columns[30].Width = 37;

                Grid_Score.Columns[31].Name = "28";
                Grid_Score.Columns[31].HeaderText = "D28";
                Grid_Score.Columns[31].DataPropertyName = "D28";
                Grid_Score.Columns[31].Width = 37;

                Grid_Score.Columns[32].Name = "29";
                Grid_Score.Columns[32].HeaderText = "D29";
                Grid_Score.Columns[32].DataPropertyName = "D29";
                Grid_Score.Columns[32].Width = 37;

                Grid_Score.Columns[33].Name = "30";
                Grid_Score.Columns[33].HeaderText = "D30";
                Grid_Score.Columns[33].DataPropertyName = "D30";
                Grid_Score.Columns[33].Width = 37;

                Grid_Score.Columns[34].Name = "31";
                Grid_Score.Columns[34].HeaderText = "D31";
                Grid_Score.Columns[34].DataPropertyName = "D31";
                Grid_Score.Columns[34].Width = 37;

                Grid_Score.Visible = true;
                Grid_Score.DataSource = dtSearch_UserName;
            }
            else
            {

                //  Grid_Score.DataSource = null;
                // Grid_Score.Rows.Clear();
                //Clear_Search_By_Username();
            }

        }

        private void txt_Search_By_Employee_Name_MouseEnter(object sender, EventArgs e)
        {
            txt_Search_By_Employee_Name.ForeColor = Color.Black;

        }

        private const int CP_NOCLOSE_BUTTON = 0x200;
        private int value;

        protected override CreateParams CreateParams
        {
            get
            {
                CreateParams myCp = base.CreateParams;
                myCp.ClassStyle = myCp.ClassStyle | CP_NOCLOSE_BUTTON;
                return myCp;
            }
        }

        private void btn_Target_Matrix_Click(object sender, EventArgs e)
        {

            Ordermanagement_01.Target_Matrix targetmatrix = new Ordermanagement_01.Target_Matrix(userid, int.Parse(User_Role_Id.ToString()));
            targetmatrix.Show();


        }

        private void txt_Search_By_Employee_Name_KeyPress(object sender, KeyPressEventArgs e)
        {
            if ((char.IsWhiteSpace(e.KeyChar)) && txt_Search_By_Employee_Name.Text.Length == 0) //for block first whitespace 
            {
                e.Handled = true;
                if (e.Handled == true)
                {
                    MessageBox.Show("White Space not allowed for First Charcter");
                    txt_Search_By_Employee_Name.Select();
                }
            }

            if (!(char.IsLetter(e.KeyChar)) && e.KeyChar != (char)Keys.Back && !(char.IsWhiteSpace(e.KeyChar)))
            {
                e.Handled = true;
                if (e.Handled == true)
                {
                    MessageBox.Show("Enter only alphabets");
                    txt_Search_By_Employee_Name.Select();
                }
                // MessageBox.Show("Invalid");
            }
        }

        private void btn_Client_Production_Clear_Click(object sender, EventArgs e)
        {
            ddl_Client_Status.SelectedIndex = 0;
            ddl_Subprocess_Status.SelectedIndex = 0;

        }

        private void rbtn_Score_board_Ideal_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void rbtn_Score_Board_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void btn_Lien_Name_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Masters.Name name = new Ordermanagement_01.Masters.Name(userid, int.Parse(User_Role_Id.ToString()));
            name.Show();


        }

        private void rbtn_Score_Production_Time_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void rbtn_Score_Target_Wise_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void taxClientwiseOrderMovementSetupToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Masters.Tax_Client_Wise_Setu_ client_Setup = new Masters.Tax_Client_Wise_Setu_(userid, int.Parse(User_Role_Id));
            client_Setup.Show();
        }

        private void Daily_User_Login()
        {
            Hashtable htget_Hour = new Hashtable();
            System.Data.DataTable dtget_Hour = new System.Data.DataTable();

            htget_Hour.Add("@Trans", "GET_HOUR");
            dtget_Hour = dataaccess.ExecuteSP("Sp_Order_ProductionDate", htget_Hour);
            if (dtget_Hour.Rows.Count > 0)
            {
                Hour = int.Parse(dtget_Hour.Rows[0]["Hour"].ToString());
            }

            Populate_Login_Production_Date();

            Hashtable htcheck = new Hashtable();
            System.Data.DataTable dtcheck = new System.Data.DataTable();

            int Check = 0;

            htcheck.Add("@Trans", "CHECK_USER_LOGIN_PRODUCTION_DATE_WISE");
            htcheck.Add("@User_Id", userid);
            htcheck.Add("@Production_Date", Login_Production_Date);
            dtcheck = dataaccess.ExecuteSP("SP_User_Login_Details", htcheck);
            if (dtcheck.Rows.Count > 0)
            {

                Check = int.Parse(dtcheck.Rows[0]["count"].ToString());
            }
            else
            {

                Check = 0;

            }

            Hashtable ht_User = new Hashtable();
            System.Data.DataTable dt_user = new System.Data.DataTable();


            if (Check == 0)
            {
                ht_User.Add("@Trans", "INSERT");
                ht_User.Add("@User_Id", userid);
                ht_User.Add("@Production_Date", Login_Production_Date);

                // This is For Night Shift
                if (Hour == 17 || Hour == 18 || Hour == 19 || Hour == 20 || Hour == 21 || Hour == 22 || Hour == 23 || Hour == 0 || Hour == 1 || Hour == 2 || Hour == 3 || Hour == 4 || Hour == 5 || Hour == 6)
                {
                    ht_User.Add("@Shift_Login_Id", 3);

                }
                else
                {
                    // This is For Day Shift
                    ht_User.Add("@Shift_Login_Id", 1);

                }

                dt_user = dataaccess.ExecuteSP("SP_User_Login_Details", ht_User);

            }

            else
            {
                ht_User.Add("@Trans", "UPDATE_LOGOUT");
                ht_User.Add("@User_Id", userid);
                ht_User.Add("@Production_Date", Login_Production_Date);
                dt_user = dataaccess.ExecuteSP("SP_User_Login_Details", ht_User);

            }



        }

        private void btn_Attendance_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.User_Login_Details name = new Ordermanagement_01.User_Login_Details(userid, int.Parse(User_Role_Id.ToString()));
            name.Show();
        }

        private void btn_Dail_Attendance_Report_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.DailyStatusReport_Preview name = new Ordermanagement_01.DailyStatusReport_Preview(userid, User_Role_Id.ToString(), Production_Date.ToString());
            name.Show();

        }

        private void btn_Accuracy_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Accuracy name = new Ordermanagement_01.Accuracy(userid, User_Role_Id.ToString(), Production_Date.ToString());
            name.Show();
        }

        private void btn_Scorr_Board_Click(object sender, EventArgs e)
        {
            Ordermanagement_01.Dashboard.ScoreBoard Score_Board = new Ordermanagement_01.Dashboard.ScoreBoard(userid, int.Parse(User_Role_Id.ToString()));
            Score_Board.Show();
        }

        private void timer1_Tick(object sender, EventArgs e)
        {





            Thread t = new Thread((ThreadStart)delegate { Refresh_Dashcount(); });
            t.SetApartmentState(ApartmentState.STA);
            t.Start();

            //if (!Dash_Board_Worker.IsBusy)//Check if the worker is already in progress
            //{
            //    Dash_Board_Worker.RunWorkerAsync(2000);//Call the background worker



            // }

        }

        protected void Dash_Board_Worker_DoWork(object sender, DoWorkEventArgs e)
        {
            BackgroundWorker sendingWorker = (BackgroundWorker)sender;//Capture the BackgroundWorker that fired the event
                                                                      // object[] arrObjects = (object[])e.Argument;//Collect the array of objects the we recived from the main thread

            // int maxValue = (int)arrObjects[0];//Get the numeric value from inside the objects array, don't forget to cast
            //  StringBuilder sb = new StringBuilder();//Declare a new string builder to store the result.

            //for (int i = 1; i <= maxValue; i++)//Start a for loop
            //{
            //    if (!sendingWorker.CancellationPending)//At each iteration of the loop, check if there is a cancellation request pending 
            //    {
            //        sb.Append(string.Format("Counting number: {0}{1}", PerformHeavyOperation(i), Environment.NewLine));//Append the result to the string builder
            //        sendingWorker.ReportProgress(i);//Report our progress to the main thread
            //    }
            //    else
            //    {
            //        e.Cancel = true;//If a cancellation request is pending,assgine this flag a value of true
            //        break;// If a cancellation request is pending, break to exit the loop
            //    }
            //}

            // e.Result = sb.ToString();// Send our result to the main thread!


            //  Refresh_Dashcount();


            Get_Count_Of_Orders();

        }

        protected void Dash_Board_Worker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            if (!e.Cancelled && e.Error == null)//Check if the worker has been cancelled or if an error occured
            {
                //string result = (string)e.Result;//Get the result from the background thread
                //txtResult.Text = result;//Display the result to the user
                //lblStatus.Text = "Done";
            }
            else if (e.Cancelled)
            {
                //lblStatus.Text = "User Cancelled";
            }
            else
            {
                // lblStatus.Text = "An error has occured";
            }
            //  btnStart.Enabled = true;//Reneable the start button
        }

        protected void Dash_Board_Worker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            //Show the progress to the user based on the input we got from the background worker
            // lblStatus.Text = string.Format("Counting number: {0}...", e.ProgressPercentage);
        }

        //private void notifyIcon1_MouseDoubleClick(object sender, MouseEventArgs e)
        //{

        //}

        private void tabControl2_SelectedIndexChanged(object sender, EventArgs e)
        {
            txt_Fromdate.Value = DateTime.Now;
            txt_Todate.Value = DateTime.Now;
            txt_Employee_From_Date.Value = DateTime.Now;
            txt_Employee_Todate.Value = DateTime.Now;


        }
        private async void Notification_Details()
        {
            var dictionary = new Dictionary<string, object>()
            {
                {"@View_Type","Count" },
                {"@User_Id",userid }
            };
            var data = new StringContent(JsonConvert.SerializeObject(dictionary), Encoding.UTF8, "application/json");
            using (var httpClient = new HttpClient())
            {
                var response = await httpClient.PostAsync(Base_Url.Url + "/Notification/Count", data);
                if (response.IsSuccessStatusCode)
                {
                    if (response.StatusCode == HttpStatusCode.OK)
                    {
                        var result = await response.Content.ReadAsStringAsync();
                        System.Data.DataTable dt = JsonConvert.DeserializeObject<System.Data.DataTable>(result);
                        if (dt != null && dt.Rows.Count > 0)
                        {
                            value = Convert.ToInt32(dt.Rows[0][0]);
                            if (value > 0)
                            {
                                notificationToolStripbtn.Image = Resources.Notificationorange;
                                notificationToolStripbtn.ForeColor = Color.White;
                                notificationToolStripbtn.Text = "Notification" + "(" + value + ")";
                            }
                            else
                            {
                                notificationToolStripbtn.Image = Resources.Notification_w_;
                                notificationToolStripbtn.ForeColor = Color.White;
                                notificationToolStripbtn.Text = "Notification";
                            }
                        }
                    }
                }
            }
        }
        private async void UserCount()
        {
            try
            {
                var dictionary = new Dictionary<string, object>()
            {
                {"@Trans","UserCount" },
                {"@User_Id",userid }
            };
                var data = new StringContent(JsonConvert.SerializeObject(dictionary), Encoding.UTF8, "application/json");
                using (var httpClient = new HttpClient())
                {
                    var response = await httpClient.PostAsync(Base_Url.Url + "/Notification/Count", data);
                    if (response.IsSuccessStatusCode)
                    {
                        if (response.StatusCode == HttpStatusCode.OK)
                        {
                            var result = await response.Content.ReadAsStringAsync();
                            System.Data.DataTable dt = JsonConvert.DeserializeObject<System.Data.DataTable>(result);
                            if (dt != null && dt.Rows.Count > 0)
                            {
                                value = Convert.ToInt32(dt.Rows[0][0]);
                                if (value == 0)
                                {
                                    GetData();
                                    notificationToolStripbtn.Image = Resources.Notification_w_;
                                    notificationToolStripbtn.ForeColor = Color.White;
                                    notificationToolStripbtn.Text = "Notification";
                                }
                                else
                                {
                                    Notification_Details();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private async void GetData()
        {
            try
            {
                SplashScreenManager.ShowForm(this, typeof(WaitForm1), true, true, false);
                var dictionary1 = new Dictionary<string, object>()
                {
                {"@Trans","User_Details_View" },
                { "@User_Id",userid}
                };
                var data = new StringContent(JsonConvert.SerializeObject(dictionary1), Encoding.UTF8, "application/json");
                using (var httpClient = new HttpClient())
                {
                    var response = await httpClient.PostAsync(Base_Url.Url + "/Notification/Order_Notification", data);
                    if (response.IsSuccessStatusCode)
                    {
                        if (response.StatusCode == HttpStatusCode.OK)
                        {
                            var result = await response.Content.ReadAsStringAsync();
                            System.Data.DataTable dt = JsonConvert.DeserializeObject<System.Data.DataTable>(result);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                SplashScreenManager.CloseForm(false);
                throw ex;
            }
            finally
            {
                SplashScreenManager.CloseForm(false);
            }
        }
    }
}
